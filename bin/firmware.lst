
/Users/nrobinson/particle/softAP/bin/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f8  080a0018  080a0018  00008018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a6910  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000074  20000300  080a6914  00018300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000006b0  20000374  20000374  00020374  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a6988  080a6988  0001e988  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a69b0  080a69b0  0001e9b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00087163  00000000  00000000  0001e9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000113b4  00000000  00000000  000a5b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b420  00000000  00000000  000b6ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000017a8  00000000  00000000  000c22eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002850  00000000  00000000  000c3a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024fee  00000000  00000000  000c62e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002402f  00000000  00000000  000eb2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007bb32  00000000  00000000  0010f300  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007474  00000000  00000000  0018ae34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	4c 12 0a 08                                         L...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f8e7 	bl	80a1200 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f8ec 	bl	80a1216 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a6914 	.word	0x080a6914
 80a004c:	20000374 	.word	0x20000374
 80a0050:	20000374 	.word	0x20000374
 80a0054:	20000a24 	.word	0x20000a24
 80a0058:	20000a24 	.word	0x20000a24

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ff5b 	bl	80a0f18 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a68ac 	.word	0x080a68ac
 80a0084:	080a6910 	.word	0x080a6910

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b87c 	b.w	80a0184 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8bf 	bl	80a0210 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bf29 	b.w	80a0eec <_post_loop>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 ba23 	b.w	80a04e4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_>:
        { "/rsa-utils/prng4.js", "application/javascript", prng4_js },
        { nullptr }
};

void myPage(const char* url, ResponseCallback* cb, void* cbArg, Reader* body, Writer* result, void* reserved)
{
 80a00b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a00b4:	4607      	mov	r7, r0
 80a00b6:	460c      	mov	r4, r1
 80a00b8:	4615      	mov	r5, r2
 80a00ba:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        Serial.printlnf("handling page %s", url);
 80a00be:	f000 fe47 	bl	80a0d50 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a00c2:	2101      	movs	r1, #1
 80a00c4:	4a26      	ldr	r2, [pc, #152]	; (80a0160 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xb0>)
 80a00c6:	463b      	mov	r3, r7
 80a00c8:	f000 fb61 	bl	80a078e <_ZN5Print11printf_implEbPKcz>

        if (strcmp(url,"/index")==0) {
 80a00cc:	4638      	mov	r0, r7
 80a00ce:	4925      	ldr	r1, [pc, #148]	; (80a0164 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xb4>)
 80a00d0:	f001 f8a9 	bl	80a1226 <strcmp>
 80a00d4:	4606      	mov	r6, r0
 80a00d6:	b990      	cbnz	r0, 80a00fe <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x4e>
                Serial.println("sending redirect");
 80a00d8:	f000 fe3a 	bl	80a0d50 <_Z16_fetch_usbserialv>
 80a00dc:	4922      	ldr	r1, [pc, #136]	; (80a0168 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xb8>)
 80a00de:	f000 fb1e 	bl	80a071e <_ZN5Print7printlnEPKc>

    struct __attribute__((packed)) Header {
    		uint16_t size;
    		const char* header_list;		// when non-null, a series of headers. Each header MUST be terminated by CRLF.

    		Header(const char* headers) : size(sizeof(*this)), header_list(headers) {}
 80a00e2:	2306      	movs	r3, #6
 80a00e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a00e8:	4b20      	ldr	r3, [pc, #128]	; (80a016c <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xbc>)
                Header h("Location: /index.html\r\n");
                cb(cbArg, 0, 301, "text/plain", &h);
 80a00ea:	4628      	mov	r0, r5
 80a00ec:	f8cd 300a 	str.w	r3, [sp, #10]
 80a00f0:	ab02      	add	r3, sp, #8
 80a00f2:	9300      	str	r3, [sp, #0]
 80a00f4:	4631      	mov	r1, r6
 80a00f6:	f240 122d 	movw	r2, #301	; 0x12d
 80a00fa:	4b1d      	ldr	r3, [pc, #116]	; (80a0170 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xc0>)
 80a00fc:	e01a      	b.n	80a0134 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x84>
 80a00fe:	2600      	movs	r6, #0
                return;
        }

        int8_t idx = 0;
        for (;; idx++) {
                Page& p = myPages[idx];
 80a0100:	fa4f fa86 	sxtb.w	sl, r6
                if (!p.url) {
 80a0104:	230c      	movs	r3, #12
 80a0106:	fb03 f30a 	mul.w	r3, r3, sl
 80a010a:	4a1a      	ldr	r2, [pc, #104]	; (80a0174 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xc4>)
 80a010c:	58d1      	ldr	r1, [r2, r3]
 80a010e:	eb02 0903 	add.w	r9, r2, r3
 80a0112:	b149      	cbz	r1, 80a0128 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x78>
                        idx = -1;
                        break;
                }
                else if (strcmp(url, p.url)==0) {
 80a0114:	4638      	mov	r0, r7
 80a0116:	f001 f886 	bl	80a1226 <strcmp>
 80a011a:	3601      	adds	r6, #1
 80a011c:	4601      	mov	r1, r0
 80a011e:	2800      	cmp	r0, #0
 80a0120:	d1ee      	bne.n	80a0100 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x50>
                        break;
                }
        }

        if (idx==-1) {
 80a0122:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80a0126:	d107      	bne.n	80a0138 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x88>
                cb(cbArg, 0, 404, nullptr, nullptr);
 80a0128:	2100      	movs	r1, #0
 80a012a:	4628      	mov	r0, r5
 80a012c:	460b      	mov	r3, r1
 80a012e:	9100      	str	r1, [sp, #0]
 80a0130:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80a0134:	47a0      	blx	r4
 80a0136:	e010      	b.n	80a015a <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xaa>
        }
        else {
                cb(cbArg, 0, 200, myPages[idx].mime_type, nullptr);
 80a0138:	9000      	str	r0, [sp, #0]
 80a013a:	22c8      	movs	r2, #200	; 0xc8
 80a013c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80a0140:	4628      	mov	r0, r5
 80a0142:	47a0      	blx	r4
                result->write(myPages[idx].data);
 80a0144:	f8d9 4008 	ldr.w	r4, [r9, #8]
        inline void write(const uint8_t* buf, size_t length) {
            callback(this, buf, length);
        }

        inline void write(const char* s) {
            write((const uint8_t*)s, strlen(s));
 80a0148:	4620      	mov	r0, r4
 80a014a:	f001 f876 	bl	80a123a <strlen>

        callback_t callback;
        void* state;

        inline void write(const uint8_t* buf, size_t length) {
            callback(this, buf, length);
 80a014e:	f8d8 3000 	ldr.w	r3, [r8]
        }

        inline void write(const char* s) {
            write((const uint8_t*)s, strlen(s));
 80a0152:	4602      	mov	r2, r0

        callback_t callback;
        void* state;

        inline void write(const uint8_t* buf, size_t length) {
            callback(this, buf, length);
 80a0154:	4621      	mov	r1, r4
 80a0156:	4640      	mov	r0, r8
 80a0158:	4798      	blx	r3
        }
}
 80a015a:	b004      	add	sp, #16
 80a015c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0160:	080a2c5b 	.word	0x080a2c5b
 80a0164:	080a2c6c 	.word	0x080a2c6c
 80a0168:	080a2c73 	.word	0x080a2c73
 80a016c:	080a2c84 	.word	0x080a2c84
 80a0170:	080a2c9c 	.word	0x080a2c9c
 80a0174:	20000304 	.word	0x20000304

080a0178 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0178:	2000      	movs	r0, #0
 80a017a:	4601      	mov	r1, r0
 80a017c:	4602      	mov	r2, r0
 80a017e:	f000 b999 	b.w	80a04b4 <network_ready>
	...

080a0184 <setup>:

STARTUP(softap_set_application_page_handler(myPage, nullptr));

void setup()
{
 80a0184:	b538      	push	{r3, r4, r5, lr}
        Serial.begin(9600);
 80a0186:	f000 fde3 	bl	80a0d50 <_Z16_fetch_usbserialv>
 80a018a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a018e:	f000 fdc5 	bl	80a0d1c <_ZN9USBSerial5beginEl>
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0192:	2000      	movs	r0, #0
 80a0194:	4603      	mov	r3, r0
 80a0196:	4601      	mov	r1, r0
 80a0198:	4602      	mov	r2, r0
 80a019a:	f000 f993 	bl	80a04c4 <network_on>

        /*WiFi.on();
           WiFi.clearCredentials();*/

        WiFi.on();
        foundNetworks = WiFi.getCredentials(ap, 5);
 80a019e:	4918      	ldr	r1, [pc, #96]	; (80a0200 <setup+0x7c>)
 80a01a0:	2205      	movs	r2, #5
 80a01a2:	4818      	ldr	r0, [pc, #96]	; (80a0204 <setup+0x80>)
 80a01a4:	f000 fe4e 	bl	80a0e44 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
 80a01a8:	4c17      	ldr	r4, [pc, #92]	; (80a0208 <setup+0x84>)
 80a01aa:	6020      	str	r0, [r4, #0]
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a01ac:	2000      	movs	r0, #0
 80a01ae:	4603      	mov	r3, r0
 80a01b0:	4601      	mov	r1, r0
 80a01b2:	4602      	mov	r2, r0
 80a01b4:	f000 f96e 	bl	80a0494 <network_connect>
        WiFi.connect();
        if(!waitFor(WiFi.ready, foundNetworks * wifiTimeOut))
 80a01b8:	4b14      	ldr	r3, [pc, #80]	; (80a020c <setup+0x88>)
 80a01ba:	6824      	ldr	r4, [r4, #0]
 80a01bc:	681b      	ldr	r3, [r3, #0]
 80a01be:	435c      	muls	r4, r3
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01c0:	f000 f8a0 	bl	80a0304 <HAL_Timer_Get_Milli_Seconds>
 80a01c4:	4605      	mov	r5, r0
 80a01c6:	f000 f89d 	bl	80a0304 <HAL_Timer_Get_Milli_Seconds>
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a01ca:	1b40      	subs	r0, r0, r5


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a01cc:	42a0      	cmp	r0, r4
 80a01ce:	d206      	bcs.n	80a01de <setup+0x5a>
 80a01d0:	480c      	ldr	r0, [pc, #48]	; (80a0204 <setup+0x80>)
 80a01d2:	f7ff ffd1 	bl	80a0178 <_ZN5spark9WiFiClass5readyEv>
 80a01d6:	b910      	cbnz	r0, 80a01de <setup+0x5a>
            spark_process();
 80a01d8:	f000 f954 	bl	80a0484 <spark_process>
 80a01dc:	e7f3      	b.n	80a01c6 <setup+0x42>
 80a01de:	4809      	ldr	r0, [pc, #36]	; (80a0204 <setup+0x80>)
 80a01e0:	f7ff ffca 	bl	80a0178 <_ZN5spark9WiFiClass5readyEv>
 80a01e4:	4604      	mov	r4, r0
 80a01e6:	b950      	cbnz	r0, 80a01fe <setup+0x7a>
    }

    void disconnect(void) {
        network_disconnect(*this, 0, NULL);
 80a01e8:	4621      	mov	r1, r4
 80a01ea:	4622      	mov	r2, r4
 80a01ec:	f000 f95a 	bl	80a04a4 <network_disconnect>
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a01f0:	4620      	mov	r0, r4
 80a01f2:	4621      	mov	r1, r4
 80a01f4:	4622      	mov	r2, r4
        else {
                // either procede with your app code while in listening mode
                // or wait forever
                // waitUntil(WiFi.ready);
        }
}
 80a01f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a01fa:	f000 b96b 	b.w	80a04d4 <network_listen>
 80a01fe:	bd38      	pop	{r3, r4, r5, pc}
 80a0200:	20000388 	.word	0x20000388
 80a0204:	20000974 	.word	0x20000974
 80a0208:	20000384 	.word	0x20000384
 80a020c:	20000300 	.word	0x20000300

080a0210 <loop>:


void loop()
{
 80a0210:	b538      	push	{r3, r4, r5, lr}
        if (!WiFi.ready()) // If WiFi connection is interrupted...
 80a0212:	4817      	ldr	r0, [pc, #92]	; (80a0270 <loop+0x60>)
 80a0214:	f7ff ffb0 	bl	80a0178 <_ZN5spark9WiFiClass5readyEv>
 80a0218:	4601      	mov	r1, r0
 80a021a:	bb38      	cbnz	r0, 80a026c <loop+0x5c>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a021c:	4603      	mov	r3, r0
 80a021e:	4602      	mov	r2, r0
 80a0220:	f000 f938 	bl	80a0494 <network_connect>
        {
                WiFi.connect(); // Attempt to reconnect
                if(!waitFor(WiFi.ready, foundNetworks * wifiTimeOut)) // If the connection times out...
 80a0224:	4b13      	ldr	r3, [pc, #76]	; (80a0274 <loop+0x64>)
 80a0226:	681c      	ldr	r4, [r3, #0]
 80a0228:	4b13      	ldr	r3, [pc, #76]	; (80a0278 <loop+0x68>)
 80a022a:	681b      	ldr	r3, [r3, #0]
 80a022c:	435c      	muls	r4, r3
 80a022e:	f000 f869 	bl	80a0304 <HAL_Timer_Get_Milli_Seconds>
 80a0232:	4605      	mov	r5, r0
 80a0234:	f000 f866 	bl	80a0304 <HAL_Timer_Get_Milli_Seconds>
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a0238:	1b40      	subs	r0, r0, r5


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a023a:	42a0      	cmp	r0, r4
 80a023c:	d206      	bcs.n	80a024c <loop+0x3c>
 80a023e:	480c      	ldr	r0, [pc, #48]	; (80a0270 <loop+0x60>)
 80a0240:	f7ff ff9a 	bl	80a0178 <_ZN5spark9WiFiClass5readyEv>
 80a0244:	b910      	cbnz	r0, 80a024c <loop+0x3c>
            spark_process();
 80a0246:	f000 f91d 	bl	80a0484 <spark_process>
 80a024a:	e7f3      	b.n	80a0234 <loop+0x24>
 80a024c:	4808      	ldr	r0, [pc, #32]	; (80a0270 <loop+0x60>)
 80a024e:	f7ff ff93 	bl	80a0178 <_ZN5spark9WiFiClass5readyEv>
 80a0252:	4604      	mov	r4, r0
 80a0254:	b950      	cbnz	r0, 80a026c <loop+0x5c>
    }

    void disconnect(void) {
        network_disconnect(*this, 0, NULL);
 80a0256:	4621      	mov	r1, r4
 80a0258:	4622      	mov	r2, r4
 80a025a:	f000 f923 	bl	80a04a4 <network_disconnect>
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a025e:	4620      	mov	r0, r4
 80a0260:	4621      	mov	r1, r4
 80a0262:	4622      	mov	r2, r4
                {
                        WiFi.disconnect();
                        WiFi.listen(); // Go into SoftAP setup mode
                }
        }
}
 80a0264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0268:	f000 b934 	b.w	80a04d4 <network_listen>
 80a026c:	bd38      	pop	{r3, r4, r5, pc}
 80a026e:	bf00      	nop
 80a0270:	20000974 	.word	0x20000974
 80a0274:	20000384 	.word	0x20000384
 80a0278:	20000300 	.word	0x20000300

080a027c <_GLOBAL__sub_I_SystemMode>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a027c:	4b15      	ldr	r3, [pc, #84]	; (80a02d4 <_GLOBAL__sub_I_SystemMode+0x58>)
 80a027e:	b570      	push	{r4, r5, r6, lr}
 80a0280:	2400      	movs	r4, #0
 80a0282:	701c      	strb	r4, [r3, #0]
 80a0284:	4b14      	ldr	r3, [pc, #80]	; (80a02d8 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0286:	2501      	movs	r5, #1
 80a0288:	701d      	strb	r5, [r3, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a028a:	4b14      	ldr	r3, [pc, #80]	; (80a02dc <_GLOBAL__sub_I_SystemMode+0x60>)
 80a028c:	2202      	movs	r2, #2
 80a028e:	701c      	strb	r4, [r3, #0]
 80a0290:	4b13      	ldr	r3, [pc, #76]	; (80a02e0 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a0292:	701d      	strb	r5, [r3, #0]
 80a0294:	4b13      	ldr	r3, [pc, #76]	; (80a02e4 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a0296:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0298:	f000 f83c 	bl	80a0314 <HAL_Pin_Map>
 80a029c:	4b12      	ldr	r3, [pc, #72]	; (80a02e8 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a029e:	6018      	str	r0, [r3, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a02a0:	2003      	movs	r0, #3
 80a02a2:	f000 f8d7 	bl	80a0454 <set_system_mode>
#include "Particle.h"
#include "softap_http.h"

SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 80a02a6:	4628      	mov	r0, r5
 80a02a8:	4621      	mov	r1, r4
 80a02aa:	f000 f8e3 	bl	80a0474 <system_thread_set_state>
 80a02ae:	4d0f      	ldr	r5, [pc, #60]	; (80a02ec <_GLOBAL__sub_I_SystemMode+0x70>)

#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
 80a02b0:	2638      	movs	r6, #56	; 0x38
 80a02b2:	1928      	adds	r0, r5, r4
 80a02b4:	2100      	movs	r1, #0
 80a02b6:	4632      	mov	r2, r6
 80a02b8:	f000 ffad 	bl	80a1216 <memset>
       size = sizeof(*this);
 80a02bc:	5166      	str	r6, [r4, r5]
 80a02be:	4434      	add	r4, r6

WiFiAccessPoint ap[5];
 80a02c0:	f5b4 7f8c 	cmp.w	r4, #280	; 0x118
 80a02c4:	d1f3      	bne.n	80a02ae <_GLOBAL__sub_I_SystemMode+0x32>
                {
                        WiFi.disconnect();
                        WiFi.listen(); // Go into SoftAP setup mode
                }
        }
}
 80a02c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                cb(cbArg, 0, 200, myPages[idx].mime_type, nullptr);
                result->write(myPages[idx].data);
        }
}

STARTUP(softap_set_application_page_handler(myPage, nullptr));
 80a02ca:	4809      	ldr	r0, [pc, #36]	; (80a02f0 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a02cc:	2100      	movs	r1, #0
 80a02ce:	f000 b8b9 	b.w	80a0444 <softap_set_application_page_handler>
 80a02d2:	bf00      	nop
 80a02d4:	20000381 	.word	0x20000381
 80a02d8:	20000380 	.word	0x20000380
 80a02dc:	20000378 	.word	0x20000378
 80a02e0:	2000037a 	.word	0x2000037a
 80a02e4:	20000379 	.word	0x20000379
 80a02e8:	2000037c 	.word	0x2000037c
 80a02ec:	20000388 	.word	0x20000388
 80a02f0:	080a00b1 	.word	0x080a00b1

080a02f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <HAL_RNG_GetRandomNumber+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	685b      	ldr	r3, [r3, #4]
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	0806019c 	.word	0x0806019c

080a0304 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	695b      	ldr	r3, [r3, #20]
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	0806019c 	.word	0x0806019c

080a0314 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <HAL_Pin_Map+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	681b      	ldr	r3, [r3, #0]
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601b0 	.word	0x080601b0

080a0324 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <HAL_SPI_Init+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	69db      	ldr	r3, [r3, #28]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601b4 	.word	0x080601b4

080a0334 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b02      	ldr	r3, [pc, #8]	; (80a0340 <HAL_USART_Init+0xc>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	699b      	ldr	r3, [r3, #24]
 80a033c:	9301      	str	r3, [sp, #4]
 80a033e:	bd08      	pop	{r3, pc}
 80a0340:	080601c4 	.word	0x080601c4

080a0344 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0344:	b508      	push	{r3, lr}
 80a0346:	4b02      	ldr	r3, [pc, #8]	; (80a0350 <HAL_USART_Write_Data+0xc>)
 80a0348:	681b      	ldr	r3, [r3, #0]
 80a034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a034c:	9301      	str	r3, [sp, #4]
 80a034e:	bd08      	pop	{r3, pc}
 80a0350:	080601c4 	.word	0x080601c4

080a0354 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <HAL_USART_Available_Data+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	080601c4 	.word	0x080601c4

080a0364 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <HAL_USART_Read_Data+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	080601c4 	.word	0x080601c4

080a0374 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <HAL_USART_Peek_Data+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	080601c4 	.word	0x080601c4

080a0384 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_USART_Flush_Data+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601c4 	.word	0x080601c4

080a0394 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601c4 	.word	0x080601c4

080a03a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_USB_USART_Init+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	681b      	ldr	r3, [r3, #0]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601d8 	.word	0x080601d8

080a03b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_USB_USART_Begin+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	685b      	ldr	r3, [r3, #4]
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601d8 	.word	0x080601d8

080a03c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <HAL_USB_USART_Available_Data+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	691b      	ldr	r3, [r3, #16]
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601d8 	.word	0x080601d8

080a03d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	695b      	ldr	r3, [r3, #20]
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601d8 	.word	0x080601d8

080a03e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_USB_USART_Receive_Data+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	699b      	ldr	r3, [r3, #24]
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601d8 	.word	0x080601d8

080a03f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_USB_USART_Send_Data+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	69db      	ldr	r3, [r3, #28]
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601d8 	.word	0x080601d8

080a0404 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_USB_USART_Flush_Data+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	6a1b      	ldr	r3, [r3, #32]
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601d8 	.word	0x080601d8

080a0414 <HAL_USB_HID_Init>:
#else
#define BASE_IDX 0
#endif

#ifdef USB_HID_ENABLE
DYNALIB_FN(BASE_IDX + 0, hal_usb, HAL_USB_HID_Init, void(uint8_t, void*))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_USB_HID_Init+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601d8 	.word	0x080601d8

080a0424 <HAL_USB_HID_Send_Report>:
DYNALIB_FN(BASE_IDX + 1, hal_usb, HAL_USB_HID_Begin, void(uint8_t, void*))
DYNALIB_FN(BASE_IDX + 2, hal_usb, HAL_USB_HID_Send_Report, void(uint8_t, void*, uint16_t, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_USB_HID_Send_Report+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601d8 	.word	0x080601d8

080a0434 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <wlan_get_credentials+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601c0 	.word	0x080601c0

080a0444 <softap_set_application_page_handler>:
DYNALIB_FN(25, hal_wlan,softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <softap_set_application_page_handler+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601c0 	.word	0x080601c0

080a0454 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <set_system_mode+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	685b      	ldr	r3, [r3, #4]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601a4 	.word	0x080601a4

080a0464 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <system_delay_ms+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	695b      	ldr	r3, [r3, #20]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601a4 	.word	0x080601a4

080a0474 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <system_thread_set_state+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601a4 	.word	0x080601a4

080a0484 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <spark_process+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	689b      	ldr	r3, [r3, #8]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601cc 	.word	0x080601cc

080a0494 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <network_connect+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	685b      	ldr	r3, [r3, #4]
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601c8 	.word	0x080601c8

080a04a4 <network_disconnect>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <network_disconnect+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	68db      	ldr	r3, [r3, #12]
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601c8 	.word	0x080601c8

080a04b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <network_ready+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	691b      	ldr	r3, [r3, #16]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601c8 	.word	0x080601c8

080a04c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <network_on+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	695b      	ldr	r3, [r3, #20]
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601c8 	.word	0x080601c8

080a04d4 <network_listen>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <network_listen+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	69db      	ldr	r3, [r3, #28]
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601c8 	.word	0x080601c8

080a04e4 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <free+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	685b      	ldr	r3, [r3, #4]
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601a0 	.word	0x080601a0

080a04f4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <vsnprintf+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601a0 	.word	0x080601a0

080a0504 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0504:	2100      	movs	r1, #0
 80a0506:	f7ff bfad 	b.w	80a0464 <system_delay_ms>
	...

080a050c <_GLOBAL__sub_I_setADCSampleTime>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a050c:	4b06      	ldr	r3, [pc, #24]	; (80a0528 <_GLOBAL__sub_I_setADCSampleTime+0x1c>)
 80a050e:	2200      	movs	r2, #0
 80a0510:	4906      	ldr	r1, [pc, #24]	; (80a052c <_GLOBAL__sub_I_setADCSampleTime+0x20>)
 80a0512:	701a      	strb	r2, [r3, #0]
 80a0514:	2301      	movs	r3, #1
 80a0516:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a0518:	4905      	ldr	r1, [pc, #20]	; (80a0530 <_GLOBAL__sub_I_setADCSampleTime+0x24>)
 80a051a:	700a      	strb	r2, [r1, #0]
 80a051c:	4a05      	ldr	r2, [pc, #20]	; (80a0534 <_GLOBAL__sub_I_setADCSampleTime+0x28>)
 80a051e:	7013      	strb	r3, [r2, #0]
 80a0520:	4b05      	ldr	r3, [pc, #20]	; (80a0538 <_GLOBAL__sub_I_setADCSampleTime+0x2c>)
 80a0522:	2202      	movs	r2, #2
 80a0524:	701a      	strb	r2, [r3, #0]
 80a0526:	4770      	bx	lr
 80a0528:	200004a3 	.word	0x200004a3
 80a052c:	200004a4 	.word	0x200004a4
 80a0530:	200004a1 	.word	0x200004a1
 80a0534:	200004a2 	.word	0x200004a2
 80a0538:	200004a0 	.word	0x200004a0

080a053c <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt>:
 80a053c:	4b06      	ldr	r3, [pc, #24]	; (80a0558 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x1c>)
 80a053e:	2200      	movs	r2, #0
 80a0540:	4906      	ldr	r1, [pc, #24]	; (80a055c <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x20>)
 80a0542:	701a      	strb	r2, [r3, #0]
 80a0544:	2301      	movs	r3, #1
 80a0546:	700b      	strb	r3, [r1, #0]
 80a0548:	4905      	ldr	r1, [pc, #20]	; (80a0560 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x24>)
 80a054a:	700a      	strb	r2, [r1, #0]
 80a054c:	4a05      	ldr	r2, [pc, #20]	; (80a0564 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x28>)
 80a054e:	7013      	strb	r3, [r2, #0]
 80a0550:	4b05      	ldr	r3, [pc, #20]	; (80a0568 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x2c>)
 80a0552:	2202      	movs	r2, #2
 80a0554:	701a      	strb	r2, [r3, #0]
 80a0556:	4770      	bx	lr
 80a0558:	200004a8 	.word	0x200004a8
 80a055c:	200004a9 	.word	0x200004a9
 80a0560:	200004a6 	.word	0x200004a6
 80a0564:	200004a7 	.word	0x200004a7
 80a0568:	200004a5 	.word	0x200004a5

080a056c <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
 80a056c:	4b06      	ldr	r3, [pc, #24]	; (80a0588 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x1c>)
 80a056e:	2200      	movs	r2, #0
 80a0570:	4906      	ldr	r1, [pc, #24]	; (80a058c <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x20>)
 80a0572:	701a      	strb	r2, [r3, #0]
 80a0574:	2301      	movs	r3, #1
 80a0576:	700b      	strb	r3, [r1, #0]
 80a0578:	4905      	ldr	r1, [pc, #20]	; (80a0590 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x24>)
 80a057a:	700a      	strb	r2, [r1, #0]
 80a057c:	4a05      	ldr	r2, [pc, #20]	; (80a0594 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x28>)
 80a057e:	7013      	strb	r3, [r2, #0]
 80a0580:	4b05      	ldr	r3, [pc, #20]	; (80a0598 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x2c>)
 80a0582:	2202      	movs	r2, #2
 80a0584:	701a      	strb	r2, [r3, #0]
 80a0586:	4770      	bx	lr
 80a0588:	200004ad 	.word	0x200004ad
 80a058c:	200004ae 	.word	0x200004ae
 80a0590:	200004ab 	.word	0x200004ab
 80a0594:	200004ac 	.word	0x200004ac
 80a0598:	200004aa 	.word	0x200004aa

080a059c <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev>:
 80a059c:	4b06      	ldr	r3, [pc, #24]	; (80a05b8 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x1c>)
 80a059e:	2200      	movs	r2, #0
 80a05a0:	4906      	ldr	r1, [pc, #24]	; (80a05bc <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x20>)
 80a05a2:	701a      	strb	r2, [r3, #0]
 80a05a4:	2301      	movs	r3, #1
 80a05a6:	700b      	strb	r3, [r1, #0]
 80a05a8:	4905      	ldr	r1, [pc, #20]	; (80a05c0 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x24>)
 80a05aa:	700a      	strb	r2, [r1, #0]
 80a05ac:	4a05      	ldr	r2, [pc, #20]	; (80a05c4 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x28>)
 80a05ae:	7013      	strb	r3, [r2, #0]
 80a05b0:	4b05      	ldr	r3, [pc, #20]	; (80a05c8 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x2c>)
 80a05b2:	2202      	movs	r2, #2
 80a05b4:	701a      	strb	r2, [r3, #0]
 80a05b6:	4770      	bx	lr
 80a05b8:	200004b2 	.word	0x200004b2
 80a05bc:	200004b3 	.word	0x200004b3
 80a05c0:	200004b0 	.word	0x200004b0
 80a05c4:	200004b1 	.word	0x200004b1
 80a05c8:	200004af 	.word	0x200004af

080a05cc <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE>:
 80a05cc:	4b06      	ldr	r3, [pc, #24]	; (80a05e8 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x1c>)
 80a05ce:	2200      	movs	r2, #0
 80a05d0:	4906      	ldr	r1, [pc, #24]	; (80a05ec <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x20>)
 80a05d2:	701a      	strb	r2, [r3, #0]
 80a05d4:	2301      	movs	r3, #1
 80a05d6:	700b      	strb	r3, [r1, #0]
 80a05d8:	4905      	ldr	r1, [pc, #20]	; (80a05f0 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x24>)
 80a05da:	700a      	strb	r2, [r1, #0]
 80a05dc:	4a05      	ldr	r2, [pc, #20]	; (80a05f4 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x28>)
 80a05de:	7013      	strb	r3, [r2, #0]
 80a05e0:	4b05      	ldr	r3, [pc, #20]	; (80a05f8 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x2c>)
 80a05e2:	2202      	movs	r2, #2
 80a05e4:	701a      	strb	r2, [r3, #0]
 80a05e6:	4770      	bx	lr
 80a05e8:	200004b7 	.word	0x200004b7
 80a05ec:	200004b8 	.word	0x200004b8
 80a05f0:	200004b5 	.word	0x200004b5
 80a05f4:	200004b6 	.word	0x200004b6
 80a05f8:	200004b4 	.word	0x200004b4

080a05fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a05fc:	4770      	bx	lr

080a05fe <_ZN9IPAddressD0Ev>:
 80a05fe:	b510      	push	{r4, lr}
 80a0600:	4604      	mov	r4, r0
 80a0602:	f7ff fd4a 	bl	80a009a <_ZdlPv>
 80a0606:	4620      	mov	r0, r4
 80a0608:	bd10      	pop	{r4, pc}

080a060a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a060a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a060c:	460f      	mov	r7, r1
 80a060e:	f100 0608 	add.w	r6, r0, #8
 80a0612:	1d05      	adds	r5, r0, #4
 80a0614:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a061a:	4638      	mov	r0, r7
 80a061c:	220a      	movs	r2, #10
 80a061e:	f000 f8b4 	bl	80a078a <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0622:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0624:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0626:	d007      	beq.n	80a0638 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0628:	2c00      	cmp	r4, #0
 80a062a:	d0f4      	beq.n	80a0616 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a062c:	4638      	mov	r0, r7
 80a062e:	212e      	movs	r1, #46	; 0x2e
 80a0630:	f000 f866 	bl	80a0700 <_ZN5Print5printEc>
 80a0634:	4404      	add	r4, r0
 80a0636:	e7ee      	b.n	80a0616 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0638:	4620      	mov	r0, r4
 80a063a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a063c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a063c:	b510      	push	{r4, lr}
 80a063e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0642:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0646:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a064a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a064e:	2304      	movs	r3, #4
 80a0650:	6041      	str	r1, [r0, #4]
 80a0652:	7503      	strb	r3, [r0, #20]
 80a0654:	bd10      	pop	{r4, pc}
	...

080a0658 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a065a:	4604      	mov	r4, r0
 80a065c:	4d04      	ldr	r5, [pc, #16]	; (80a0670 <_ZN9IPAddressC1Ehhhh+0x18>)
 80a065e:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0660:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0664:	9500      	str	r5, [sp, #0]
 80a0666:	f7ff ffe9 	bl	80a063c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a066a:	4620      	mov	r0, r4
 80a066c:	b003      	add	sp, #12
 80a066e:	bd30      	pop	{r4, r5, pc}
 80a0670:	080a6718 	.word	0x080a6718

080a0674 <_GLOBAL__sub_I__ZN5spark3LogE>:
    write(str, strlen(str));
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0674:	4a01      	ldr	r2, [pc, #4]	; (80a067c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0678:	601a      	str	r2, [r3, #0]
 80a067a:	4770      	bx	lr
 80a067c:	080a6754 	.word	0x080a6754
 80a0680:	200004bc 	.word	0x200004bc

080a0684 <_GLOBAL__sub_I__ZN4PMICC2Ev>:
 80a0684:	4b06      	ldr	r3, [pc, #24]	; (80a06a0 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x1c>)
 80a0686:	2200      	movs	r2, #0
 80a0688:	4906      	ldr	r1, [pc, #24]	; (80a06a4 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x20>)
 80a068a:	701a      	strb	r2, [r3, #0]
 80a068c:	2301      	movs	r3, #1
 80a068e:	700b      	strb	r3, [r1, #0]
 80a0690:	4905      	ldr	r1, [pc, #20]	; (80a06a8 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x24>)
 80a0692:	700a      	strb	r2, [r1, #0]
 80a0694:	4a05      	ldr	r2, [pc, #20]	; (80a06ac <_GLOBAL__sub_I__ZN4PMICC2Ev+0x28>)
 80a0696:	7013      	strb	r3, [r2, #0]
 80a0698:	4b05      	ldr	r3, [pc, #20]	; (80a06b0 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x2c>)
 80a069a:	2202      	movs	r2, #2
 80a069c:	701a      	strb	r2, [r3, #0]
 80a069e:	4770      	bx	lr
 80a06a0:	200004c3 	.word	0x200004c3
 80a06a4:	200004c4 	.word	0x200004c4
 80a06a8:	200004c1 	.word	0x200004c1
 80a06ac:	200004c2 	.word	0x200004c2
 80a06b0:	200004c0 	.word	0x200004c0

080a06b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a06b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06b6:	4606      	mov	r6, r0
 80a06b8:	460d      	mov	r5, r1
 80a06ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a06bc:	2400      	movs	r4, #0
  while (size--) {
 80a06be:	42bd      	cmp	r5, r7
 80a06c0:	d00c      	beq.n	80a06dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a06c2:	6833      	ldr	r3, [r6, #0]
 80a06c4:	4630      	mov	r0, r6
 80a06c6:	689b      	ldr	r3, [r3, #8]
 80a06c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a06cc:	4798      	blx	r3
     if (chunk>=0)
 80a06ce:	2800      	cmp	r0, #0
 80a06d0:	db01      	blt.n	80a06d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a06d2:	4404      	add	r4, r0
 80a06d4:	e7f3      	b.n	80a06be <_ZN5Print5writeEPKhj+0xa>
/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     int chunk = write(*buffer++);
 80a06d6:	2c00      	cmp	r4, #0
 80a06d8:	bf08      	it	eq
 80a06da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a06dc:	4620      	mov	r0, r4
 80a06de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a06e0:	b570      	push	{r4, r5, r6, lr}
 80a06e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a06e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a06e6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a06e8:	b149      	cbz	r1, 80a06fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a06ea:	f000 fda6 	bl	80a123a <strlen>
 80a06ee:	682b      	ldr	r3, [r5, #0]
 80a06f0:	4602      	mov	r2, r0
 80a06f2:	4621      	mov	r1, r4
 80a06f4:	4628      	mov	r0, r5
    }
 80a06f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a06fa:	68db      	ldr	r3, [r3, #12]
 80a06fc:	4718      	bx	r3
    }
 80a06fe:	bd70      	pop	{r4, r5, r6, pc}

080a0700 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0700:	6803      	ldr	r3, [r0, #0]
 80a0702:	689b      	ldr	r3, [r3, #8]
 80a0704:	4718      	bx	r3

080a0706 <_ZN5Print7printlnEv>:
 {
   return x.printTo(*this);
 }

size_t Print::println(void)
{
 80a0706:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0708:	210d      	movs	r1, #13
 {
   return x.printTo(*this);
 }

size_t Print::println(void)
{
 80a070a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a070c:	f7ff fff8 	bl	80a0700 <_ZN5Print5printEc>
  n += print('\n');
 80a0710:	210a      	movs	r1, #10
   return x.printTo(*this);
 }

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0712:	4604      	mov	r4, r0
  n += print('\n');
 80a0714:	4628      	mov	r0, r5
 80a0716:	f7ff fff3 	bl	80a0700 <_ZN5Print5printEc>
  return n;
}
 80a071a:	4420      	add	r0, r4
 80a071c:	bd38      	pop	{r3, r4, r5, pc}

080a071e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a071e:	b538      	push	{r3, r4, r5, lr}
 80a0720:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0722:	f7ff ffdd 	bl	80a06e0 <_ZN5Print5writeEPKc>
 80a0726:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0728:	4628      	mov	r0, r5
 80a072a:	f7ff ffec 	bl	80a0706 <_ZN5Print7printlnEv>
  return n;
}
 80a072e:	4420      	add	r0, r4
 80a0730:	bd38      	pop	{r3, r4, r5, pc}

080a0732 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0732:	2a01      	cmp	r2, #1
 80a0734:	bf98      	it	ls
 80a0736:	220a      	movls	r2, #10
   return n;
 }

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0738:	b530      	push	{r4, r5, lr}
 80a073a:	460b      	mov	r3, r1
 80a073c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a073e:	2100      	movs	r1, #0
 80a0740:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0744:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0748:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a074c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0750:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0752:	2b09      	cmp	r3, #9
 80a0754:	bf94      	ite	ls
 80a0756:	3330      	addls	r3, #48	; 0x30
 80a0758:	3337      	addhi	r3, #55	; 0x37
 80a075a:	b2db      	uxtb	r3, r3
 80a075c:	4621      	mov	r1, r4
 80a075e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0762:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0764:	2d00      	cmp	r5, #0
 80a0766:	d1ef      	bne.n	80a0748 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0768:	f7ff ffba 	bl	80a06e0 <_ZN5Print5writeEPKc>
}
 80a076c:	b00b      	add	sp, #44	; 0x2c
 80a076e:	bd30      	pop	{r4, r5, pc}

080a0770 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0770:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
 80a0772:	b92a      	cbnz	r2, 80a0780 <_ZN5Print5printEmi+0x10>
  else return printNumber(n, base);
}
 80a0774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0778:	6803      	ldr	r3, [r0, #0]
 80a077a:	b2c9      	uxtb	r1, r1
 80a077c:	689b      	ldr	r3, [r3, #8]
 80a077e:	4718      	bx	r3
  else return printNumber(n, base);
 80a0780:	b2d2      	uxtb	r2, r2
}
 80a0782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0786:	f7ff bfd4 	b.w	80a0732 <_ZN5Print11printNumberEmh>

080a078a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a078a:	f7ff bff1 	b.w	80a0770 <_ZN5Print5printEmi>

080a078e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a078e:	b40c      	push	{r2, r3}
 80a0790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0794:	b087      	sub	sp, #28
 80a0796:	af00      	add	r7, sp, #0
 80a0798:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a079c:	f854 9b04 	ldr.w	r9, [r4], #4
 80a07a0:	4605      	mov	r5, r0
 80a07a2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a07a4:	1d38      	adds	r0, r7, #4
 80a07a6:	2114      	movs	r1, #20
 80a07a8:	464a      	mov	r2, r9
 80a07aa:	4623      	mov	r3, r4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a07ac:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a07ae:	f7ff fea1 	bl	80a04f4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a07b2:	2813      	cmp	r0, #19
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a07b4:	4601      	mov	r1, r0
    va_end(marker);

    if (n<bufsize)
 80a07b6:	d805      	bhi.n	80a07c4 <_ZN5Print11printf_implEbPKcz+0x36>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07b8:	4628      	mov	r0, r5
 80a07ba:	1d39      	adds	r1, r7, #4
 80a07bc:	f7ff ff90 	bl	80a06e0 <_ZN5Print5writeEPKc>
 80a07c0:	4604      	mov	r4, r0
 80a07c2:	e013      	b.n	80a07ec <_ZN5Print11printf_implEbPKcz+0x5e>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a07c4:	f100 0308 	add.w	r3, r0, #8
 80a07c8:	f023 0307 	bic.w	r3, r3, #7
 80a07cc:	46e8      	mov	r8, sp
 80a07ce:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a07d2:	4668      	mov	r0, sp
 80a07d4:	4623      	mov	r3, r4
 80a07d6:	3101      	adds	r1, #1
 80a07d8:	464a      	mov	r2, r9
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a07da:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a07dc:	f7ff fe8a 	bl	80a04f4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07e0:	4669      	mov	r1, sp
 80a07e2:	4628      	mov	r0, r5
 80a07e4:	f7ff ff7c 	bl	80a06e0 <_ZN5Print5writeEPKc>
 80a07e8:	4604      	mov	r4, r0
 80a07ea:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a07ec:	b11e      	cbz	r6, 80a07f6 <_ZN5Print11printf_implEbPKcz+0x68>
        n += println();
 80a07ee:	4628      	mov	r0, r5
 80a07f0:	f7ff ff89 	bl	80a0706 <_ZN5Print7printlnEv>
 80a07f4:	4404      	add	r4, r0
    return n;
}
 80a07f6:	4620      	mov	r0, r4
 80a07f8:	371c      	adds	r7, #28
 80a07fa:	46bd      	mov	sp, r7
 80a07fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0800:	b002      	add	sp, #8
 80a0802:	4770      	bx	lr

080a0804 <_GLOBAL__sub_I__ZN5ServoC2Ev>:
 80a0804:	4b06      	ldr	r3, [pc, #24]	; (80a0820 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x1c>)
 80a0806:	2200      	movs	r2, #0
 80a0808:	4906      	ldr	r1, [pc, #24]	; (80a0824 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x20>)
 80a080a:	701a      	strb	r2, [r3, #0]
 80a080c:	2301      	movs	r3, #1
 80a080e:	700b      	strb	r3, [r1, #0]
 80a0810:	4905      	ldr	r1, [pc, #20]	; (80a0828 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x24>)
 80a0812:	700a      	strb	r2, [r1, #0]
 80a0814:	4a05      	ldr	r2, [pc, #20]	; (80a082c <_GLOBAL__sub_I__ZN5ServoC2Ev+0x28>)
 80a0816:	7013      	strb	r3, [r2, #0]
 80a0818:	4b05      	ldr	r3, [pc, #20]	; (80a0830 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x2c>)
 80a081a:	2202      	movs	r2, #2
 80a081c:	701a      	strb	r2, [r3, #0]
 80a081e:	4770      	bx	lr
 80a0820:	200004c8 	.word	0x200004c8
 80a0824:	200004c9 	.word	0x200004c9
 80a0828:	200004c6 	.word	0x200004c6
 80a082c:	200004c7 	.word	0x200004c7
 80a0830:	200004c5 	.word	0x200004c5

080a0834 <_ZN8SPIClassD1Ev>:
   */
  unsigned dividerReference;

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0834:	4770      	bx	lr

080a0836 <_ZN8SPIClassD0Ev>:
 80a0836:	b510      	push	{r4, lr}
 80a0838:	4604      	mov	r4, r0
 80a083a:	f7ff fc2e 	bl	80a009a <_ZdlPv>
 80a083e:	4620      	mov	r0, r4
 80a0840:	bd10      	pop	{r4, pc}
	...

080a0844 <_ZN8SPIClassC1E17HAL_SPI_Interface>:

#include "spark_wiring_spi.h"
#include "core_hal.h"
#include "spark_macros.h"

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0844:	b510      	push	{r4, lr}
 80a0846:	4604      	mov	r4, r0
 80a0848:	4b04      	ldr	r3, [pc, #16]	; (80a085c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
{
  _spi = spi;
 80a084a:	7101      	strb	r1, [r0, #4]

#include "spark_wiring_spi.h"
#include "core_hal.h"
#include "spark_macros.h"

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a084c:	6003      	str	r3, [r0, #0]
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a084e:	4608      	mov	r0, r1
 80a0850:	f7ff fd68 	bl	80a0324 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0854:	2300      	movs	r3, #0
 80a0856:	60a3      	str	r3, [r4, #8]
}
 80a0858:	4620      	mov	r0, r4
 80a085a:	bd10      	pop	{r4, pc}
 80a085c:	080a6760 	.word	0x080a6760

080a0860 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface>:
 80a0860:	4b06      	ldr	r3, [pc, #24]	; (80a087c <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x1c>)
 80a0862:	2200      	movs	r2, #0
 80a0864:	4906      	ldr	r1, [pc, #24]	; (80a0880 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x20>)
 80a0866:	701a      	strb	r2, [r3, #0]
 80a0868:	2301      	movs	r3, #1
 80a086a:	700b      	strb	r3, [r1, #0]
 80a086c:	4905      	ldr	r1, [pc, #20]	; (80a0884 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x24>)
 80a086e:	700a      	strb	r2, [r1, #0]
 80a0870:	4a05      	ldr	r2, [pc, #20]	; (80a0888 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x28>)
 80a0872:	7013      	strb	r3, [r2, #0]
 80a0874:	4b05      	ldr	r3, [pc, #20]	; (80a088c <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x2c>)
 80a0876:	2202      	movs	r2, #2
 80a0878:	701a      	strb	r2, [r3, #0]
 80a087a:	4770      	bx	lr
 80a087c:	200004cd 	.word	0x200004cd
 80a0880:	200004ce 	.word	0x200004ce
 80a0884:	200004cb 	.word	0x200004cb
 80a0888:	200004cc 	.word	0x200004cc
 80a088c:	200004ca 	.word	0x200004ca

080a0890 <_GLOBAL__sub_I__ZN6Stream9timedReadEv>:
 80a0890:	4b06      	ldr	r3, [pc, #24]	; (80a08ac <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x1c>)
 80a0892:	2200      	movs	r2, #0
 80a0894:	4906      	ldr	r1, [pc, #24]	; (80a08b0 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x20>)
 80a0896:	701a      	strb	r2, [r3, #0]
 80a0898:	2301      	movs	r3, #1
 80a089a:	700b      	strb	r3, [r1, #0]
 80a089c:	4905      	ldr	r1, [pc, #20]	; (80a08b4 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x24>)
 80a089e:	700a      	strb	r2, [r1, #0]
 80a08a0:	4a05      	ldr	r2, [pc, #20]	; (80a08b8 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x28>)
 80a08a2:	7013      	strb	r3, [r2, #0]
 80a08a4:	4b05      	ldr	r3, [pc, #20]	; (80a08bc <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x2c>)
 80a08a6:	2202      	movs	r2, #2
 80a08a8:	701a      	strb	r2, [r3, #0]
 80a08aa:	4770      	bx	lr
 80a08ac:	200004d2 	.word	0x200004d2
 80a08b0:	200004d3 	.word	0x200004d3
 80a08b4:	200004d0 	.word	0x200004d0
 80a08b8:	200004d1 	.word	0x200004d1
 80a08bc:	200004cf 	.word	0x200004cf

080a08c0 <_GLOBAL__sub_I_System>:
 80a08c0:	4b07      	ldr	r3, [pc, #28]	; (80a08e0 <_GLOBAL__sub_I_System+0x20>)
 80a08c2:	2000      	movs	r0, #0
 80a08c4:	4a07      	ldr	r2, [pc, #28]	; (80a08e4 <_GLOBAL__sub_I_System+0x24>)
 80a08c6:	7018      	strb	r0, [r3, #0]
 80a08c8:	2301      	movs	r3, #1
 80a08ca:	7013      	strb	r3, [r2, #0]
 80a08cc:	4a06      	ldr	r2, [pc, #24]	; (80a08e8 <_GLOBAL__sub_I_System+0x28>)
 80a08ce:	7010      	strb	r0, [r2, #0]
 80a08d0:	4a06      	ldr	r2, [pc, #24]	; (80a08ec <_GLOBAL__sub_I_System+0x2c>)
 80a08d2:	7013      	strb	r3, [r2, #0]
 80a08d4:	4b06      	ldr	r3, [pc, #24]	; (80a08f0 <_GLOBAL__sub_I_System+0x30>)
 80a08d6:	2202      	movs	r2, #2
 80a08d8:	701a      	strb	r2, [r3, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a08da:	f7ff bdbb 	b.w	80a0454 <set_system_mode>
 80a08de:	bf00      	nop
 80a08e0:	200004d7 	.word	0x200004d7
 80a08e4:	200004d8 	.word	0x200004d8
 80a08e8:	200004d5 	.word	0x200004d5
 80a08ec:	200004d6 	.word	0x200004d6
 80a08f0:	200004d4 	.word	0x200004d4

080a08f4 <_GLOBAL__sub_I__ZN9TCPServerC2Etm>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a08f4:	4b06      	ldr	r3, [pc, #24]	; (80a0910 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x1c>)
 80a08f6:	2200      	movs	r2, #0
 80a08f8:	4906      	ldr	r1, [pc, #24]	; (80a0914 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x20>)
 80a08fa:	701a      	strb	r2, [r3, #0]
 80a08fc:	2301      	movs	r3, #1
 80a08fe:	700b      	strb	r3, [r1, #0]
 80a0900:	4905      	ldr	r1, [pc, #20]	; (80a0918 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x24>)
 80a0902:	700a      	strb	r2, [r1, #0]
 80a0904:	4a05      	ldr	r2, [pc, #20]	; (80a091c <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x28>)
 80a0906:	7013      	strb	r3, [r2, #0]
 80a0908:	4b05      	ldr	r3, [pc, #20]	; (80a0920 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x2c>)
 80a090a:	2202      	movs	r2, #2
 80a090c:	701a      	strb	r2, [r3, #0]
 80a090e:	4770      	bx	lr
 80a0910:	200004dc 	.word	0x200004dc
 80a0914:	200004dd 	.word	0x200004dd
 80a0918:	200004da 	.word	0x200004da
 80a091c:	200004db 	.word	0x200004db
 80a0920:	200004d9 	.word	0x200004d9

080a0924 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0924:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0926:	681a      	ldr	r2, [r3, #0]
 80a0928:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a092a:	601a      	str	r2, [r3, #0]
 80a092c:	4770      	bx	lr
 80a092e:	bf00      	nop
 80a0930:	20000370 	.word	0x20000370
 80a0934:	200004e0 	.word	0x200004e0

080a0938 <_GLOBAL__sub_I_tone>:
 80a0938:	4b06      	ldr	r3, [pc, #24]	; (80a0954 <_GLOBAL__sub_I_tone+0x1c>)
 80a093a:	2200      	movs	r2, #0
 80a093c:	4906      	ldr	r1, [pc, #24]	; (80a0958 <_GLOBAL__sub_I_tone+0x20>)
 80a093e:	701a      	strb	r2, [r3, #0]
 80a0940:	2301      	movs	r3, #1
 80a0942:	700b      	strb	r3, [r1, #0]
 80a0944:	4905      	ldr	r1, [pc, #20]	; (80a095c <_GLOBAL__sub_I_tone+0x24>)
 80a0946:	700a      	strb	r2, [r1, #0]
 80a0948:	4a05      	ldr	r2, [pc, #20]	; (80a0960 <_GLOBAL__sub_I_tone+0x28>)
 80a094a:	7013      	strb	r3, [r2, #0]
 80a094c:	4b05      	ldr	r3, [pc, #20]	; (80a0964 <_GLOBAL__sub_I_tone+0x2c>)
 80a094e:	2202      	movs	r2, #2
 80a0950:	701a      	strb	r2, [r3, #0]
 80a0952:	4770      	bx	lr
 80a0954:	200004e7 	.word	0x200004e7
 80a0958:	200004e8 	.word	0x200004e8
 80a095c:	200004e5 	.word	0x200004e5
 80a0960:	200004e6 	.word	0x200004e6
 80a0964:	200004e4 	.word	0x200004e4

080a0968 <_GLOBAL__sub_I__ZN3UDPC2Ev>:
 80a0968:	4b06      	ldr	r3, [pc, #24]	; (80a0984 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x1c>)
 80a096a:	2200      	movs	r2, #0
 80a096c:	4906      	ldr	r1, [pc, #24]	; (80a0988 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x20>)
 80a096e:	701a      	strb	r2, [r3, #0]
 80a0970:	2301      	movs	r3, #1
 80a0972:	700b      	strb	r3, [r1, #0]
 80a0974:	4905      	ldr	r1, [pc, #20]	; (80a098c <_GLOBAL__sub_I__ZN3UDPC2Ev+0x24>)
 80a0976:	700a      	strb	r2, [r1, #0]
 80a0978:	4a05      	ldr	r2, [pc, #20]	; (80a0990 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x28>)
 80a097a:	7013      	strb	r3, [r2, #0]
 80a097c:	4b05      	ldr	r3, [pc, #20]	; (80a0994 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x2c>)
 80a097e:	2202      	movs	r2, #2
 80a0980:	701a      	strb	r2, [r3, #0]
 80a0982:	4770      	bx	lr
 80a0984:	200004ec 	.word	0x200004ec
 80a0988:	200004ed 	.word	0x200004ed
 80a098c:	200004ea 	.word	0x200004ea
 80a0990:	200004eb 	.word	0x200004eb
 80a0994:	200004e9 	.word	0x200004e9

080a0998 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0998:	4770      	bx	lr

080a099a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a099a:	7441      	strb	r1, [r0, #17]
 80a099c:	4770      	bx	lr

080a099e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a099e:	7c00      	ldrb	r0, [r0, #16]
 80a09a0:	f7ff bcf8 	b.w	80a0394 <HAL_USART_Available_Data_For_Write>

080a09a4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a09a4:	7c00      	ldrb	r0, [r0, #16]
 80a09a6:	f7ff bcd5 	b.w	80a0354 <HAL_USART_Available_Data>

080a09aa <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a09aa:	7c00      	ldrb	r0, [r0, #16]
 80a09ac:	f7ff bce2 	b.w	80a0374 <HAL_USART_Peek_Data>

080a09b0 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a09b0:	7c00      	ldrb	r0, [r0, #16]
 80a09b2:	f7ff bcd7 	b.w	80a0364 <HAL_USART_Read_Data>

080a09b6 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a09b6:	7c00      	ldrb	r0, [r0, #16]
 80a09b8:	f7ff bce4 	b.w	80a0384 <HAL_USART_Flush_Data>

080a09bc <_ZN11USARTSerialD0Ev>:
 80a09bc:	b510      	push	{r4, lr}
 80a09be:	4604      	mov	r4, r0
 80a09c0:	f7ff fb6b 	bl	80a009a <_ZdlPv>
 80a09c4:	4620      	mov	r0, r4
 80a09c6:	bd10      	pop	{r4, pc}

080a09c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a09c8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a09ca:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a09cc:	4604      	mov	r4, r0
 80a09ce:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a09d0:	b925      	cbnz	r5, 80a09dc <_ZN11USARTSerial5writeEh+0x14>
 80a09d2:	7c00      	ldrb	r0, [r0, #16]
 80a09d4:	f7ff fcde 	bl	80a0394 <HAL_USART_Available_Data_For_Write>
 80a09d8:	2800      	cmp	r0, #0
 80a09da:	dd05      	ble.n	80a09e8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a09dc:	7c20      	ldrb	r0, [r4, #16]
 80a09de:	4631      	mov	r1, r6
  }
  return 0;
}
 80a09e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a09e4:	f7ff bcae 	b.w	80a0344 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a09e8:	4628      	mov	r0, r5
 80a09ea:	bd70      	pop	{r4, r5, r6, pc}

080a09ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a09ec:	b510      	push	{r4, lr}
 80a09ee:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a09f0:	2000      	movs	r0, #0
 80a09f2:	6060      	str	r0, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a09f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a09f8:	60a0      	str	r0, [r4, #8]
 80a09fa:	4806      	ldr	r0, [pc, #24]	; (80a0a14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a09fc:	7421      	strb	r1, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a09fe:	6020      	str	r0, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0a00:	2001      	movs	r0, #1
 80a0a02:	7460      	strb	r0, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0a04:	4608      	mov	r0, r1
 80a0a06:	4611      	mov	r1, r2
 80a0a08:	461a      	mov	r2, r3
 80a0a0a:	f7ff fc93 	bl	80a0334 <HAL_USART_Init>
}
 80a0a0e:	4620      	mov	r0, r4
 80a0a10:	bd10      	pop	{r4, pc}
 80a0a12:	bf00      	nop
 80a0a14:	080a67a0 	.word	0x080a67a0

080a0a18 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a0a18:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0a1a:	4d0c      	ldr	r5, [pc, #48]	; (80a0a4c <_Z22__fetch_global_Serial1v+0x34>)
 80a0a1c:	6829      	ldr	r1, [r5, #0]
 80a0a1e:	f011 0401 	ands.w	r4, r1, #1
 80a0a22:	d111      	bne.n	80a0a48 <_Z22__fetch_global_Serial1v+0x30>
 80a0a24:	4628      	mov	r0, r5
 80a0a26:	f7ff fb3a 	bl	80a009e <__cxa_guard_acquire>
 80a0a2a:	b168      	cbz	r0, 80a0a48 <_Z22__fetch_global_Serial1v+0x30>
 80a0a2c:	4621      	mov	r1, r4
 80a0a2e:	4a08      	ldr	r2, [pc, #32]	; (80a0a50 <_Z22__fetch_global_Serial1v+0x38>)
 80a0a30:	4b08      	ldr	r3, [pc, #32]	; (80a0a54 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0a32:	4809      	ldr	r0, [pc, #36]	; (80a0a58 <_Z22__fetch_global_Serial1v+0x40>)
 80a0a34:	f7ff ffda 	bl	80a09ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0a38:	4628      	mov	r0, r5
 80a0a3a:	f7ff fb35 	bl	80a00a8 <__cxa_guard_release>
 80a0a3e:	4806      	ldr	r0, [pc, #24]	; (80a0a58 <_Z22__fetch_global_Serial1v+0x40>)
 80a0a40:	4906      	ldr	r1, [pc, #24]	; (80a0a5c <_Z22__fetch_global_Serial1v+0x44>)
 80a0a42:	4a07      	ldr	r2, [pc, #28]	; (80a0a60 <_Z22__fetch_global_Serial1v+0x48>)
 80a0a44:	f000 fb04 	bl	80a1050 <__aeabi_atexit>
	return serial1;
}
 80a0a48:	4803      	ldr	r0, [pc, #12]	; (80a0a58 <_Z22__fetch_global_Serial1v+0x40>)
 80a0a4a:	bd38      	pop	{r3, r4, r5, pc}
 80a0a4c:	20000588 	.word	0x20000588
 80a0a50:	2000058c 	.word	0x2000058c
 80a0a54:	20000504 	.word	0x20000504
 80a0a58:	200004f0 	.word	0x200004f0
 80a0a5c:	080a0999 	.word	0x080a0999
 80a0a60:	20000374 	.word	0x20000374

080a0a64 <_ZN11USBKeyboardD1Ev>:
	uint8_t modifiers;
	uint8_t reserved;
	uint8_t keys[6];
} KeyReport;

class USBKeyboard : public Print
 80a0a64:	4770      	bx	lr
	...

080a0a68 <_ZN11USBKeyboard7releaseEt>:
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t USBKeyboard::release(uint16_t key)
{
	uint8_t i;
	if (key >= 136)
 80a0a68:	2987      	cmp	r1, #135	; 0x87

// release() takes the specified key out of the persistent key report and
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t USBKeyboard::release(uint16_t key)
{
 80a0a6a:	b510      	push	{r4, lr}
 80a0a6c:	4603      	mov	r3, r0
	uint8_t i;
	if (key >= 136)
 80a0a6e:	d903      	bls.n	80a0a78 <_ZN11USBKeyboard7releaseEt+0x10>
	{
		// it's a non-printing key (not a modifier)
		key = key - 136;
 80a0a70:	f1a1 0088 	sub.w	r0, r1, #136	; 0x88
 80a0a74:	b280      	uxth	r0, r0
 80a0a76:	e016      	b.n	80a0aa6 <_ZN11USBKeyboard7releaseEt+0x3e>
	}
	else if (key >= 128)
 80a0a78:	297f      	cmp	r1, #127	; 0x7f
 80a0a7a:	d908      	bls.n	80a0a8e <_ZN11USBKeyboard7releaseEt+0x26>
	{
		// it's a modifier key
		keyReport.modifiers &= ~(1 << (key - 128));
 80a0a7c:	3980      	subs	r1, #128	; 0x80
 80a0a7e:	2201      	movs	r2, #1
 80a0a80:	408a      	lsls	r2, r1
 80a0a82:	7a41      	ldrb	r1, [r0, #9]
 80a0a84:	ea21 0202 	bic.w	r2, r1, r2
 80a0a88:	7242      	strb	r2, [r0, #9]
		key = 0;
 80a0a8a:	2000      	movs	r0, #0
 80a0a8c:	e00b      	b.n	80a0aa6 <_ZN11USBKeyboard7releaseEt+0x3e>
	}
	else
	{
		// it's a printing key
		key = asciimap[key];
 80a0a8e:	4a11      	ldr	r2, [pc, #68]	; (80a0ad4 <_ZN11USBKeyboard7releaseEt+0x6c>)
 80a0a90:	5c52      	ldrb	r2, [r2, r1]
 80a0a92:	b290      	uxth	r0, r2
		if (!key)
 80a0a94:	b1e0      	cbz	r0, 80a0ad0 <_ZN11USBKeyboard7releaseEt+0x68>
		{
			return 0;
		}
		if (key & 0x80)
 80a0a96:	0611      	lsls	r1, r2, #24
		{
			// it's a capital letter or other character reached with shift
			keyReport.modifiers &= ~(0x02);	// the left shift modifier
 80a0a98:	bf41      	itttt	mi
 80a0a9a:	7a59      	ldrbmi	r1, [r3, #9]
			key &= 0x7F;
 80a0a9c:	f002 007f 	andmi.w	r0, r2, #127	; 0x7f
			return 0;
		}
		if (key & 0x80)
		{
			// it's a capital letter or other character reached with shift
			keyReport.modifiers &= ~(0x02);	// the left shift modifier
 80a0aa0:	f021 0102 	bicmi.w	r1, r1, #2
 80a0aa4:	7259      	strbmi	r1, [r3, #9]
 80a0aa6:	f103 020b 	add.w	r2, r3, #11
 80a0aaa:	f103 0111 	add.w	r1, r3, #17

	// Test the key report to see if key is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i = 0 ; i < 6 ; i++)
	{
		if (0 != key && keyReport.keys[i] == key)
 80a0aae:	b120      	cbz	r0, 80a0aba <_ZN11USBKeyboard7releaseEt+0x52>
 80a0ab0:	7814      	ldrb	r4, [r2, #0]
 80a0ab2:	4284      	cmp	r4, r0
		{
			keyReport.keys[i] = 0x00;
 80a0ab4:	bf04      	itt	eq
 80a0ab6:	2400      	moveq	r4, #0
 80a0ab8:	7014      	strbeq	r4, [r2, #0]
 80a0aba:	3201      	adds	r2, #1
		}
	}

	// Test the key report to see if key is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i = 0 ; i < 6 ; i++)
 80a0abc:	428a      	cmp	r2, r1
 80a0abe:	d1f6      	bne.n	80a0aae <_ZN11USBKeyboard7releaseEt+0x46>
		{
			keyReport.keys[i] = 0x00;
		}
	}

	HAL_USB_HID_Send_Report(0, &keyReport, sizeof(keyReport), NULL);
 80a0ac0:	2000      	movs	r0, #0
 80a0ac2:	f103 0108 	add.w	r1, r3, #8
 80a0ac6:	2209      	movs	r2, #9
 80a0ac8:	4603      	mov	r3, r0
 80a0aca:	f7ff fcab 	bl	80a0424 <HAL_USB_HID_Send_Report>
	return 1;
 80a0ace:	2001      	movs	r0, #1
}
 80a0ad0:	bd10      	pop	{r4, pc}
 80a0ad2:	bf00      	nop
 80a0ad4:	080a67c8 	.word	0x080a67c8

080a0ad8 <_ZN11USBKeyboard10releaseAllEv>:

void USBKeyboard::releaseAll(void)
{
 80a0ad8:	4601      	mov	r1, r0
	keyReport.keys[0] = 0;
 80a0ada:	2000      	movs	r0, #0
 80a0adc:	72c8      	strb	r0, [r1, #11]
	keyReport.keys[1] = 0;
 80a0ade:	7308      	strb	r0, [r1, #12]
	keyReport.keys[2] = 0;
 80a0ae0:	7348      	strb	r0, [r1, #13]
	keyReport.keys[3] = 0;
 80a0ae2:	7388      	strb	r0, [r1, #14]
	keyReport.keys[4] = 0;
 80a0ae4:	73c8      	strb	r0, [r1, #15]
	keyReport.keys[5] = 0;
 80a0ae6:	7408      	strb	r0, [r1, #16]
	keyReport.modifiers = 0;
 80a0ae8:	7248      	strb	r0, [r1, #9]
	HAL_USB_HID_Send_Report(0, &keyReport, sizeof(keyReport), NULL);
 80a0aea:	2209      	movs	r2, #9
 80a0aec:	3108      	adds	r1, #8
 80a0aee:	4603      	mov	r3, r0
 80a0af0:	f7ff bc98 	b.w	80a0424 <HAL_USB_HID_Send_Report>

080a0af4 <_ZN11USBKeyboard5pressEt>:
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t USBKeyboard::press(uint16_t key)
{
	uint8_t i;
	if (key >= 136)
 80a0af4:	2987      	cmp	r1, #135	; 0x87
// press() adds the specified key (printing, non-printing, or modifier)
// to the persistent key report and sends the report.  Because of the way
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t USBKeyboard::press(uint16_t key)
{
 80a0af6:	b510      	push	{r4, lr}
 80a0af8:	4603      	mov	r3, r0
	uint8_t i;
	if (key >= 136)
 80a0afa:	d902      	bls.n	80a0b02 <_ZN11USBKeyboard5pressEt+0xe>
	{
		// it's a non-printing key (not a modifier)
		key = key - 136;
 80a0afc:	3988      	subs	r1, #136	; 0x88
 80a0afe:	b289      	uxth	r1, r1
 80a0b00:	e019      	b.n	80a0b36 <_ZN11USBKeyboard5pressEt+0x42>
	}
	else if (key >= 128)
 80a0b02:	297f      	cmp	r1, #127	; 0x7f
 80a0b04:	d907      	bls.n	80a0b16 <_ZN11USBKeyboard5pressEt+0x22>
	{
		// it's a modifier key
		keyReport.modifiers |= (1 << (key - 128));
 80a0b06:	3980      	subs	r1, #128	; 0x80
 80a0b08:	2201      	movs	r2, #1
 80a0b0a:	408a      	lsls	r2, r1
 80a0b0c:	7a41      	ldrb	r1, [r0, #9]
 80a0b0e:	430a      	orrs	r2, r1
 80a0b10:	7242      	strb	r2, [r0, #9]
		key = 0;
 80a0b12:	2100      	movs	r1, #0
 80a0b14:	e00f      	b.n	80a0b36 <_ZN11USBKeyboard5pressEt+0x42>
	}
	else
	{
		// it's a printing key
		key = asciimap[key];
 80a0b16:	4a1c      	ldr	r2, [pc, #112]	; (80a0b88 <_ZN11USBKeyboard5pressEt+0x94>)
 80a0b18:	5c52      	ldrb	r2, [r2, r1]
 80a0b1a:	b291      	uxth	r1, r2
		if (!key)
 80a0b1c:	b919      	cbnz	r1, 80a0b26 <_ZN11USBKeyboard5pressEt+0x32>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a0b1e:	2201      	movs	r2, #1
 80a0b20:	605a      	str	r2, [r3, #4]
		{
			setWriteError();
			return 0;
 80a0b22:	2000      	movs	r0, #0
 80a0b24:	bd10      	pop	{r4, pc}
		}
		if (key & 0x80)
 80a0b26:	0610      	lsls	r0, r2, #24
		{
			// it's a capital letter or other character reached with shift
			keyReport.modifiers |= 0x02;	// the left shift modifier
 80a0b28:	bf41      	itttt	mi
 80a0b2a:	7a59      	ldrbmi	r1, [r3, #9]
 80a0b2c:	f041 0102 	orrmi.w	r1, r1, #2
 80a0b30:	7259      	strbmi	r1, [r3, #9]
			key &= 0x7F;
 80a0b32:	f002 017f 	andmi.w	r1, r2, #127	; 0x7f
		}
	}

	// Add key to the keyReport only if it's not already present
	// and if there is an empty slot.
	if (keyReport.keys[0] != key && keyReport.keys[1] != key &&
 80a0b36:	7ada      	ldrb	r2, [r3, #11]
 80a0b38:	428a      	cmp	r2, r1
 80a0b3a:	d01b      	beq.n	80a0b74 <_ZN11USBKeyboard5pressEt+0x80>
 80a0b3c:	7b1a      	ldrb	r2, [r3, #12]
 80a0b3e:	428a      	cmp	r2, r1
 80a0b40:	d018      	beq.n	80a0b74 <_ZN11USBKeyboard5pressEt+0x80>
 80a0b42:	7b5a      	ldrb	r2, [r3, #13]
 80a0b44:	428a      	cmp	r2, r1
 80a0b46:	d015      	beq.n	80a0b74 <_ZN11USBKeyboard5pressEt+0x80>
		keyReport.keys[2] != key && keyReport.keys[3] != key &&
 80a0b48:	7b9a      	ldrb	r2, [r3, #14]
 80a0b4a:	428a      	cmp	r2, r1
 80a0b4c:	d012      	beq.n	80a0b74 <_ZN11USBKeyboard5pressEt+0x80>
 80a0b4e:	7bda      	ldrb	r2, [r3, #15]
 80a0b50:	428a      	cmp	r2, r1
 80a0b52:	d00f      	beq.n	80a0b74 <_ZN11USBKeyboard5pressEt+0x80>
		keyReport.keys[4] != key && keyReport.keys[5] != key)
 80a0b54:	7c1a      	ldrb	r2, [r3, #16]
 80a0b56:	428a      	cmp	r2, r1
 80a0b58:	d00c      	beq.n	80a0b74 <_ZN11USBKeyboard5pressEt+0x80>
 80a0b5a:	f103 000a 	add.w	r0, r3, #10
 80a0b5e:	2200      	movs	r2, #0
	{

		for (i=0; i<6; i++)
		{
			if (keyReport.keys[i] == 0x00)
 80a0b60:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80a0b64:	b914      	cbnz	r4, 80a0b6c <_ZN11USBKeyboard5pressEt+0x78>
			{
				keyReport.keys[i] = key;
 80a0b66:	441a      	add	r2, r3
 80a0b68:	72d1      	strb	r1, [r2, #11]
 80a0b6a:	e003      	b.n	80a0b74 <_ZN11USBKeyboard5pressEt+0x80>
 80a0b6c:	3201      	adds	r2, #1
	if (keyReport.keys[0] != key && keyReport.keys[1] != key &&
		keyReport.keys[2] != key && keyReport.keys[3] != key &&
		keyReport.keys[4] != key && keyReport.keys[5] != key)
	{

		for (i=0; i<6; i++)
 80a0b6e:	2a06      	cmp	r2, #6
 80a0b70:	d1f6      	bne.n	80a0b60 <_ZN11USBKeyboard5pressEt+0x6c>
 80a0b72:	e7d4      	b.n	80a0b1e <_ZN11USBKeyboard5pressEt+0x2a>
			setWriteError();
			return 0;
		}
	}

	HAL_USB_HID_Send_Report(0, &keyReport, sizeof(keyReport), NULL);
 80a0b74:	2000      	movs	r0, #0
 80a0b76:	f103 0108 	add.w	r1, r3, #8
 80a0b7a:	2209      	movs	r2, #9
 80a0b7c:	4603      	mov	r3, r0
 80a0b7e:	f7ff fc51 	bl	80a0424 <HAL_USB_HID_Send_Report>
	return 1;
 80a0b82:	2001      	movs	r0, #1
}
 80a0b84:	bd10      	pop	{r4, pc}
 80a0b86:	bf00      	nop
 80a0b88:	080a67c8 	.word	0x080a67c8

080a0b8c <_ZN11USBKeyboard8writeRawEt>:
	keyReport.modifiers = 0;
	HAL_USB_HID_Send_Report(0, &keyReport, sizeof(keyReport), NULL);
}

size_t USBKeyboard::writeRaw(uint16_t key)
{
 80a0b8c:	b570      	push	{r4, r5, r6, lr}
	uint8_t p = press(136 + key);	// Keydown
 80a0b8e:	3188      	adds	r1, #136	; 0x88
 80a0b90:	6803      	ldr	r3, [r0, #0]
 80a0b92:	b28c      	uxth	r4, r1
 80a0b94:	4621      	mov	r1, r4
 80a0b96:	695b      	ldr	r3, [r3, #20]
	keyReport.modifiers = 0;
	HAL_USB_HID_Send_Report(0, &keyReport, sizeof(keyReport), NULL);
}

size_t USBKeyboard::writeRaw(uint16_t key)
{
 80a0b98:	4605      	mov	r5, r0
	uint8_t p = press(136 + key);	// Keydown
 80a0b9a:	4798      	blx	r3
 80a0b9c:	4606      	mov	r6, r0
	delay(100);
 80a0b9e:	2064      	movs	r0, #100	; 0x64
 80a0ba0:	f7ff fcb0 	bl	80a0504 <delay>
	uint8_t r = release(136 + key);	// Keyup
 80a0ba4:	682b      	ldr	r3, [r5, #0]
 80a0ba6:	4628      	mov	r0, r5
 80a0ba8:	699b      	ldr	r3, [r3, #24]
 80a0baa:	4621      	mov	r1, r4
 80a0bac:	4798      	blx	r3
	(void)r;
	return (p);					// just return the result of press() since release() almost always returns 1
}
 80a0bae:	b2f0      	uxtb	r0, r6
 80a0bb0:	bd70      	pop	{r4, r5, r6, pc}

080a0bb2 <_ZN11USBKeyboard5writeEh>:

size_t USBKeyboard::write(uint8_t key)
{
 80a0bb2:	b570      	push	{r4, r5, r6, lr}
	uint8_t p = press(key);		// Keydown
 80a0bb4:	6803      	ldr	r3, [r0, #0]
	(void)r;
	return (p);					// just return the result of press() since release() almost always returns 1
}

size_t USBKeyboard::write(uint8_t key)
{
 80a0bb6:	4604      	mov	r4, r0
	uint8_t p = press(key);		// Keydown
 80a0bb8:	695b      	ldr	r3, [r3, #20]
 80a0bba:	460d      	mov	r5, r1
 80a0bbc:	4798      	blx	r3
 80a0bbe:	4606      	mov	r6, r0
	delay(100);
 80a0bc0:	2064      	movs	r0, #100	; 0x64
 80a0bc2:	f7ff fc9f 	bl	80a0504 <delay>
	uint8_t r = release(key);	// Keyup
 80a0bc6:	6823      	ldr	r3, [r4, #0]
 80a0bc8:	4620      	mov	r0, r4
 80a0bca:	699b      	ldr	r3, [r3, #24]
 80a0bcc:	4629      	mov	r1, r5
 80a0bce:	4798      	blx	r3
	(void)r;
	return (p);					// just return the result of press() since release() almost always returns 1
}
 80a0bd0:	b2f0      	uxtb	r0, r6
 80a0bd2:	bd70      	pop	{r4, r5, r6, pc}

080a0bd4 <_ZN11USBKeyboardD0Ev>:
 80a0bd4:	b510      	push	{r4, lr}
 80a0bd6:	4604      	mov	r4, r0
 80a0bd8:	f7ff fa5f 	bl	80a009a <_ZdlPv>
 80a0bdc:	4620      	mov	r0, r4
 80a0bde:	bd10      	pop	{r4, pc}

080a0be0 <_ZN11USBKeyboardC1Ev>:
};

//
// Constructor
//
USBKeyboard::USBKeyboard(void)
 80a0be0:	b510      	push	{r4, lr}
 80a0be2:	4604      	mov	r4, r0
 80a0be4:	4b05      	ldr	r3, [pc, #20]	; (80a0bfc <_ZN11USBKeyboardC1Ev+0x1c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0be6:	2000      	movs	r0, #0
 80a0be8:	6023      	str	r3, [r4, #0]
{
	keyReport.reportId = 0x02;
 80a0bea:	2302      	movs	r3, #2
 80a0bec:	6060      	str	r0, [r4, #4]
	HAL_USB_HID_Init(0, NULL);
 80a0bee:	4601      	mov	r1, r0
//
// Constructor
//
USBKeyboard::USBKeyboard(void)
{
	keyReport.reportId = 0x02;
 80a0bf0:	7223      	strb	r3, [r4, #8]
	HAL_USB_HID_Init(0, NULL);
 80a0bf2:	f7ff fc0f 	bl	80a0414 <HAL_USB_HID_Init>
}
 80a0bf6:	4620      	mov	r0, r4
 80a0bf8:	bd10      	pop	{r4, pc}
 80a0bfa:	bf00      	nop
 80a0bfc:	080a6850 	.word	0x080a6850

080a0c00 <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev>:
 80a0c00:	4b0c      	ldr	r3, [pc, #48]	; (80a0c34 <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev+0x34>)
 80a0c02:	2200      	movs	r2, #0
 80a0c04:	490c      	ldr	r1, [pc, #48]	; (80a0c38 <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev+0x38>)
	(void)r;
	return (p);					// just return the result of press() since release() almost always returns 1
}

//Preinstantiate Object
USBKeyboard Keyboard;
 80a0c06:	b510      	push	{r4, lr}
 80a0c08:	701a      	strb	r2, [r3, #0]
 80a0c0a:	2301      	movs	r3, #1
 80a0c0c:	700b      	strb	r3, [r1, #0]
 80a0c0e:	490b      	ldr	r1, [pc, #44]	; (80a0c3c <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev+0x3c>)
 80a0c10:	4c0b      	ldr	r4, [pc, #44]	; (80a0c40 <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev+0x40>)
 80a0c12:	700a      	strb	r2, [r1, #0]
 80a0c14:	4a0b      	ldr	r2, [pc, #44]	; (80a0c44 <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev+0x44>)
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	7013      	strb	r3, [r2, #0]
 80a0c1a:	4b0b      	ldr	r3, [pc, #44]	; (80a0c48 <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev+0x48>)
 80a0c1c:	2202      	movs	r2, #2
 80a0c1e:	701a      	strb	r2, [r3, #0]
 80a0c20:	f7ff ffde 	bl	80a0be0 <_ZN11USBKeyboardC1Ev>
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0c2a:	4908      	ldr	r1, [pc, #32]	; (80a0c4c <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev+0x4c>)
 80a0c2c:	4a08      	ldr	r2, [pc, #32]	; (80a0c50 <_GLOBAL__sub_I__ZN11USBKeyboardC2Ev+0x50>)
 80a0c2e:	f000 ba0f 	b.w	80a1050 <__aeabi_atexit>
 80a0c32:	bf00      	nop
 80a0c34:	2000062a 	.word	0x2000062a
 80a0c38:	2000062b 	.word	0x2000062b
 80a0c3c:	20000628 	.word	0x20000628
 80a0c40:	20000614 	.word	0x20000614
 80a0c44:	20000629 	.word	0x20000629
 80a0c48:	20000610 	.word	0x20000610
 80a0c4c:	080a0a65 	.word	0x080a0a65
 80a0c50:	20000374 	.word	0x20000374

080a0c54 <_ZN8USBMouseC1Ev>:
#include "spark_wiring_usbmouse.h"

//
// Constructor
//
USBMouse::USBMouse(void)
 80a0c54:	b510      	push	{r4, lr}
 80a0c56:	4604      	mov	r4, r0
{
    mouseReport.reportId = 0x01;
 80a0c58:	2301      	movs	r3, #1
 80a0c5a:	7003      	strb	r3, [r0, #0]
    HAL_USB_HID_Init(0, NULL);
 80a0c5c:	2000      	movs	r0, #0
 80a0c5e:	4601      	mov	r1, r0
 80a0c60:	f7ff fbd8 	bl	80a0414 <HAL_USB_HID_Init>
}
 80a0c64:	4620      	mov	r0, r4
 80a0c66:	bd10      	pop	{r4, pc}

080a0c68 <_GLOBAL__sub_I__ZN8USBMouseC2Ev>:
 80a0c68:	4b07      	ldr	r3, [pc, #28]	; (80a0c88 <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x20>)
 80a0c6a:	2200      	movs	r2, #0
 80a0c6c:	4907      	ldr	r1, [pc, #28]	; (80a0c8c <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x24>)
 80a0c6e:	701a      	strb	r2, [r3, #0]
 80a0c70:	2301      	movs	r3, #1
 80a0c72:	700b      	strb	r3, [r1, #0]
 80a0c74:	4906      	ldr	r1, [pc, #24]	; (80a0c90 <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x28>)

	return false;
}

//Preinstantiate Object
USBMouse Mouse;
 80a0c76:	4807      	ldr	r0, [pc, #28]	; (80a0c94 <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x2c>)
 80a0c78:	700a      	strb	r2, [r1, #0]
 80a0c7a:	4a07      	ldr	r2, [pc, #28]	; (80a0c98 <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x30>)
 80a0c7c:	7013      	strb	r3, [r2, #0]
 80a0c7e:	4b07      	ldr	r3, [pc, #28]	; (80a0c9c <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x34>)
 80a0c80:	2202      	movs	r2, #2
 80a0c82:	701a      	strb	r2, [r3, #0]
 80a0c84:	f7ff bfe6 	b.w	80a0c54 <_ZN8USBMouseC1Ev>
 80a0c88:	20000634 	.word	0x20000634
 80a0c8c:	20000635 	.word	0x20000635
 80a0c90:	20000632 	.word	0x20000632
 80a0c94:	2000062c 	.word	0x2000062c
 80a0c98:	20000633 	.word	0x20000633
 80a0c9c:	20000631 	.word	0x20000631

080a0ca0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0ca0:	7441      	strb	r1, [r0, #17]
 80a0ca2:	4770      	bx	lr

080a0ca4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a0ca4:	4770      	bx	lr

080a0ca6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a0ca6:	7c00      	ldrb	r0, [r0, #16]
 80a0ca8:	2100      	movs	r1, #0
 80a0caa:	f7ff bb9b 	b.w	80a03e4 <HAL_USB_USART_Receive_Data>

080a0cae <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a0cae:	7c00      	ldrb	r0, [r0, #16]
 80a0cb0:	2101      	movs	r1, #1
 80a0cb2:	f7ff bb97 	b.w	80a03e4 <HAL_USB_USART_Receive_Data>

080a0cb6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a0cb6:	7c00      	ldrb	r0, [r0, #16]
 80a0cb8:	f7ff bb8c 	b.w	80a03d4 <HAL_USB_USART_Available_Data_For_Write>

080a0cbc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a0cbc:	7c00      	ldrb	r0, [r0, #16]
 80a0cbe:	f7ff bb81 	b.w	80a03c4 <HAL_USB_USART_Available_Data>

080a0cc2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0cc2:	b538      	push	{r3, r4, r5, lr}
 80a0cc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0cc6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a0cc8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0cca:	f7ff fb83 	bl	80a03d4 <HAL_USB_USART_Available_Data_For_Write>
 80a0cce:	2800      	cmp	r0, #0
 80a0cd0:	dc01      	bgt.n	80a0cd6 <_ZN9USBSerial5writeEh+0x14>
 80a0cd2:	7c60      	ldrb	r0, [r4, #17]
 80a0cd4:	b120      	cbz	r0, 80a0ce0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a0cd6:	7c20      	ldrb	r0, [r4, #16]
 80a0cd8:	4629      	mov	r1, r5
 80a0cda:	f7ff fb8b 	bl	80a03f4 <HAL_USB_USART_Send_Data>
    return 1;
 80a0cde:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0ce0:	bd38      	pop	{r3, r4, r5, pc}

080a0ce2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0ce2:	7c00      	ldrb	r0, [r0, #16]
 80a0ce4:	f7ff bb8e 	b.w	80a0404 <HAL_USB_USART_Flush_Data>

080a0ce8 <_ZN9USBSerialD0Ev>:
 80a0ce8:	b510      	push	{r4, lr}
 80a0cea:	4604      	mov	r4, r0
 80a0cec:	f7ff f9d5 	bl	80a009a <_ZdlPv>
 80a0cf0:	4620      	mov	r0, r4
 80a0cf2:	bd10      	pop	{r4, pc}

080a0cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0cf4:	b510      	push	{r4, lr}
 80a0cf6:	4604      	mov	r4, r0
 80a0cf8:	2300      	movs	r3, #0
 80a0cfa:	6043      	str	r3, [r0, #4]
 80a0cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0d00:	6083      	str	r3, [r0, #8]
 80a0d02:	4b05      	ldr	r3, [pc, #20]	; (80a0d18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
{
  _serial = serial;
 80a0d04:	7401      	strb	r1, [r0, #16]

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0d06:	6003      	str	r3, [r0, #0]
{
  _serial = serial;
  _blocking = true;
 80a0d08:	2301      	movs	r3, #1
 80a0d0a:	7443      	strb	r3, [r0, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0d0c:	4608      	mov	r0, r1
 80a0d0e:	4611      	mov	r1, r2
 80a0d10:	f7ff fb48 	bl	80a03a4 <HAL_USB_USART_Init>
}
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	bd10      	pop	{r4, pc}
 80a0d18:	080a6878 	.word	0x080a6878

080a0d1c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0d1c:	7c00      	ldrb	r0, [r0, #16]
 80a0d1e:	2200      	movs	r2, #0
 80a0d20:	f7ff bb48 	b.w	80a03b4 <HAL_USB_USART_Begin>

080a0d24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0d24:	b510      	push	{r4, lr}
 80a0d26:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0d28:	2100      	movs	r1, #0
 80a0d2a:	2214      	movs	r2, #20
 80a0d2c:	f000 fa73 	bl	80a1216 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0d30:	4b05      	ldr	r3, [pc, #20]	; (80a0d48 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0d32:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0d34:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0d36:	4b05      	ldr	r3, [pc, #20]	; (80a0d4c <_Z19acquireSerialBufferv+0x28>)
 80a0d38:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0d3a:	f240 1301 	movw	r3, #257	; 0x101
 80a0d3e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0d40:	2381      	movs	r3, #129	; 0x81
 80a0d42:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0d44:	bd10      	pop	{r4, pc}
 80a0d46:	bf00      	nop
 80a0d48:	200006bd 	.word	0x200006bd
 80a0d4c:	2000063c 	.word	0x2000063c

080a0d50 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0d50:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0d52:	4d0e      	ldr	r5, [pc, #56]	; (80a0d8c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0d54:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0d56:	a801      	add	r0, sp, #4
 80a0d58:	f7ff ffe4 	bl	80a0d24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0d5c:	6829      	ldr	r1, [r5, #0]
 80a0d5e:	f011 0401 	ands.w	r4, r1, #1
 80a0d62:	d110      	bne.n	80a0d86 <_Z16_fetch_usbserialv+0x36>
 80a0d64:	4628      	mov	r0, r5
 80a0d66:	f7ff f99a 	bl	80a009e <__cxa_guard_acquire>
 80a0d6a:	b160      	cbz	r0, 80a0d86 <_Z16_fetch_usbserialv+0x36>
 80a0d6c:	4621      	mov	r1, r4
 80a0d6e:	aa01      	add	r2, sp, #4
 80a0d70:	4807      	ldr	r0, [pc, #28]	; (80a0d90 <_Z16_fetch_usbserialv+0x40>)
 80a0d72:	f7ff ffbf 	bl	80a0cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0d76:	4628      	mov	r0, r5
 80a0d78:	f7ff f996 	bl	80a00a8 <__cxa_guard_release>
 80a0d7c:	4804      	ldr	r0, [pc, #16]	; (80a0d90 <_Z16_fetch_usbserialv+0x40>)
 80a0d7e:	4905      	ldr	r1, [pc, #20]	; (80a0d94 <_Z16_fetch_usbserialv+0x44>)
 80a0d80:	4a05      	ldr	r2, [pc, #20]	; (80a0d98 <_Z16_fetch_usbserialv+0x48>)
 80a0d82:	f000 f965 	bl	80a1050 <__aeabi_atexit>
	return _usbserial;
}
 80a0d86:	4802      	ldr	r0, [pc, #8]	; (80a0d90 <_Z16_fetch_usbserialv+0x40>)
 80a0d88:	b007      	add	sp, #28
 80a0d8a:	bd30      	pop	{r4, r5, pc}
 80a0d8c:	20000638 	.word	0x20000638
 80a0d90:	200007c0 	.word	0x200007c0
 80a0d94:	080a0ca5 	.word	0x080a0ca5
 80a0d98:	20000374 	.word	0x20000374

080a0d9c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0d9c:	b510      	push	{r4, lr}
 80a0d9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0da0:	2100      	movs	r1, #0
 80a0da2:	2214      	movs	r2, #20
 80a0da4:	f000 fa37 	bl	80a1216 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0da8:	4b05      	ldr	r3, [pc, #20]	; (80a0dc0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0daa:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0dac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0dae:	4b05      	ldr	r3, [pc, #20]	; (80a0dc4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0db0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0db2:	f240 1301 	movw	r3, #257	; 0x101
 80a0db6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0db8:	2381      	movs	r3, #129	; 0x81
 80a0dba:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0dbc:	bd10      	pop	{r4, pc}
 80a0dbe:	bf00      	nop
 80a0dc0:	20000870 	.word	0x20000870
 80a0dc4:	200007d8 	.word	0x200007d8

080a0dc8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0dc8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0dca:	4c0e      	ldr	r4, [pc, #56]	; (80a0e04 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0dcc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0dce:	a801      	add	r0, sp, #4
 80a0dd0:	f7ff ffe4 	bl	80a0d9c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0dd4:	6823      	ldr	r3, [r4, #0]
 80a0dd6:	07db      	lsls	r3, r3, #31
 80a0dd8:	d410      	bmi.n	80a0dfc <_Z17_fetch_usbserial1v+0x34>
 80a0dda:	4620      	mov	r0, r4
 80a0ddc:	f7ff f95f 	bl	80a009e <__cxa_guard_acquire>
 80a0de0:	b160      	cbz	r0, 80a0dfc <_Z17_fetch_usbserial1v+0x34>
 80a0de2:	2101      	movs	r1, #1
 80a0de4:	aa01      	add	r2, sp, #4
 80a0de6:	4808      	ldr	r0, [pc, #32]	; (80a0e08 <_Z17_fetch_usbserial1v+0x40>)
 80a0de8:	f7ff ff84 	bl	80a0cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0dec:	4620      	mov	r0, r4
 80a0dee:	f7ff f95b 	bl	80a00a8 <__cxa_guard_release>
 80a0df2:	4805      	ldr	r0, [pc, #20]	; (80a0e08 <_Z17_fetch_usbserial1v+0x40>)
 80a0df4:	4905      	ldr	r1, [pc, #20]	; (80a0e0c <_Z17_fetch_usbserial1v+0x44>)
 80a0df6:	4a06      	ldr	r2, [pc, #24]	; (80a0e10 <_Z17_fetch_usbserial1v+0x48>)
 80a0df8:	f000 f92a 	bl	80a1050 <__aeabi_atexit>
  return _usbserial1;
}
 80a0dfc:	4802      	ldr	r0, [pc, #8]	; (80a0e08 <_Z17_fetch_usbserial1v+0x40>)
 80a0dfe:	b006      	add	sp, #24
 80a0e00:	bd10      	pop	{r4, pc}
 80a0e02:	bf00      	nop
 80a0e04:	200007d4 	.word	0x200007d4
 80a0e08:	2000085c 	.word	0x2000085c
 80a0e0c:	080a0ca5 	.word	0x080a0ca5
 80a0e10:	20000374 	.word	0x20000374

080a0e14 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a0e14:	4770      	bx	lr

080a0e16 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
 80a0e16:	b530      	push	{r4, r5, lr}
        WiFiAccessPoint* results;

        int index;

        void addResult(WiFiAccessPoint* result) {
            if (index<count) {
 80a0e18:	684b      	ldr	r3, [r1, #4]
 80a0e1a:	688a      	ldr	r2, [r1, #8]
 80a0e1c:	4293      	cmp	r3, r2
 80a0e1e:	da10      	bge.n	80a0e42 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
 80a0e20:	4605      	mov	r5, r0
 80a0e22:	680a      	ldr	r2, [r1, #0]
 80a0e24:	1c5c      	adds	r4, r3, #1
 80a0e26:	604c      	str	r4, [r1, #4]
 80a0e28:	2438      	movs	r4, #56	; 0x38
 80a0e2a:	fb04 2403 	mla	r4, r4, r3, r2
 80a0e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0e3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a0e3e:	e884 0003 	stmia.w	r4, {r0, r1}
 80a0e42:	bd30      	pop	{r4, r5, pc}

080a0e44 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
    int WiFiClass::scan(WiFiAccessPoint* results, size_t result_count) {
        APScan apScan(results, result_count);
        return apScan.start();
    }

    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
 80a0e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
 80a0e46:	2300      	movs	r3, #0
        }

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
 80a0e48:	9101      	str	r1, [sp, #4]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
 80a0e4a:	4806      	ldr	r0, [pc, #24]	; (80a0e64 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
 80a0e4c:	a901      	add	r1, sp, #4
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
 80a0e4e:	9302      	str	r3, [sp, #8]

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
 80a0e50:	9203      	str	r2, [sp, #12]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
 80a0e52:	f7ff faef 	bl	80a0434 <wlan_get_credentials>
    }

    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }
 80a0e56:	9b03      	ldr	r3, [sp, #12]
 80a0e58:	4298      	cmp	r0, r3
 80a0e5a:	bfa8      	it	ge
 80a0e5c:	4618      	movge	r0, r3
 80a0e5e:	b005      	add	sp, #20
 80a0e60:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0e64:	080a0e17 	.word	0x080a0e17

080a0e68 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a0e68:	4803      	ldr	r0, [pc, #12]	; (80a0e78 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a0e6a:	4b04      	ldr	r3, [pc, #16]	; (80a0e7c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a0e6c:	4904      	ldr	r1, [pc, #16]	; (80a0e80 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a0e6e:	4a05      	ldr	r2, [pc, #20]	; (80a0e84 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a0e70:	6003      	str	r3, [r0, #0]
 80a0e72:	f000 b8ed 	b.w	80a1050 <__aeabi_atexit>
 80a0e76:	bf00      	nop
 80a0e78:	20000974 	.word	0x20000974
 80a0e7c:	080a68a8 	.word	0x080a68a8
 80a0e80:	080a0e15 	.word	0x080a0e15
 80a0e84:	20000374 	.word	0x20000374

080a0e88 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0e88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0e8a:	4b14      	ldr	r3, [pc, #80]	; (80a0edc <serialEventRun+0x54>)
 80a0e8c:	b133      	cbz	r3, 80a0e9c <serialEventRun+0x14>
 80a0e8e:	f7ff ff5f 	bl	80a0d50 <_Z16_fetch_usbserialv>
 80a0e92:	6803      	ldr	r3, [r0, #0]
 80a0e94:	691b      	ldr	r3, [r3, #16]
 80a0e96:	4798      	blx	r3
 80a0e98:	2800      	cmp	r0, #0
 80a0e9a:	dc16      	bgt.n	80a0eca <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0e9c:	4b10      	ldr	r3, [pc, #64]	; (80a0ee0 <serialEventRun+0x58>)
 80a0e9e:	b133      	cbz	r3, 80a0eae <serialEventRun+0x26>
 80a0ea0:	f7ff fdba 	bl	80a0a18 <_Z22__fetch_global_Serial1v>
 80a0ea4:	6803      	ldr	r3, [r0, #0]
 80a0ea6:	691b      	ldr	r3, [r3, #16]
 80a0ea8:	4798      	blx	r3
 80a0eaa:	2800      	cmp	r0, #0
 80a0eac:	dc10      	bgt.n	80a0ed0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0eae:	4b0d      	ldr	r3, [pc, #52]	; (80a0ee4 <serialEventRun+0x5c>)
 80a0eb0:	b10b      	cbz	r3, 80a0eb6 <serialEventRun+0x2e>
 80a0eb2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0eb6:	4b0c      	ldr	r3, [pc, #48]	; (80a0ee8 <serialEventRun+0x60>)
 80a0eb8:	b17b      	cbz	r3, 80a0eda <serialEventRun+0x52>
 80a0eba:	f7ff ff85 	bl	80a0dc8 <_Z17_fetch_usbserial1v>
 80a0ebe:	6803      	ldr	r3, [r0, #0]
 80a0ec0:	691b      	ldr	r3, [r3, #16]
 80a0ec2:	4798      	blx	r3
 80a0ec4:	2800      	cmp	r0, #0
 80a0ec6:	dc06      	bgt.n	80a0ed6 <serialEventRun+0x4e>
 80a0ec8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0eca:	f3af 8000 	nop.w
 80a0ece:	e7e5      	b.n	80a0e9c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0ed0:	f3af 8000 	nop.w
 80a0ed4:	e7eb      	b.n	80a0eae <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0ed6:	f3af 8000 	nop.w
 80a0eda:	bd08      	pop	{r3, pc}
	...

080a0eec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0eec:	b508      	push	{r3, lr}
	serialEventRun();
 80a0eee:	f7ff ffcb 	bl	80a0e88 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0ef2:	f7ff fa07 	bl	80a0304 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0ef6:	4b01      	ldr	r3, [pc, #4]	; (80a0efc <_post_loop+0x10>)
 80a0ef8:	6018      	str	r0, [r3, #0]
 80a0efa:	bd08      	pop	{r3, pc}
 80a0efc:	20000980 	.word	0x20000980

080a0f00 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0f00:	4802      	ldr	r0, [pc, #8]	; (80a0f0c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0f02:	4a03      	ldr	r2, [pc, #12]	; (80a0f10 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0f04:	4903      	ldr	r1, [pc, #12]	; (80a0f14 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0f06:	1a12      	subs	r2, r2, r0
 80a0f08:	f000 b97a 	b.w	80a1200 <memcpy>
 80a0f0c:	40024000 	.word	0x40024000
 80a0f10:	40024004 	.word	0x40024004
 80a0f14:	080a6910 	.word	0x080a6910

080a0f18 <module_user_init_hook>:

#endif


void module_user_init_hook()
{
 80a0f18:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0f1a:	4c09      	ldr	r4, [pc, #36]	; (80a0f40 <module_user_init_hook+0x28>)
 80a0f1c:	4d09      	ldr	r5, [pc, #36]	; (80a0f44 <module_user_init_hook+0x2c>)
 80a0f1e:	6823      	ldr	r3, [r4, #0]
 80a0f20:	1b5a      	subs	r2, r3, r5
 80a0f22:	4253      	negs	r3, r2
 80a0f24:	4153      	adcs	r3, r2
 80a0f26:	4a08      	ldr	r2, [pc, #32]	; (80a0f48 <module_user_init_hook+0x30>)
 80a0f28:	7013      	strb	r3, [r2, #0]
    if (!backup_ram_was_valid_) {
 80a0f2a:	b913      	cbnz	r3, 80a0f32 <module_user_init_hook+0x1a>
        system_initialize_user_backup_ram();
 80a0f2c:	f7ff ffe8 	bl	80a0f00 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0f30:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a0f32:	4b06      	ldr	r3, [pc, #24]	; (80a0f4c <module_user_init_hook+0x34>)
 80a0f34:	b11b      	cbz	r3, 80a0f3e <module_user_init_hook+0x26>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0f36:	f7ff f9dd 	bl	80a02f4 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a0f3a:	f3af 8000 	nop.w
 80a0f3e:	bd38      	pop	{r3, r4, r5, pc}
 80a0f40:	40024000 	.word	0x40024000
 80a0f44:	9a271c1e 	.word	0x9a271c1e
 80a0f48:	20000978 	.word	0x20000978
 80a0f4c:	00000000 	.word	0x00000000

080a0f50 <_GLOBAL__sub_I_pinMode>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a0f50:	4b06      	ldr	r3, [pc, #24]	; (80a0f6c <_GLOBAL__sub_I_pinMode+0x1c>)
 80a0f52:	2200      	movs	r2, #0
 80a0f54:	4906      	ldr	r1, [pc, #24]	; (80a0f70 <_GLOBAL__sub_I_pinMode+0x20>)
 80a0f56:	701a      	strb	r2, [r3, #0]
 80a0f58:	2301      	movs	r3, #1
 80a0f5a:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a0f5c:	4905      	ldr	r1, [pc, #20]	; (80a0f74 <_GLOBAL__sub_I_pinMode+0x24>)
 80a0f5e:	700a      	strb	r2, [r1, #0]
 80a0f60:	4a05      	ldr	r2, [pc, #20]	; (80a0f78 <_GLOBAL__sub_I_pinMode+0x28>)
 80a0f62:	7013      	strb	r3, [r2, #0]
 80a0f64:	4b05      	ldr	r3, [pc, #20]	; (80a0f7c <_GLOBAL__sub_I_pinMode+0x2c>)
 80a0f66:	2202      	movs	r2, #2
 80a0f68:	701a      	strb	r2, [r3, #0]
 80a0f6a:	4770      	bx	lr
 80a0f6c:	2000097c 	.word	0x2000097c
 80a0f70:	2000097d 	.word	0x2000097d
 80a0f74:	2000097a 	.word	0x2000097a
 80a0f78:	2000097b 	.word	0x2000097b
 80a0f7c:	20000979 	.word	0x20000979

080a0f80 <_GLOBAL__sub_I_Particle>:
 80a0f80:	4b06      	ldr	r3, [pc, #24]	; (80a0f9c <_GLOBAL__sub_I_Particle+0x1c>)
 80a0f82:	2200      	movs	r2, #0
 80a0f84:	4906      	ldr	r1, [pc, #24]	; (80a0fa0 <_GLOBAL__sub_I_Particle+0x20>)
 80a0f86:	701a      	strb	r2, [r3, #0]
 80a0f88:	2301      	movs	r3, #1
 80a0f8a:	700b      	strb	r3, [r1, #0]
 80a0f8c:	4905      	ldr	r1, [pc, #20]	; (80a0fa4 <_GLOBAL__sub_I_Particle+0x24>)
 80a0f8e:	700a      	strb	r2, [r1, #0]
 80a0f90:	4a05      	ldr	r2, [pc, #20]	; (80a0fa8 <_GLOBAL__sub_I_Particle+0x28>)
 80a0f92:	7013      	strb	r3, [r2, #0]
 80a0f94:	4b05      	ldr	r3, [pc, #20]	; (80a0fac <_GLOBAL__sub_I_Particle+0x2c>)
 80a0f96:	2202      	movs	r2, #2
 80a0f98:	701a      	strb	r2, [r3, #0]
 80a0f9a:	4770      	bx	lr
 80a0f9c:	20000987 	.word	0x20000987
 80a0fa0:	20000988 	.word	0x20000988
 80a0fa4:	20000985 	.word	0x20000985
 80a0fa8:	20000986 	.word	0x20000986
 80a0fac:	20000984 	.word	0x20000984

080a0fb0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0fb0:	b513      	push	{r0, r1, r4, lr}
 80a0fb2:	4c08      	ldr	r4, [pc, #32]	; (80a0fd4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0fb4:	2100      	movs	r1, #0
 80a0fb6:	9100      	str	r1, [sp, #0]
 80a0fb8:	460a      	mov	r2, r1
 80a0fba:	460b      	mov	r3, r1
 80a0fbc:	4620      	mov	r0, r4
 80a0fbe:	f7ff fb4b 	bl	80a0658 <_ZN9IPAddressC1Ehhhh>
 80a0fc2:	4620      	mov	r0, r4
 80a0fc4:	4904      	ldr	r1, [pc, #16]	; (80a0fd8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0fc6:	4a05      	ldr	r2, [pc, #20]	; (80a0fdc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0fc8:	b002      	add	sp, #8
 80a0fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0fce:	f000 b83f 	b.w	80a1050 <__aeabi_atexit>
 80a0fd2:	bf00      	nop
 80a0fd4:	2000098c 	.word	0x2000098c
 80a0fd8:	080a05fd 	.word	0x080a05fd
 80a0fdc:	20000374 	.word	0x20000374

080a0fe0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0fe2:	4b12      	ldr	r3, [pc, #72]	; (80a102c <_GLOBAL__sub_I_SPI+0x4c>)
 80a0fe4:	2100      	movs	r1, #0
 80a0fe6:	7019      	strb	r1, [r3, #0]
 80a0fe8:	4b11      	ldr	r3, [pc, #68]	; (80a1030 <_GLOBAL__sub_I_SPI+0x50>)
 80a0fea:	2401      	movs	r4, #1
 80a0fec:	701c      	strb	r4, [r3, #0]
 80a0fee:	4b11      	ldr	r3, [pc, #68]	; (80a1034 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0ff0:	4f11      	ldr	r7, [pc, #68]	; (80a1038 <_GLOBAL__sub_I_SPI+0x58>)
 80a0ff2:	7019      	strb	r1, [r3, #0]
 80a0ff4:	4b11      	ldr	r3, [pc, #68]	; (80a103c <_GLOBAL__sub_I_SPI+0x5c>)
 80a0ff6:	2202      	movs	r2, #2
 80a0ff8:	701c      	strb	r4, [r3, #0]
 80a0ffa:	4b11      	ldr	r3, [pc, #68]	; (80a1040 <_GLOBAL__sub_I_SPI+0x60>)
 80a0ffc:	4e11      	ldr	r6, [pc, #68]	; (80a1044 <_GLOBAL__sub_I_SPI+0x64>)
 80a0ffe:	4d12      	ldr	r5, [pc, #72]	; (80a1048 <_GLOBAL__sub_I_SPI+0x68>)
 80a1000:	4638      	mov	r0, r7
 80a1002:	701a      	strb	r2, [r3, #0]
 80a1004:	f7ff fc1e 	bl	80a0844 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1008:	4638      	mov	r0, r7

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a100a:	4f10      	ldr	r7, [pc, #64]	; (80a104c <_GLOBAL__sub_I_SPI+0x6c>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a100c:	462a      	mov	r2, r5
 80a100e:	4631      	mov	r1, r6
 80a1010:	f000 f81e 	bl	80a1050 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1014:	4621      	mov	r1, r4
 80a1016:	4638      	mov	r0, r7
 80a1018:	f7ff fc14 	bl	80a0844 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a101c:	4638      	mov	r0, r7
 80a101e:	4631      	mov	r1, r6
 80a1020:	462a      	mov	r2, r5
 80a1022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80a1026:	f000 b813 	b.w	80a1050 <__aeabi_atexit>
 80a102a:	bf00      	nop
 80a102c:	200009a7 	.word	0x200009a7
 80a1030:	200009a8 	.word	0x200009a8
 80a1034:	200009a5 	.word	0x200009a5
 80a1038:	200009ac 	.word	0x200009ac
 80a103c:	200009a6 	.word	0x200009a6
 80a1040:	200009a4 	.word	0x200009a4
 80a1044:	080a0835 	.word	0x080a0835
 80a1048:	20000374 	.word	0x20000374
 80a104c:	200009b8 	.word	0x200009b8

080a1050 <__aeabi_atexit>:
 80a1050:	4603      	mov	r3, r0
 80a1052:	4608      	mov	r0, r1
 80a1054:	4619      	mov	r1, r3
 80a1056:	f000 b8c5 	b.w	80a11e4 <__cxa_atexit>
	...

080a105c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE>:
 80a105c:	4b24      	ldr	r3, [pc, #144]	; (80a10f0 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x94>)
 80a105e:	681a      	ldr	r2, [r3, #0]
 80a1060:	07d0      	lsls	r0, r2, #31
 80a1062:	bf5c      	itt	pl
 80a1064:	2201      	movpl	r2, #1
 80a1066:	601a      	strpl	r2, [r3, #0]
 80a1068:	4b22      	ldr	r3, [pc, #136]	; (80a10f4 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x98>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d1      	lsls	r1, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b20      	ldr	r3, [pc, #128]	; (80a10f8 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x9c>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d2      	lsls	r2, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b1e      	ldr	r3, [pc, #120]	; (80a10fc <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa0>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d0      	lsls	r0, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4b1c      	ldr	r3, [pc, #112]	; (80a1100 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa4>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d1      	lsls	r1, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b1a      	ldr	r3, [pc, #104]	; (80a1104 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa8>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d2      	lsls	r2, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4b18      	ldr	r3, [pc, #96]	; (80a1108 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xac>)
 80a10a6:	681a      	ldr	r2, [r3, #0]
 80a10a8:	07d0      	lsls	r0, r2, #31
 80a10aa:	bf5c      	itt	pl
 80a10ac:	2201      	movpl	r2, #1
 80a10ae:	601a      	strpl	r2, [r3, #0]
 80a10b0:	4b16      	ldr	r3, [pc, #88]	; (80a110c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb0>)
 80a10b2:	681a      	ldr	r2, [r3, #0]
 80a10b4:	07d1      	lsls	r1, r2, #31
 80a10b6:	bf5c      	itt	pl
 80a10b8:	2201      	movpl	r2, #1
 80a10ba:	601a      	strpl	r2, [r3, #0]
 80a10bc:	4b14      	ldr	r3, [pc, #80]	; (80a1110 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb4>)
 80a10be:	681a      	ldr	r2, [r3, #0]
 80a10c0:	07d2      	lsls	r2, r2, #31
 80a10c2:	bf5c      	itt	pl
 80a10c4:	2201      	movpl	r2, #1
 80a10c6:	601a      	strpl	r2, [r3, #0]
 80a10c8:	4b12      	ldr	r3, [pc, #72]	; (80a1114 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb8>)
 80a10ca:	681a      	ldr	r2, [r3, #0]
 80a10cc:	07d0      	lsls	r0, r2, #31
 80a10ce:	bf5c      	itt	pl
 80a10d0:	2201      	movpl	r2, #1
 80a10d2:	601a      	strpl	r2, [r3, #0]
 80a10d4:	4b10      	ldr	r3, [pc, #64]	; (80a1118 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xbc>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d1      	lsls	r1, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b0e      	ldr	r3, [pc, #56]	; (80a111c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xc0>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d2      	lsls	r2, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4770      	bx	lr
 80a10ee:	bf00      	nop
 80a10f0:	200009f0 	.word	0x200009f0
 80a10f4:	200009ec 	.word	0x200009ec
 80a10f8:	200009e8 	.word	0x200009e8
 80a10fc:	200009e4 	.word	0x200009e4
 80a1100:	200009e0 	.word	0x200009e0
 80a1104:	200009dc 	.word	0x200009dc
 80a1108:	200009d8 	.word	0x200009d8
 80a110c:	200009d4 	.word	0x200009d4
 80a1110:	200009d0 	.word	0x200009d0
 80a1114:	200009cc 	.word	0x200009cc
 80a1118:	200009c8 	.word	0x200009c8
 80a111c:	200009c4 	.word	0x200009c4

080a1120 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE>:
 80a1120:	4b24      	ldr	r3, [pc, #144]	; (80a11b4 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x94>)
 80a1122:	681a      	ldr	r2, [r3, #0]
 80a1124:	07d0      	lsls	r0, r2, #31
 80a1126:	bf5c      	itt	pl
 80a1128:	2201      	movpl	r2, #1
 80a112a:	601a      	strpl	r2, [r3, #0]
 80a112c:	4b22      	ldr	r3, [pc, #136]	; (80a11b8 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x98>)
 80a112e:	681a      	ldr	r2, [r3, #0]
 80a1130:	07d1      	lsls	r1, r2, #31
 80a1132:	bf5c      	itt	pl
 80a1134:	2201      	movpl	r2, #1
 80a1136:	601a      	strpl	r2, [r3, #0]
 80a1138:	4b20      	ldr	r3, [pc, #128]	; (80a11bc <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x9c>)
 80a113a:	681a      	ldr	r2, [r3, #0]
 80a113c:	07d2      	lsls	r2, r2, #31
 80a113e:	bf5c      	itt	pl
 80a1140:	2201      	movpl	r2, #1
 80a1142:	601a      	strpl	r2, [r3, #0]
 80a1144:	4b1e      	ldr	r3, [pc, #120]	; (80a11c0 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa0>)
 80a1146:	681a      	ldr	r2, [r3, #0]
 80a1148:	07d0      	lsls	r0, r2, #31
 80a114a:	bf5c      	itt	pl
 80a114c:	2201      	movpl	r2, #1
 80a114e:	601a      	strpl	r2, [r3, #0]
 80a1150:	4b1c      	ldr	r3, [pc, #112]	; (80a11c4 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa4>)
 80a1152:	681a      	ldr	r2, [r3, #0]
 80a1154:	07d1      	lsls	r1, r2, #31
 80a1156:	bf5c      	itt	pl
 80a1158:	2201      	movpl	r2, #1
 80a115a:	601a      	strpl	r2, [r3, #0]
 80a115c:	4b1a      	ldr	r3, [pc, #104]	; (80a11c8 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa8>)
 80a115e:	681a      	ldr	r2, [r3, #0]
 80a1160:	07d2      	lsls	r2, r2, #31
 80a1162:	bf5c      	itt	pl
 80a1164:	2201      	movpl	r2, #1
 80a1166:	601a      	strpl	r2, [r3, #0]
 80a1168:	4b18      	ldr	r3, [pc, #96]	; (80a11cc <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xac>)
 80a116a:	681a      	ldr	r2, [r3, #0]
 80a116c:	07d0      	lsls	r0, r2, #31
 80a116e:	bf5c      	itt	pl
 80a1170:	2201      	movpl	r2, #1
 80a1172:	601a      	strpl	r2, [r3, #0]
 80a1174:	4b16      	ldr	r3, [pc, #88]	; (80a11d0 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb0>)
 80a1176:	681a      	ldr	r2, [r3, #0]
 80a1178:	07d1      	lsls	r1, r2, #31
 80a117a:	bf5c      	itt	pl
 80a117c:	2201      	movpl	r2, #1
 80a117e:	601a      	strpl	r2, [r3, #0]
 80a1180:	4b14      	ldr	r3, [pc, #80]	; (80a11d4 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb4>)
 80a1182:	681a      	ldr	r2, [r3, #0]
 80a1184:	07d2      	lsls	r2, r2, #31
 80a1186:	bf5c      	itt	pl
 80a1188:	2201      	movpl	r2, #1
 80a118a:	601a      	strpl	r2, [r3, #0]
 80a118c:	4b12      	ldr	r3, [pc, #72]	; (80a11d8 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb8>)
 80a118e:	681a      	ldr	r2, [r3, #0]
 80a1190:	07d0      	lsls	r0, r2, #31
 80a1192:	bf5c      	itt	pl
 80a1194:	2201      	movpl	r2, #1
 80a1196:	601a      	strpl	r2, [r3, #0]
 80a1198:	4b10      	ldr	r3, [pc, #64]	; (80a11dc <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xbc>)
 80a119a:	681a      	ldr	r2, [r3, #0]
 80a119c:	07d1      	lsls	r1, r2, #31
 80a119e:	bf5c      	itt	pl
 80a11a0:	2201      	movpl	r2, #1
 80a11a2:	601a      	strpl	r2, [r3, #0]
 80a11a4:	4b0e      	ldr	r3, [pc, #56]	; (80a11e0 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xc0>)
 80a11a6:	681a      	ldr	r2, [r3, #0]
 80a11a8:	07d2      	lsls	r2, r2, #31
 80a11aa:	bf5c      	itt	pl
 80a11ac:	2201      	movpl	r2, #1
 80a11ae:	601a      	strpl	r2, [r3, #0]
 80a11b0:	4770      	bx	lr
 80a11b2:	bf00      	nop
 80a11b4:	20000a20 	.word	0x20000a20
 80a11b8:	20000a1c 	.word	0x20000a1c
 80a11bc:	20000a18 	.word	0x20000a18
 80a11c0:	20000a14 	.word	0x20000a14
 80a11c4:	20000a10 	.word	0x20000a10
 80a11c8:	20000a0c 	.word	0x20000a0c
 80a11cc:	20000a08 	.word	0x20000a08
 80a11d0:	20000a04 	.word	0x20000a04
 80a11d4:	20000a00 	.word	0x20000a00
 80a11d8:	200009fc 	.word	0x200009fc
 80a11dc:	200009f8 	.word	0x200009f8
 80a11e0:	200009f4 	.word	0x200009f4

080a11e4 <__cxa_atexit>:
 80a11e4:	b538      	push	{r3, r4, r5, lr}
 80a11e6:	4605      	mov	r5, r0
 80a11e8:	4804      	ldr	r0, [pc, #16]	; (80a11fc <__cxa_atexit+0x18>)
 80a11ea:	460c      	mov	r4, r1
 80a11ec:	4613      	mov	r3, r2
 80a11ee:	b120      	cbz	r0, 80a11fa <__cxa_atexit+0x16>
 80a11f0:	2002      	movs	r0, #2
 80a11f2:	4629      	mov	r1, r5
 80a11f4:	4622      	mov	r2, r4
 80a11f6:	f3af 8000 	nop.w
 80a11fa:	bd38      	pop	{r3, r4, r5, pc}
 80a11fc:	00000000 	.word	0x00000000

080a1200 <memcpy>:
 80a1200:	b510      	push	{r4, lr}
 80a1202:	1e43      	subs	r3, r0, #1
 80a1204:	440a      	add	r2, r1
 80a1206:	4291      	cmp	r1, r2
 80a1208:	d004      	beq.n	80a1214 <memcpy+0x14>
 80a120a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a120e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1212:	e7f8      	b.n	80a1206 <memcpy+0x6>
 80a1214:	bd10      	pop	{r4, pc}

080a1216 <memset>:
 80a1216:	4603      	mov	r3, r0
 80a1218:	4402      	add	r2, r0
 80a121a:	4293      	cmp	r3, r2
 80a121c:	d002      	beq.n	80a1224 <memset+0xe>
 80a121e:	f803 1b01 	strb.w	r1, [r3], #1
 80a1222:	e7fa      	b.n	80a121a <memset+0x4>
 80a1224:	4770      	bx	lr

080a1226 <strcmp>:
 80a1226:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a122a:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a122e:	2a01      	cmp	r2, #1
 80a1230:	bf28      	it	cs
 80a1232:	429a      	cmpcs	r2, r3
 80a1234:	d0f7      	beq.n	80a1226 <strcmp>
 80a1236:	1ad0      	subs	r0, r2, r3
 80a1238:	4770      	bx	lr

080a123a <strlen>:
 80a123a:	4603      	mov	r3, r0
 80a123c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1240:	2a00      	cmp	r2, #0
 80a1242:	d1fb      	bne.n	80a123c <strlen+0x2>
 80a1244:	1a18      	subs	r0, r3, r0
 80a1246:	3801      	subs	r0, #1
 80a1248:	4770      	bx	lr

080a124a <link_code_end>:
	...

080a124c <dynalib_user>:
 80a124c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a125c:	0000 0000                                   ....

080a1260 <_ZL9style_css>:
 80a1260:	7468 6c6d 687b 6965 6867 3a74 3120 3030     html{height: 100
 80a1270:	3b25 6d20 7261 6967 3a6e 6120 7475 3b6f     %; margin: auto;
 80a1280:	6220 6361 676b 6f72 6e75 2d64 6f63 6f6c      background-colo
 80a1290:	3a72 2320 6131 6261 3065 627d 646f 7b79     r: #1aabe0}body{
 80a12a0:	2a2f 6f62 2d78 6973 697a 676e 203a 6f62     /*box-sizing: bo
 80a12b0:	6472 7265 622d 786f 2a3b 202f 696d 2d6e     rder-box;*/ min-
 80a12c0:	6568 6769 7468 203a 3031 2530 203b 6170     height: 100%; pa
 80a12d0:	6464 6e69 3a67 3220 7030 3b78 6220 6361     dding: 20px; bac
 80a12e0:	676b 6f72 6e75 2d64 6f63 6f6c 3a72 2320     kground-color: #
 80a12f0:	6131 6261 3065 203b 6f66 746e 662d 6d61     1aabe0; font-fam
 80a1300:	6c69 3a79 2720 754c 6963 6164 5320 6e61     ily: 'Lucida San
 80a1310:	2073 6e55 6369 646f 2765 202c 4c27 6375     s Unicode', 'Luc
 80a1320:	6469 2061 7247 6e61 6564 2c27 7320 6e61     ida Grande', san
 80a1330:	2d73 6573 6972 3b66 6620 6e6f 2d74 6577     s-serif; font-we
 80a1340:	6769 7468 203a 6f6e 6d72 6c61 203b 6f63     ight: normal; co
 80a1350:	6f6c 3a72 7720 6968 6574 203b 616d 6772     lor: white; marg
 80a1360:	6e69 742d 706f 203a 3b30 6d20 7261 6967     in-top: 0; margi
 80a1370:	2d6e 656c 7466 203a 7561 6f74 203b 616d     n-left: auto; ma
 80a1380:	6772 6e69 722d 6769 7468 203a 7561 6f74     rgin-right: auto
 80a1390:	203b 616d 6772 6e69 622d 746f 6f74 3a6d     ; margin-bottom:
 80a13a0:	3020 203b 616d 2d78 6977 7464 3a68 3420      0; max-width: 4
 80a13b0:	3030 7870 203b 6574 7478 612d 696c 6e67     00px; text-align
 80a13c0:	203a 6563 746e 7265 203b 2a2f 6f62 6472     : center; /*bord
 80a13d0:	7265 203a 7031 2078 6f73 696c 2064 3623     er: 1px solid #6
 80a13e0:	3665 3765 3b30 2f2a 6220 726f 6564 2d72     e6e70;*/ border-
 80a13f0:	6172 6964 7375 203a 7034 7d78 6964 7b76     radius: 4px}div{
 80a1400:	616d 6772 6e69 742d 706f 203a 3532 7870     margin-top: 25px
 80a1410:	203b 616d 6772 6e69 622d 746f 6f74 3a6d     ; margin-bottom:
 80a1420:	3220 7035 7d78 3168 6d7b 7261 6967 2d6e      25px}h1{margin-
 80a1430:	6f74 3a70 3220 7035 3b78 6d20 7261 6967     top: 25px; margi
 80a1440:	2d6e 6f62 7474 6d6f 203a 3532 7870 627d     n-bottom: 25px}b
 80a1450:	7475 6f74 7b6e 6f62 6472 7265 632d 6c6f     utton{border-col
 80a1460:	726f 203a 3123 3763 6235 3b65 6220 6361     or: #1c75be; bac
 80a1470:	676b 6f72 6e75 2d64 6f63 6f6c 3a72 2320     kground-color: #
 80a1480:	6331 3537 6562 203b 6f63 6f6c 3a72 7720     1c75be; color: w
 80a1490:	6968 6574 203b 6f62 6472 7265 722d 6461     hite; border-rad
 80a14a0:	7569 3a73 3520 7870 203b 6568 6769 7468     ius: 5px; height
 80a14b0:	203a 3033 7870 203b 6f66 746e 732d 7a69     : 30px; font-siz
 80a14c0:	3a65 3120 7035 3b78 6620 6e6f 2d74 6577     e: 15px; font-we
 80a14d0:	6769 7468 203a 6f62 646c 627d 7475 6f74     ight: bold}butto
 80a14e0:	2e6e 6e69 7570 2d74 6568 706c 7265 627b     n.input-helper{b
 80a14f0:	6361 676b 6f72 6e75 2d64 6f63 6f6c 3a72     ackground-color:
 80a1500:	2320 6562 6562 6562 203b 6f62 6472 7265      #bebebe; border
 80a1510:	632d 6c6f 726f 203a 6223 6265 6265 3b65     -color: #bebebe;
 80a1520:	6320 6c6f 726f 203a 3623 3665 3765 3b30      color: #6e6e70;
 80a1530:	6d20 7261 6967 2d6e 656c 7466 203a 7033      margin-left: 3p
 80a1540:	7d78 7562 7474 6e6f 643a 7369 6261 656c     x}button:disable
 80a1550:	7b64 6162 6b63 7267 756f 646e 632d 6c6f     d{background-col
 80a1560:	726f 203a 6223 6265 6265 3b65 6220 726f     or: #bebebe; bor
 80a1570:	6564 2d72 6f63 6f6c 3a72 2320 6562 6562     der-color: #bebe
 80a1580:	6562 203b 6f63 6f6c 3a72 7720 6968 6574     be; color: white
 80a1590:	697d 706e 7475 745b 7079 3d65 7427 7865     }input[type='tex
 80a15a0:	2774 2c5d 6920 706e 7475 745b 7079 3d65     t'], input[type=
 80a15b0:	7027 7361 7773 726f 2764 7b5d 6162 6b63     'password']{back
 80a15c0:	7267 756f 646e 632d 6c6f 726f 203a 6877     ground-color: wh
 80a15d0:	7469 3b65 6320 6c6f 726f 203a 3623 3665     ite; color: #6e6
 80a15e0:	3765 3b30 6220 726f 6564 2d72 6f63 6f6c     e70; border-colo
 80a15f0:	3a72 7720 6968 6574 203b 6f62 6472 7265     r: white; border
 80a1600:	722d 6461 7569 3a73 3520 7870 203b 6568     -radius: 5px; he
 80a1610:	6769 7468 203a 3532 7870 203b 6574 7478     ight: 25px; text
 80a1620:	612d 696c 6e67 203a 6563 746e 7265 203b     -align: center; 
 80a1630:	6f66 746e 732d 7a69 3a65 3120 7035 7d78     font-size: 15px}
 80a1640:	6e69 7570 3a74 6964 6173 6c62 6465 627b     input:disabled{b
 80a1650:	6361 676b 6f72 6e75 2d64 6f63 6f6c 3a72     ackground-color:
 80a1660:	2320 6562 6562 6562 203b 6f62 6472 7265      #bebebe; border
 80a1670:	632d 6c6f 726f 203a 6223 6265 6265 7d65     -color: #bebebe}
 80a1680:	6e69 7570 5b74 7974 6570 273d 6172 6964     input[type='radi
 80a1690:	276f 7b5d 6f70 6973 6974 6e6f 203a 6572     o']{position: re
 80a16a0:	616c 6974 6576 203b 6f62 7474 6d6f 203a     lative; bottom: 
 80a16b0:	302d 332e 6533 3b6d 6d20 7261 6967 3a6e     -0.33em; margin:
 80a16c0:	3020 203b 6f62 6472 7265 203a 3b30 6820      0; border: 0; h
 80a16d0:	6965 6867 3a74 3120 352e 6d65 203b 6977     eight: 1.5em; wi
 80a16e0:	7464 3a68 3120 2535 6c7d 6261 6c65 707b     dth: 15%}label{p
 80a16f0:	6461 6964 676e 742d 706f 203a 7037 3b78     adding-top: 7px;
 80a1700:	7020 6461 6964 676e 622d 746f 6f74 3a6d      padding-bottom:
 80a1710:	3720 7870 203b 6170 6464 6e69 2d67 656c      7px; padding-le
 80a1720:	7466 203a 2535 203b 6964 7073 616c 3a79     ft: 5%; display:
 80a1730:	6920 6c6e 6e69 2d65 6c62 636f 3b6b 7720      inline-block; w
 80a1740:	6469 6874 203a 3038 3b25 7420 7865 2d74     idth: 80%; text-
 80a1750:	6c61 6769 3a6e 6c20 6665 7d74 6e69 7570     align: left}inpu
 80a1760:	5b74 7974 6570 273d 6172 6964 276f 3a5d     t[type='radio']:
 80a1770:	6863 6365 656b 2b64 616c 6562 7b6c 6f66     checked+label{fo
 80a1780:	746e 772d 6965 6867 3a74 6220 6c6f 3b64     nt-weight: bold;
 80a1790:	6320 6c6f 726f 203a 3123 3763 6235 7d65      color: #1c75be}
 80a17a0:	732e 6163 6e6e 6e69 2d67 7265 6f72 7b72     .scanning-error{
 80a17b0:	6f66 746e 772d 6965 6867 3a74 6220 6c6f     font-weight: bol
 80a17c0:	3b64 7420 7865 2d74 6c61 6769 3a6e 6320     d; text-align: c
 80a17d0:	6e65 6574 7d72 722e 6461 6f69 642d 7669     enter}.radio-div
 80a17e0:	627b 786f 732d 7a69 6e69 3a67 6220 726f     {box-sizing: bor
 80a17f0:	6564 2d72 6f62 3b78 6d20 7261 6967 3a6e     der-box; margin:
 80a1800:	3220 7870 203b 616d 6772 6e69 6c2d 6665      2px; margin-lef
 80a1810:	3a74 6120 7475 3b6f 6d20 7261 6967 2d6e     t: auto; margin-
 80a1820:	6972 6867 3a74 6120 7475 3b6f 6220 6361     right: auto; bac
 80a1830:	676b 6f72 6e75 2d64 6f63 6f6c 3a72 7720     kground-color: w
 80a1840:	6968 6574 203b 6f63 6f6c 3a72 2320 6536     hite; color: #6e
 80a1850:	6536 3037 203b 6f62 6472 7265 203a 7031     6e70; border: 1p
 80a1860:	2078 6f73 696c 2064 3623 3665 3765 3b30     x solid #6e6e70;
 80a1870:	6220 726f 6564 2d72 6172 6964 7375 203a      border-radius: 
 80a1880:	7033 3b78 7720 6469 6874 203a 3031 2530     3px; width: 100%
 80a1890:	203b 6170 6464 6e69 3a67 3520 7870 237d     ; padding: 5px}#
 80a18a0:	656e 7774 726f 736b 642d 7669 6d7b 7261     networks-div{mar
 80a18b0:	6967 2d6e 656c 7466 203a 7561 6f74 203b     gin-left: auto; 
 80a18c0:	616d 6772 6e69 722d 6769 7468 203a 7561     margin-right: au
 80a18d0:	6f74 203b 6574 7478 612d 696c 6e67 203a     to; text-align: 
 80a18e0:	656c 7466 237d 6564 6976 6563 692d 7b64     left}#device-id{
 80a18f0:	6574 7478 612d 696c 6e67 203a 6563 746e     text-align: cent
 80a1900:	7265 237d 6373 6e61 622d 7475 6f74 7b6e     er}#scan-button{
 80a1910:	696d 2d6e 6977 7464 3a68 3120 3030 7870     min-width: 100px
 80a1920:	237d 6f63 6e6e 6365 2d74 7562 7474 6e6f     }#connect-button
 80a1930:	647b 7369 6c70 7961 203a 6c62 636f 3b6b     {display: block;
 80a1940:	6d20 6e69 772d 6469 6874 203a 3031 7030      min-width: 100p
 80a1950:	3b78 6d20 7261 6967 2d6e 6f74 3a70 3120     x; margin-top: 1
 80a1960:	7030 3b78 6d20 7261 6967 2d6e 656c 7466     0px; margin-left
 80a1970:	203a 7561 6f74 203b 616d 6772 6e69 722d     : auto; margin-r
 80a1980:	6769 7468 203a 7561 6f74 203b 616d 6772     ight: auto; marg
 80a1990:	6e69 622d 746f 6f74 3a6d 3220 7030 7d78     in-bottom: 20px}
 80a19a0:	7023 7361 7773 726f 7b64 616d 6772 6e69     #password{margin
 80a19b0:	742d 706f 203a 3032 7870 203b 616d 6772     -top: 20px; marg
 80a19c0:	6e69 622d 746f 6f74 3a6d 3120 7030 7d78     in-bottom: 10px}
	...

080a19d1 <_ZL8prng4_js>:
 80a19d1:	7566 636e 6974 6e6f 4120 6372 6f66 7275     function Arcfour
 80a19e1:	2928 747b 6968 2e73 3d69 3b30 6874 7369     (){this.i=0;this
 80a19f1:	6a2e 303d 743b 6968 2e73 3d53 656e 2077     .j=0;this.S=new 
 80a1a01:	7241 6172 2879 3b29 667d 6e75 7463 6f69     Array();}functio
 80a1a11:	206e 5241 3443 6e69 7469 6128 7b29 6176     n ARC4init(a){va
 80a1a21:	2072 2c62 2c63 3b64 6f66 2872 3d62 3b30     r b,c,d;for(b=0;
 80a1a31:	3c62 3532 3b36 2b2b 2962 6874 7369 532e     b<256;++b)this.S
 80a1a41:	625b 3d5d 3b62 3d63 3b30 6f66 2872 3d62     [b]=b;c=0;for(b=
 80a1a51:	3b30 3c62 3532 3b36 2b2b 2962 637b 283d     0;b<256;++b){c=(
 80a1a61:	2b63 6874 7369 532e 625b 2b5d 5b61 2562     c+this.S[b]+a[b%
 80a1a71:	2e61 656c 676e 6874 295d 3226 3535 643b     a.length])&255;d
 80a1a81:	743d 6968 2e73 5b53 5d62 743b 6968 2e73     =this.S[b];this.
 80a1a91:	5b53 5d62 743d 6968 2e73 5b53 5d63 743b     S[b]=this.S[c];t
 80a1aa1:	6968 2e73 5b53 5d63 643d 7d3b 6874 7369     his.S[c]=d;}this
 80a1ab1:	692e 303d 743b 6968 2e73 3d6a 3b30 667d     .i=0;this.j=0;}f
 80a1ac1:	6e75 7463 6f69 206e 5241 3443 656e 7478     unction ARC4next
 80a1ad1:	2928 767b 7261 6120 743b 6968 2e73 3d69     (){var a;this.i=
 80a1ae1:	7428 6968 2e73 2b69 2931 3226 3535 743b     (this.i+1)&255;t
 80a1af1:	6968 2e73 3d6a 7428 6968 2e73 2b6a 6874     his.j=(this.j+th
 80a1b01:	7369 532e 745b 6968 2e73 5d69 2629 3532     is.S[this.i])&25
 80a1b11:	3b35 3d61 6874 7369 532e 745b 6968 2e73     5;a=this.S[this.
 80a1b21:	5d69 743b 6968 2e73 5b53 6874 7369 692e     i];this.S[this.i
 80a1b31:	3d5d 6874 7369 532e 745b 6968 2e73 5d6a     ]=this.S[this.j]
 80a1b41:	743b 6968 2e73 5b53 6874 7369 6a2e 3d5d     ;this.S[this.j]=
 80a1b51:	3b61 6572 7574 6e72 7420 6968 2e73 5b53     a;return this.S[
 80a1b61:	6128 742b 6968 2e73 5b53 6874 7369 692e     (a+this.S[this.i
 80a1b71:	295d 3226 3535 3b5d 417d 6372 6f66 7275     ])&255];}Arcfour
 80a1b81:	702e 6f72 6f74 7974 6570 692e 696e 3d74     .prototype.init=
 80a1b91:	5241 3443 6e69 7469 413b 6372 6f66 7275     ARC4init;Arcfour
 80a1ba1:	702e 6f72 6f74 7974 6570 6e2e 7865 3d74     .prototype.next=
 80a1bb1:	5241 3443 656e 7478 663b 6e75 7463 6f69     ARC4next;functio
 80a1bc1:	206e 7270 676e 6e5f 7765 7473 7461 2865     n prng_newstate(
 80a1bd1:	7b29 6572 7574 6e72 6e20 7765 4120 6372     ){return new Arc
 80a1be1:	6f66 7275 2928 7d3b 6176 2072 6e72 5f67     four();}var rng_
 80a1bf1:	7370 7a69 3d65 3532 3b36 7600                    psize=256;.

080a1bfc <_ZL9jsbn_1_js>:
 80a1bfc:	6176 2072 6264 7469 3b73 6176 2072 6163     var dbits;var ca
 80a1c0c:	616e 7972 303d 6478 6165 6264 6565 6366     nary=0xdeadbeefc
 80a1c1c:	6661 3b65 6176 2072 5f6a 6d6c 283d 6328     afe;var j_lm=((c
 80a1c2c:	6e61 7261 2679 7830 6666 6666 6666 3d29     anary&0xffffff)=
 80a1c3c:	303d 6578 6366 6661 2965 663b 6e75 7463     =0xefcafe);funct
 80a1c4c:	6f69 206e 6942 4967 746e 6765 7265 6128     ion BigInteger(a
 80a1c5c:	622c 632c 7b29 6669 6128 3d21 756e 6c6c     ,b,c){if(a!=null
 80a1c6c:	6929 2866 6e27 6d75 6562 2772 3d3d 7974     )if('number'==ty
 80a1c7c:	6570 666f 6120 7429 6968 2e73 7266 6d6f     peof a)this.from
 80a1c8c:	754e 626d 7265 6128 622c 632c 3b29 6c65     Number(a,b,c);el
 80a1c9c:	6573 6920 2866 3d62 6e3d 6c75 266c 2726     se if(b==null&&'
 80a1cac:	7473 6972 676e 2127 743d 7079 6f65 2066     string'!=typeof 
 80a1cbc:	2961 6874 7369 662e 6f72 536d 7274 6e69     a)this.fromStrin
 80a1ccc:	2867 2c61 3532 2936 653b 736c 2065 6874     g(a,256);else th
 80a1cdc:	7369 662e 6f72 536d 7274 6e69 2867 2c61     is.fromString(a,
 80a1cec:	2962 7d3b 7566 636e 6974 6e6f 6e20 6962     b);}function nbi
 80a1cfc:	2928 727b 7465 7275 206e 656e 2077 6942     (){return new Bi
 80a1d0c:	4967 746e 6765 7265 6e28 6c75 296c 7d3b     gInteger(null);}
 80a1d1c:	7566 636e 6974 6e6f 6120 316d 6128 622c     function am1(a,b
 80a1d2c:	632c 642c 652c 662c 7b29 6877 6c69 2865     ,c,d,e,f){while(
 80a1d3c:	2d2d 3e66 303d 7b29 6176 2072 3d67 2a62     --f>=0){var g=b*
 80a1d4c:	6874 7369 615b 2b2b 2b5d 5b63 5d64 652b     this[a++]+c[d]+e
 80a1d5c:	653b 4d3d 7461 2e68 6c66 6f6f 2872 2f67     ;e=Math.floor(g/
 80a1d6c:	7830 3034 3030 3030 2930 633b 645b 2b2b     0x4000000);c[d++
 80a1d7c:	3d5d 2667 7830 6633 6666 6666 3b66 727d     ]=g&0x3ffffff;}r
 80a1d8c:	7465 7275 206e 3b65 667d 6e75 7463 6f69     eturn e;}functio
 80a1d9c:	206e 6d61 2832 2c61 2c62 2c63 2c64 2c65     n am2(a,b,c,d,e,
 80a1dac:	2966 767b 7261 6720 623d 3026 3778 6666     f){var g=b&0x7ff
 80a1dbc:	2c66 3d68 3e62 313e 3b35 6877 6c69 2865     f,h=b>>15;while(
 80a1dcc:	2d2d 3e66 303d 7b29 6176 2072 3d69 6874     --f>=0){var i=th
 80a1ddc:	7369 615b 265d 7830 6637 6666 763b 7261     is[a]&0x7fff;var
 80a1dec:	6a20 743d 6968 5b73 2b61 5d2b 3e3e 3531      j=this[a++]>>15
 80a1dfc:	763b 7261 6b20 683d 692a 6a2b 672a 693b     ;var k=h*i+j*g;i
 80a1e0c:	673d 692a 282b 6b28 3026 3778 6666 2966     =g*i+((k&0x7fff)
 80a1e1c:	3c3c 3531 2b29 5b63 5d64 282b 2665 7830     <<15)+c[d]+(e&0x
 80a1e2c:	6633 6666 6666 6666 3b29 3d65 6928 3e3e     3fffffff);e=(i>>
 80a1e3c:	333e 2930 282b 3e6b 3e3e 3531 2b29 2a68     >30)+(k>>>15)+h*
 80a1e4c:	2b6a 6528 3e3e 333e 2930 633b 645b 2b2b     j+(e>>>30);c[d++
 80a1e5c:	3d5d 2669 7830 6633 6666 6666 6666 7d3b     ]=i&0x3fffffff;}
 80a1e6c:	6572 7574 6e72 6520 7d3b 7566 636e 6974     return e;}functi
 80a1e7c:	6e6f 6120 336d 6128 622c 632c 642c 652c     on am3(a,b,c,d,e
 80a1e8c:	662c 7b29 6176 2072 3d67 2662 7830 6633     ,f){var g=b&0x3f
 80a1e9c:	6666 682c 623d 3e3e 3431 773b 6968 656c     ff,h=b>>14;while
 80a1eac:	2d28 662d 3d3e 2930 767b 7261 6920 743d     (--f>=0){var i=t
 80a1ebc:	6968 5b73 5d61 3026 3378 6666 3b66 6176     his[a]&0x3fff;va
 80a1ecc:	2072 3d6a 6874 7369 615b 2b2b 3e5d 313e     r j=this[a++]>>1
 80a1edc:	3b34 6176 2072 3d6b 2a68 2b69 2a6a 3b67     4;var k=h*i+j*g;
 80a1eec:	3d69 2a67 2b69 2828 266b 7830 6633 6666     i=g*i+((k&0x3fff
 80a1efc:	3c29 313c 2934 632b 645b 2b5d 3b65 3d65     )<<14)+c[d]+e;e=
 80a1f0c:	6928 3e3e 3832 2b29 6b28 3e3e 3431 2b29     (i>>28)+(k>>14)+
 80a1f1c:	2a68 3b6a 5b63 2b64 5d2b 693d 3026 6678     h*j;c[d++]=i&0xf
 80a1f2c:	6666 6666 6666 7d3b 6572 7574 6e72 6520     ffffff;}return e
 80a1f3c:	7d3b 6669 6a28 6c5f 266d 2826 616e 6976     ;}if(j_lm&&(navi
 80a1f4c:	6167 6f74 2e72 7061 4e70 6d61 3d65 273d     gator.appName=='
 80a1f5c:	694d 7263 736f 666f 2074 6e49 6574 6e72     Microsoft Intern
 80a1f6c:	7465 4520 7078 6f6c 6572 2772 2929 427b     et Explorer')){B
 80a1f7c:	6769 6e49 6574 6567 2e72 7270 746f 746f     igInteger.protot
 80a1f8c:	7079 2e65 6d61 613d 326d 643b 6962 7374     ype.am=am2;dbits
 80a1f9c:	333d 3b30 657d 736c 2065 6669 6a28 6c5f     =30;}else if(j_l
 80a1fac:	266d 2826 616e 6976 6167 6f74 2e72 7061     m&&(navigator.ap
 80a1fbc:	4e70 6d61 2165 273d 654e 7374 6163 6570     pName!='Netscape
 80a1fcc:	2927 7b29 6942 4967 746e 6765 7265 702e     ')){BigInteger.p
 80a1fdc:	6f72 6f74 7974 6570 612e 3d6d 6d61 3b31     rototype.am=am1;
 80a1fec:	6264 7469 3d73 3632 7d3b 6c65 6573 427b     dbits=26;}else{B
 80a1ffc:	6769 6e49 6574 6567 2e72 7270 746f 746f     igInteger.protot
 80a200c:	7079 2e65 6d61 613d 336d 643b 6962 7374     ype.am=am3;dbits
 80a201c:	323d 3b38 427d 6769 6e49 6574 6567 2e72     =28;}BigInteger.
 80a202c:	7270 746f 746f 7079 2e65 4244 643d 6962     prototype.DB=dbi
 80a203c:	7374 423b 6769 6e49 6574 6567 2e72 7270     ts;BigInteger.pr
 80a204c:	746f 746f 7079 2e65 4d44 283d 3128 3c3c     ototype.DM=((1<<
 80a205c:	6264 7469 2973 312d 3b29 6942 4967 746e     dbits)-1);BigInt
 80a206c:	6765 7265 702e 6f72 6f74 7974 6570 442e     eger.prototype.D
 80a207c:	3d56 3128 3c3c 6264 7469 2973 763b 7261     V=(1<<dbits);var
 80a208c:	4220 5f49 5046 353d 3b32 6942 4967 746e      BI_FP=52;BigInt
 80a209c:	6765 7265 702e 6f72 6f74 7974 6570 462e     eger.prototype.F
 80a20ac:	3d56 614d 6874 702e 776f 3228 422c 5f49     V=Math.pow(2,BI_
 80a20bc:	5046 3b29 6942 4967 746e 6765 7265 702e     FP);BigInteger.p
 80a20cc:	6f72 6f74 7974 6570 462e 3d31 4942 465f     rototype.F1=BI_F
 80a20dc:	2d50 6264 7469 3b73 6942 4967 746e 6765     P-dbits;BigInteg
 80a20ec:	7265 702e 6f72 6f74 7974 6570 462e 3d32     er.prototype.F2=
 80a20fc:	2a32 6264 7469 2d73 4942 465f 3b50 6176     2*dbits-BI_FP;va
 80a210c:	2072 4942 525f 3d4d 3027 3231 3433 3635     r BI_RM='0123456
 80a211c:	3837 6139 6362 6564 6766 6968 6b6a 6d6c     789abcdefghijklm
 80a212c:	6f6e 7170 7372 7574 7776 7978 277a 763b     nopqrstuvwxyz';v
 80a213c:	7261 4220 5f49 4352 6e3d 7765 4120 7272     ar BI_RC=new Arr
 80a214c:	7961 2928 763b 7261 7220 2c72 7676 723b     ay();var rr,vv;r
 80a215c:	3d72 3027 2e27 6863 7261 6f43 6564 7441     r='0'.charCodeAt
 80a216c:	3028 3b29 6f66 2872 7676 303d 763b 3c76     (0);for(vv=0;vv<
 80a217c:	393d 2b3b 762b 2976 4942 525f 5b43 7272     =9;++vv)BI_RC[rr
 80a218c:	2b2b 3d5d 7676 723b 3d72 6127 2e27 6863     ++]=vv;rr='a'.ch
 80a219c:	7261 6f43 6564 7441 3028 3b29 6f66 2872     arCodeAt(0);for(
 80a21ac:	7676 313d 3b30 7676 333c 3b36 2b2b 7676     vv=10;vv<36;++vv
 80a21bc:	4229 5f49 4352 725b 2b72 5d2b 763d 3b76     )BI_RC[rr++]=vv;
 80a21cc:	7272 273d 2741 632e 6168 4372 646f 4165     rr='A'.charCodeA
 80a21dc:	2874 2930 663b 726f 7628 3d76 3031 763b     t(0);for(vv=10;v
 80a21ec:	3c76 3633 2b3b 762b 2976 4942 525f 5b43     v<36;++vv)BI_RC[
 80a21fc:	7272 2b2b 3d5d 7676 663b 6e75 7463 6f69     rr++]=vv;functio
 80a220c:	206e 6e69 3274 6863 7261 6128 7b29 6572     n int2char(a){re
 80a221c:	7574 6e72 4220 5f49 4d52 632e 6168 4172     turn BI_RM.charA
 80a222c:	2874 2961 7d3b 7566 636e 6974 6e6f 6920     t(a);}function i
 80a223c:	746e 7441 6128 622c 7b29 6176 2072 3d63     ntAt(a,b){var c=
 80a224c:	4942 525f 5b43 2e61 6863 7261 6f43 6564     BI_RC[a.charCode
 80a225c:	7441 6228 5d29 723b 7465 7275 286e 3d63     At(b)];return(c=
 80a226c:	6e3d 6c75 296c 2d3f 3a31 3b63 667d 6e75     =null)?-1:c;}fun
 80a227c:	7463 6f69 206e 6e62 4370 706f 5479 286f     ction bnpCopyTo(
 80a228c:	2961 667b 726f 7628 7261 6220 743d 6968     a){for(var b=thi
 80a229c:	2e73 2d74 3b31 3e62 303d 2d3b 622d 6129     s.t-1;b>=0;--b)a
 80a22ac:	625b 3d5d 6874 7369 625b 3b5d 2e61 3d74     [b]=this[b];a.t=
 80a22bc:	6874 7369 742e 613b 732e 743d 6968 2e73     this.t;a.s=this.
 80a22cc:	3b73 667d 6e75 7463 6f69 206e 6e62 4670     s;}function bnpF
 80a22dc:	6f72 496d 746e 6128 7b29 6874 7369 742e     romInt(a){this.t
 80a22ec:	313d 743b 6968 2e73 3d73 6128 303c 3f29     =1;this.s=(a<0)?
 80a22fc:	312d 303a 693b 2866 3e61 2930 6874 7369     -1:0;if(a>0)this
 80a230c:	305b 3d5d 3b61 6c65 6573 6920 2866 3c61     [0]=a;else if(a<
 80a231c:	312d 7429 6968 5b73 5d30 613d 742b 6968     -1)this[0]=a+thi
 80a232c:	2e73 5644 653b 736c 2065 6874 7369 742e     s.DV;else this.t
 80a233c:	303d 7d3b 7566 636e 6974 6e6f 6e20 7662     =0;}function nbv
 80a234c:	6128 7b29 6176 2072 3d62 626e 2869 3b29     (a){var b=nbi();
 80a235c:	2e62 7266 6d6f 6e49 2874 2961 723b 7465     b.fromInt(a);ret
 80a236c:	7275 206e 3b62 667d 6e75 7463 6f69 206e     urn b;}function 
 80a237c:	6e62 4670 6f72 536d 7274 6e69 2867 2c61     bnpFromString(a,
 80a238c:	2962 767b 7261 6320 693b 2866 3d62 313d     b){var c;if(b==1
 80a239c:	2936 3d63 3b34 6c65 6573 6920 2866 3d62     6)c=4;else if(b=
 80a23ac:	383d 6329 333d 653b 736c 2065 6669 6228     =8)c=3;else if(b
 80a23bc:	3d3d 3532 2936 3d63 3b38 6c65 6573 6920     ==256)c=8;else i
 80a23cc:	2866 3d62 323d 6329 313d 653b 736c 2065     f(b==2)c=1;else 
 80a23dc:	6669 6228 3d3d 3233 6329 353d 653b 736c     if(b==32)c=5;els
 80a23ec:	2065 6669 6228 3d3d 2934 3d63 3b32 6c65     e if(b==4)c=2;el
 80a23fc:	6573 747b 6968 2e73 7266 6d6f 6152 6964     se{this.fromRadi
 80a240c:	2878 2c61 2962 723b 7465 7275 3b6e 747d     x(a,b);return;}t
 80a241c:	6968 2e73 3d74 3b30 6874 7369 732e 303d     his.t=0;this.s=0
 80a242c:	763b 7261 6420 613d 6c2e 6e65 7467 2c68     ;var d=a.length,
 80a243c:	3d65 6166 736c 2c65 3d66 3b30 6877 6c69     e=false,f=0;whil
 80a244c:	2865 2d2d 3e64 303d 7b29 6176 2072 3d67     e(--d>=0){var g=
 80a245c:	6328 3d3d 2938 613f 645b 265d 7830 6666     (c==8)?a[d]&0xff
 80a246c:	693a 746e 7441 6128 642c 3b29 6669 6728     :intAt(a,d);if(g
 80a247c:	303c 7b29 6669 6128 632e 6168 4172 2874     <0){if(a.charAt(
 80a248c:	2964 3d3d 2d27 2927 3d65 7274 6575 633b     d)=='-')e=true;c
 80a249c:	6e6f 6974 756e 3b65 657d 663d 6c61 6573     ontinue;}e=false
 80a24ac:	693b 2866 3d66 303d 7429 6968 5b73 6874     ;if(f==0)this[th
 80a24bc:	7369 742e 2b2b 3d5d 3b67 6c65 6573 6920     is.t++]=g;else i
 80a24cc:	2866 2b66 3e63 6874 7369 442e 2942 747b     f(f+c>this.DB){t
 80a24dc:	6968 5b73 6874 7369 742e 312d 7c5d 283d     his[this.t-1]|=(
 80a24ec:	2667 2828 3c31 283c 6874 7369 442e 2d42     g&((1<<(this.DB-
 80a24fc:	2966 2d29 2931 3c29 663c 743b 6968 5b73     f))-1))<<f;this[
 80a250c:	6874 7369 742e 2b2b 3d5d 6728 3e3e 7428     this.t++]=(g>>(t
 80a251c:	6968 2e73 4244 662d 2929 7d3b 6c65 6573     his.DB-f));}else
 80a252c:	7420 6968 5b73 6874 7369 742e 312d 7c5d      this[this.t-1]|
 80a253c:	673d 3c3c 3b66 2b66 633d 693b 2866 3e66     =g<<f;f+=c;if(f>
 80a254c:	743d 6968 2e73 4244 6629 3d2d 6874 7369     =this.DB)f-=this
 80a255c:	442e 3b42 697d 2866 3d63 383d 2626 6128     .DB;}if(c==8&&(a
 80a256c:	305b 265d 7830 3038 2129 303d 7b29 6874     [0]&0x80)!=0){th
 80a257c:	7369 732e 2d3d 3b31 6669 6628 303e 7429     is.s=-1;if(f>0)t
 80a258c:	6968 5b73 6874 7369 742e 312d 7c5d 283d     his[this.t-1]|=(
 80a259c:	3128 3c3c 7428 6968 2e73 4244 662d 2929     (1<<(this.DB-f))
 80a25ac:	312d 3c29 663c 7d3b 6874 7369 632e 616c     -1)<<f;}this.cla
 80a25bc:	706d 2928 693b 2866 2965 6942 4967 746e     mp();if(e)BigInt
 80a25cc:	6765 7265 5a2e 5245 2e4f 7573 5462 286f     eger.ZERO.subTo(
 80a25dc:	6874 7369 742c 6968 2973 7d3b 7566 636e     this,this);}func
 80a25ec:	6974 6e6f 6220 706e 6c43 6d61 2870 7b29     tion bnpClamp(){
 80a25fc:	6176 2072 3d61 6874 7369 732e 7426 6968     var a=this.s&thi
 80a260c:	2e73 4d44 773b 6968 656c 7428 6968 2e73     s.DM;while(this.
 80a261c:	3e74 2630 7426 6968 5b73 6874 7369 742e     t>0&&this[this.t
 80a262c:	312d 3d5d 613d 2d29 742d 6968 2e73 3b74     -1]==a)--this.t;
 80a263c:	667d 6e75 7463 6f69 206e 6e62 6f54 7453     }function bnToSt
 80a264c:	6972 676e 6128 7b29 6669 7428 6968 2e73     ring(a){if(this.
 80a265c:	3c73 2930 6572 7574 6e72 2720 272d 742b     s<0)return '-'+t
 80a266c:	6968 2e73 656e 6167 6574 2928 742e 536f     his.negate().toS
 80a267c:	7274 6e69 2867 2961 763b 7261 6220 693b     tring(a);var b;i
 80a268c:	2866 3d61 313d 2936 3d62 3b34 6c65 6573     f(a==16)b=4;else
 80a269c:	6920 2866 3d61 383d 6229 333d 653b 736c      if(a==8)b=3;els
 80a26ac:	2065 6669 6128 3d3d 2932 3d62 3b31 6c65     e if(a==2)b=1;el
 80a26bc:	6573 6920 2866 3d61 333d 2932 3d62 3b35     se if(a==32)b=5;
 80a26cc:	6c65 6573 6920 2866 3d61 343d 6229 323d     else if(a==4)b=2
 80a26dc:	653b 736c 2065 6572 7574 6e72 7420 6968     ;else return thi
 80a26ec:	2e73 6f74 6152 6964 2878 2961 763b 7261     s.toRadix(a);var
 80a26fc:	6320 283d 3c31 623c 2d29 2c31 2c64 3d65      c=(1<<b)-1,d,e=
 80a270c:	6166 736c 2c65 3d66 2727 672c 743d 6968     false,f='',g=thi
 80a271c:	2e73 3b74 6176 2072 3d68 6874 7369 442e     s.t;var h=this.D
 80a272c:	2d42 6728 742a 6968 2e73 4244 2529 3b62     B-(g*this.DB)%b;
 80a273c:	6669 6728 2d2d 303e 7b29 6669 6828 743c     if(g-->0){if(h<t
 80a274c:	6968 2e73 4244 2626 6428 743d 6968 5b73     his.DB&&(d=this[
 80a275c:	5d67 3e3e 2968 303e 7b29 3d65 7274 6575     g]>>h)>0){e=true
 80a276c:	663b 693d 746e 6332 6168 2872 2964 7d3b     ;f=int2char(d);}
 80a277c:	6877 6c69 2865 3e67 303d 7b29 6669 6828     while(g>=0){if(h
 80a278c:	623c 7b29 3d64 7428 6968 5b73 5d67 2826     <b){d=(this[g]&(
 80a279c:	3128 3c3c 2968 312d 2929 3c3c 6228 682d     (1<<h)-1))<<(b-h
 80a27ac:	3b29 7c64 743d 6968 5b73 2d2d 5d67 3e3e     );d|=this[--g]>>
 80a27bc:	6828 3d2b 6874 7369 442e 2d42 2962 7d3b     (h+=this.DB-b);}
 80a27cc:	6c65 6573 647b 283d 6874 7369 675b 3e5d     else{d=(this[g]>
 80a27dc:	283e 2d68 623d 2929 6326 693b 2866 3c68     >(h-=b))&c;if(h<
 80a27ec:	303d 7b29 2b68 743d 6968 2e73 4244 2d3b     =0){h+=this.DB;-
 80a27fc:	672d 7d3b 697d 2866 3e64 2930 3d65 7274     -g;}}if(d>0)e=tr
 80a280c:	6575 693b 2866 2965 2b66 693d 746e 6332     ue;if(e)f+=int2c
 80a281c:	6168 2872 2964 7d3b 727d 7465 7275 206e     har(d);}}return 
 80a282c:	3f65 3a66 3027 3b27 667d 6e75 7463 6f69     e?f:'0';}functio
 80a283c:	206e 6e62 654e 6167 6574 2928 767b 7261     n bnNegate(){var
 80a284c:	6120 6e3d 6962 2928 423b 6769 6e49 6574      a=nbi();BigInte
 80a285c:	6567 2e72 455a 4f52 732e 6275 6f54 7428     ger.ZERO.subTo(t
 80a286c:	6968 2c73 2961 723b 7465 7275 206e 3b61     his,a);return a;
 80a287c:	667d 6e75 7463 6f69 206e 6e62 6241 2873     }function bnAbs(
 80a288c:	7b29 6572 7574 6e72 7428 6968 2e73 3c73     ){return(this.s<
 80a289c:	2930 743f 6968 2e73 656e 6167 6574 2928     0)?this.negate()
 80a28ac:	743a 6968 3b73 667d 6e75 7463 6f69 206e     :this;}function 
 80a28bc:	6e62 6f43 706d 7261 5465 286f 2961 767b     bnCompareTo(a){v
 80a28cc:	7261 6220 743d 6968 2e73 2d73 2e61 3b73     ar b=this.s-a.s;
 80a28dc:	6669 6228 3d21 2930 6572 7574 6e72 6220     if(b!=0)return b
 80a28ec:	763b 7261 6320 743d 6968 2e73 3b74 3d62     ;var c=this.t;b=
 80a28fc:	2d63 2e61 3b74 6669 6228 3d21 2930 6572     c-a.t;if(b!=0)re
 80a290c:	7574 6e72 7428 6968 2e73 3c73 2930 2d3f     turn(this.s<0)?-
 80a291c:	3a62 3b62 6877 6c69 2865 2d2d 3e63 303d     b:b;while(--c>=0
 80a292c:	6929 2866 6228 743d 6968 5b73 5d63 612d     )if((b=this[c]-a
 80a293c:	635b 295d 3d21 2930 6572 7574 6e72 6220     [c])!=0)return b
 80a294c:	723b 7465 7275 206e 3b30 667d 6e75 7463     ;return 0;}funct
 80a295c:	6f69 206e 626e 7469 2873 2961 767b 7261     ion nbits(a){var
 80a296c:	6220 313d 632c 693b 2866 6328 613d 3e3e      b=1,c;if((c=a>>
 80a297c:	313e 2936 3d21 2930 617b 633d 623b 3d2b     >16)!=0){a=c;b+=
 80a298c:	3631 7d3b 6669 2828 3d63 3e61 383e 2129     16;}if((c=a>>8)!
 80a299c:	303d 7b29 3d61 3b63 2b62 383d 7d3b 6669     =0){a=c;b+=8;}if
 80a29ac:	2828 3d63 3e61 343e 2129 303d 7b29 3d61     ((c=a>>4)!=0){a=
 80a29bc:	3b63 2b62 343d 7d3b 6669 2828 3d63 3e61     c;b+=4;}if((c=a>
 80a29cc:	323e 2129 303d 7b29 3d61 3b63 2b62 323d     >2)!=0){a=c;b+=2
 80a29dc:	7d3b 6669 2828 3d63 3e61 313e 2129 303d     ;}if((c=a>>1)!=0
 80a29ec:	7b29 3d61 3b63 2b62 313d 7d3b 6572 7574     ){a=c;b+=1;}retu
 80a29fc:	6e72 6220 7d3b 7566 636e 6974 6e6f 6220     rn b;}function b
 80a2a0c:	426e 7469 654c 676e 6874 2928 697b 2866     nBitLength(){if(
 80a2a1c:	6874 7369 742e 3d3c 2930 6572 7574 6e72     this.t<=0)return
 80a2a2c:	3020 723b 7465 7275 206e 6874 7369 442e      0;return this.D
 80a2a3c:	2a42 7428 6968 2e73 2d74 2931 6e2b 6962     B*(this.t-1)+nbi
 80a2a4c:	7374 7428 6968 5b73 6874 7369 742e 312d     ts(this[this.t-1
 80a2a5c:	5e5d 7428 6968 2e73 2673 6874 7369 442e     ]^(this.s&this.D
 80a2a6c:	294d 3b29 667d 6e75 7463 6f69 206e 6e62     M));}function bn
 80a2a7c:	4470 534c 6968 7466 6f54 6128 622c 7b29     pDLShiftTo(a,b){
 80a2a8c:	6176 2072 3b63 6f66 2872 3d63 6874 7369     var c;for(c=this
 80a2a9c:	742e 312d 633b 3d3e 3b30 2d2d 2963 5b62     .t-1;c>=0;--c)b[
 80a2aac:	2b63 5d61 743d 6968 5b73 5d63 663b 726f     c+a]=this[c];for
 80a2abc:	6328 613d 312d 633b 3d3e 3b30 2d2d 2963     (c=a-1;c>=0;--c)
 80a2acc:	5b62 5d63 303d 623b 742e 743d 6968 2e73     b[c]=0;b.t=this.
 80a2adc:	2b74 3b61 2e62 3d73 6874 7369 732e 7d3b     t+a;b.s=this.s;}
 80a2aec:	7566 636e 6974 6e6f 6220 706e 5244 6853     function bnpDRSh
 80a2afc:	6669 5474 286f 2c61 2962 667b 726f 7628     iftTo(a,b){for(v
 80a2b0c:	7261 6320 613d 633b 743c 6968 2e73 3b74     ar c=a;c<this.t;
 80a2b1c:	2b2b 2963 5b62 2d63 5d61 743d 6968 5b73     ++c)b[c-a]=this[
 80a2b2c:	5d63 623b 742e 4d3d 7461 2e68 616d 2878     c];b.t=Math.max(
 80a2b3c:	6874 7369 742e 612d 302c 3b29 2e62 3d73     this.t-a,0);b.s=
 80a2b4c:	6874 7369 732e 7d3b 7566 636e 6974 6e6f     this.s;}function
 80a2b5c:	6220 706e 534c 6968 7466 6f54 6128 622c      bnpLShiftTo(a,b
 80a2b6c:	7b29 6176 2072 3d63 2561 6874 7369 442e     ){var c=a%this.D
 80a2b7c:	3b42 6176 2072 3d64 6874 7369 442e 2d42     B;var d=this.DB-
 80a2b8c:	3b63 6176 2072 3d65 3128 3c3c 2964 312d     c;var e=(1<<d)-1
 80a2b9c:	763b 7261 6620 4d3d 7461 2e68 6c66 6f6f     ;var f=Math.floo
 80a2bac:	2872 2f61 6874 7369 442e 2942 672c 283d     r(a/this.DB),g=(
 80a2bbc:	6874 7369 732e 3c3c 2963 7426 6968 2e73     this.s<<c)&this.
 80a2bcc:	4d44 682c 663b 726f 6828 743d 6968 2e73     DM,h;for(h=this.
 80a2bdc:	2d74 3b31 3e68 303d 2d3b 682d 7b29 5b62     t-1;h>=0;--h){b[
 80a2bec:	2b68 2b66 5d31 283d 6874 7369 685b 3e5d     h+f+1]=(this[h]>
 80a2bfc:	643e 7c29 3b67 3d67 7428 6968 5b73 5d68     >d)|g;g=(this[h]
 80a2c0c:	6526 3c29 633c 7d3b 6f66 2872 3d68 2d66     &e)<<c;}for(h=f-
 80a2c1c:	3b31 3e68 303d 2d3b 682d 6229 685b 3d5d     1;h>=0;--h)b[h]=
 80a2c2c:	3b30 5b62 5d66 673d 623b 742e 743d 6968     0;b[f]=g;b.t=thi
 80a2c3c:	2e73 2b74 2b66 3b31 2e62 3d73 6874 7369     s.t+f+1;b.s=this
 80a2c4c:	732e 623b 632e 616c 706d 2928 7d3b 6800     .s;b.clamp();}.h
 80a2c5c:	6e61 6c64 6e69 2067 6170 6567 2520 0073     andling page %s.
 80a2c6c:	692f 646e 7865 7300 6e65 6964 676e 7220     /index.sending r
 80a2c7c:	6465 7269 6365 0074 6f4c 6163 6974 6e6f     edirect.Location
 80a2c8c:	203a 692f 646e 7865 682e 6d74 0d6c 000a     : /index.html...
 80a2c9c:	6574 7478 702f 616c 6e69 2f00 6e69 6564     text/plain./inde
 80a2cac:	2e78 7468 6c6d 7400 7865 2f74 7468 6c6d     x.html.text/html
 80a2cbc:	2f00 7372 2d61 7475 6c69 2f73 7372 2e61     ./rsa-utils/rsa.
 80a2ccc:	736a 6100 7070 696c 6163 6974 6e6f 6a2f     js.application/j
 80a2cdc:	7661 7361 7263 7069 0074 732f 7974 656c     avascript./style
 80a2cec:	632e 7373 7400 7865 2f74 7363 0073 722f     .css.text/css./r
 80a2cfc:	6173 752d 6974 736c 722f 676e 6a2e 0073     sa-utils/rng.js.
 80a2d0c:	722f 6173 752d 6974 736c 6a2f 6273 5f6e     /rsa-utils/jsbn_
 80a2d1c:	2e32 736a 2f00 7372 2d61 7475 6c69 2f73     2.js./rsa-utils/
 80a2d2c:	736a 6e62 315f 6a2e 0073 732f 7263 7069     jsbn_1.js./scrip
 80a2d3c:	2e74 736a 2f00 7372 2d61 7475 6c69 2f73     t.js./rsa-utils/
 80a2d4c:	7270 676e 2e34 736a 6600                         prng4.js.

080a2d55 <_ZL9jsbn_2_js>:
 80a2d55:	7566 636e 6974 6e6f 6220 706e 5352 6968     function bnpRShi
 80a2d65:	7466 6f54 6128 622c 7b29 2e62 3d73 6874     ftTo(a,b){b.s=th
 80a2d75:	7369 732e 763b 7261 6320 4d3d 7461 2e68     is.s;var c=Math.
 80a2d85:	6c66 6f6f 2872 2f61 6874 7369 442e 2942     floor(a/this.DB)
 80a2d95:	693b 2866 3e63 743d 6968 2e73 2974 627b     ;if(c>=this.t){b
 80a2da5:	742e 303d 723b 7465 7275 3b6e 767d 7261     .t=0;return;}var
 80a2db5:	6420 613d 7425 6968 2e73 4244 763b 7261      d=a%this.DB;var
 80a2dc5:	6520 743d 6968 2e73 4244 642d 763b 7261      e=this.DB-d;var
 80a2dd5:	6620 283d 3c31 643c 2d29 3b31 5b62 5d30      f=(1<<d)-1;b[0]
 80a2de5:	743d 6968 5b73 5d63 3e3e 3b64 6f66 2872     =this[c]>>d;for(
 80a2df5:	6176 2072 3d67 2b63 3b31 3c67 6874 7369     var g=c+1;g<this
 80a2e05:	742e 2b3b 672b 7b29 5b62 2d67 2d63 5d31     .t;++g){b[g-c-1]
 80a2e15:	3d7c 7428 6968 5b73 5d67 6626 3c29 653c     |=(this[g]&f)<<e
 80a2e25:	623b 675b 632d 3d5d 6874 7369 675b 3e5d     ;b[g-c]=this[g]>
 80a2e35:	643e 7d3b 6669 6428 303e 6229 745b 6968     >d;}if(d>0)b[thi
 80a2e45:	2e73 2d74 2d63 5d31 3d7c 7428 6968 2e73     s.t-c-1]|=(this.
 80a2e55:	2673 2966 3c3c 3b65 2e62 3d74 6874 7369     s&f)<<e;b.t=this
 80a2e65:	742e 632d 623b 632e 616c 706d 2928 7d3b     .t-c;b.clamp();}
 80a2e75:	7566 636e 6974 6e6f 6220 706e 7553 5462     function bnpSubT
 80a2e85:	286f 2c61 2962 767b 7261 6320 303d 642c     o(a,b){var c=0,d
 80a2e95:	303d 652c 4d3d 7461 2e68 696d 286e 2e61     =0,e=Math.min(a.
 80a2ea5:	2c74 6874 7369 742e 3b29 6877 6c69 2865     t,this.t);while(
 80a2eb5:	3c63 2965 647b 3d2b 6874 7369 635b 2d5d     c<e){d+=this[c]-
 80a2ec5:	5b61 5d63 623b 635b 2b2b 3d5d 2664 6874     a[c];b[c++]=d&th
 80a2ed5:	7369 442e 3b4d 3e64 3d3e 6874 7369 442e     is.DM;d>>=this.D
 80a2ee5:	3b42 697d 2866 2e61 3c74 6874 7369 742e     B;}if(a.t<this.t
 80a2ef5:	7b29 2d64 613d 732e 773b 6968 656c 6328     ){d-=a.s;while(c
 80a2f05:	743c 6968 2e73 2974 647b 3d2b 6874 7369     <this.t){d+=this
 80a2f15:	635b 3b5d 5b62 2b63 5d2b 643d 7426 6968     [c];b[c++]=d&thi
 80a2f25:	2e73 4d44 643b 3e3e 743d 6968 2e73 4244     s.DM;d>>=this.DB
 80a2f35:	7d3b 2b64 743d 6968 2e73 3b73 657d 736c     ;}d+=this.s;}els
 80a2f45:	7b65 2b64 743d 6968 2e73 3b73 6877 6c69     e{d+=this.s;whil
 80a2f55:	2865 3c63 2e61 2974 647b 3d2d 5b61 5d63     e(c<a.t){d-=a[c]
 80a2f65:	623b 635b 2b2b 3d5d 2664 6874 7369 442e     ;b[c++]=d&this.D
 80a2f75:	3b4d 3e64 3d3e 6874 7369 442e 3b42 647d     M;d>>=this.DB;}d
 80a2f85:	3d2d 2e61 3b73 627d 732e 283d 3c64 2930     -=a.s;}b.s=(d<0)
 80a2f95:	2d3f 3a31 3b30 6669 6428 2d3c 2931 5b62     ?-1:0;if(d<-1)b[
 80a2fa5:	2b63 5d2b 743d 6968 2e73 5644 642b 653b     c++]=this.DV+d;e
 80a2fb5:	736c 2065 6669 6428 303e 6229 635b 2b2b     lse if(d>0)b[c++
 80a2fc5:	3d5d 3b64 2e62 3d74 3b63 2e62 6c63 6d61     ]=d;b.t=c;b.clam
 80a2fd5:	2870 3b29 667d 6e75 7463 6f69 206e 6e62     p();}function bn
 80a2fe5:	4d70 6c75 6974 6c70 5479 286f 2c61 2962     pMultiplyTo(a,b)
 80a2ff5:	767b 7261 6320 743d 6968 2e73 6261 2873     {var c=this.abs(
 80a3005:	2c29 3d64 2e61 6261 2873 3b29 6176 2072     ),d=a.abs();var 
 80a3015:	3d65 2e63 3b74 2e62 3d74 2b65 2e64 3b74     e=c.t;b.t=e+d.t;
 80a3025:	6877 6c69 2865 2d2d 3e65 303d 6229 655b     while(--e>=0)b[e
 80a3035:	3d5d 3b30 6f66 2872 3d65 3b30 3c65 2e64     ]=0;for(e=0;e<d.
 80a3045:	3b74 2b2b 2965 5b62 2b65 2e63 5d74 633d     t;++e)b[e+c.t]=c
 80a3055:	612e 286d 2c30 5b64 5d65 622c 652c 302c     .am(0,d[e],b,e,0
 80a3065:	632c 742e 3b29 2e62 3d73 3b30 2e62 6c63     ,c.t);b.s=0;b.cl
 80a3075:	6d61 2870 3b29 6669 7428 6968 2e73 2173     amp();if(this.s!
 80a3085:	613d 732e 4229 6769 6e49 6574 6567 2e72     =a.s)BigInteger.
 80a3095:	455a 4f52 732e 6275 6f54 6228 622c 3b29     ZERO.subTo(b,b);
 80a30a5:	667d 6e75 7463 6f69 206e 6e62 5370 7571     }function bnpSqu
 80a30b5:	7261 5465 286f 2961 767b 7261 6220 743d     areTo(a){var b=t
 80a30c5:	6968 2e73 6261 2873 3b29 6176 2072 3d63     his.abs();var c=
 80a30d5:	2e61 3d74 2a32 2e62 3b74 6877 6c69 2865     a.t=2*b.t;while(
 80a30e5:	2d2d 3e63 303d 6129 635b 3d5d 3b30 6f66     --c>=0)a[c]=0;fo
 80a30f5:	2872 3d63 3b30 3c63 2e62 2d74 3b31 2b2b     r(c=0;c<b.t-1;++
 80a3105:	2963 767b 7261 6420 623d 612e 286d 2c63     c){var d=b.am(c,
 80a3115:	5b62 5d63 612c 322c 632a 302c 312c 3b29     b[c],a,2*c,0,1);
 80a3125:	6669 2828 5b61 2b63 2e62 5d74 3d2b 2e62     if((a[c+b.t]+=b.
 80a3135:	6d61 6328 312b 322c 622a 635b 2c5d 2c61     am(c+1,2*b[c],a,
 80a3145:	2a32 2b63 2c31 2c64 2e62 2d74 2d63 2931     2*c+1,d,b.t-c-1)
 80a3155:	3e29 623d 442e 2956 617b 635b 622b 742e     )>=b.DV){a[c+b.t
 80a3165:	2d5d 623d 442e 3b56 5b61 2b63 2e62 2b74     ]-=b.DV;a[c+b.t+
 80a3175:	5d31 313d 7d3b 697d 2866 2e61 3e74 2930     1]=1;}}if(a.t>0)
 80a3185:	5b61 2e61 2d74 5d31 3d2b 2e62 6d61 6328     a[a.t-1]+=b.am(c
 80a3195:	622c 635b 2c5d 2c61 2a32 2c63 2c30 2931     ,b[c],a,2*c,0,1)
 80a31a5:	613b 732e 303d 613b 632e 616c 706d 2928     ;a.s=0;a.clamp()
 80a31b5:	7d3b 7566 636e 6974 6e6f 6220 706e 6944     ;}function bnpDi
 80a31c5:	5276 6d65 6f54 6128 622c 632c 7b29 6176     vRemTo(a,b,c){va
 80a31d5:	2072 3d64 2e61 6261 2873 3b29 6669 6428     r d=a.abs();if(d
 80a31e5:	742e 3d3c 2930 6572 7574 6e72 763b 7261     .t<=0)return;var
 80a31f5:	6520 743d 6968 2e73 6261 2873 3b29 6669      e=this.abs();if
 80a3205:	6528 742e 643c 742e 7b29 6669 6228 3d21     (e.t<d.t){if(b!=
 80a3215:	756e 6c6c 6229 662e 6f72 496d 746e 3028     null)b.fromInt(0
 80a3225:	3b29 6669 6328 3d21 756e 6c6c 7429 6968     );if(c!=null)thi
 80a3235:	2e73 6f63 7970 6f54 6328 3b29 6572 7574     s.copyTo(c);retu
 80a3245:	6e72 7d3b 6669 6328 3d3d 756e 6c6c 6329     rn;}if(c==null)c
 80a3255:	6e3d 6962 2928 763b 7261 6620 6e3d 6962     =nbi();var f=nbi
 80a3265:	2928 672c 743d 6968 2e73 2c73 3d68 2e61     (),g=this.s,h=a.
 80a3275:	3b73 6176 2072 3d69 6874 7369 442e 2d42     s;var i=this.DB-
 80a3285:	626e 7469 2873 5b64 2e64 2d74 5d31 3b29     nbits(d[d.t-1]);
 80a3295:	6669 6928 303e 7b29 2e64 536c 6968 7466     if(i>0){d.lShift
 80a32a5:	6f54 6928 662c 3b29 2e65 536c 6968 7466     To(i,f);e.lShift
 80a32b5:	6f54 6928 632c 3b29 657d 736c 7b65 2e64     To(i,c);}else{d.
 80a32c5:	6f63 7970 6f54 6628 3b29 2e65 6f63 7970     copyTo(f);e.copy
 80a32d5:	6f54 6328 3b29 767d 7261 6a20 663d 742e     To(c);}var j=f.t
 80a32e5:	763b 7261 6b20 663d 6a5b 312d 3b5d 6669     ;var k=f[j-1];if
 80a32f5:	6b28 3d3d 2930 6572 7574 6e72 763b 7261     (k==0)return;var
 80a3305:	6c20 6b3d 282a 3c31 743c 6968 2e73 3146      l=k*(1<<this.F1
 80a3315:	2b29 2828 3e6a 2931 663f 6a5b 322d 3e5d     )+((j>1)?f[j-2]>
 80a3325:	743e 6968 2e73 3246 303a 3b29 6176 2072     >this.F2:0);var 
 80a3335:	3d6d 6874 7369 462e 2f56 2c6c 3d6e 3128     m=this.FV/l,n=(1
 80a3345:	3c3c 6874 7369 462e 2931 6c2f 6f2c 313d     <<this.F1)/l,o=1
 80a3355:	3c3c 6874 7369 462e 3b32 6176 2072 3d70     <<this.F2;var p=
 80a3365:	2e63 2c74 3d71 2d70 2c6a 3d72 6228 3d3d     c.t,q=p-j,r=(b==
 80a3375:	756e 6c6c 3f29 626e 2869 3a29 3b62 2e66     null)?nbi():b;f.
 80a3385:	6c64 6853 6669 5474 286f 2c71 2972 693b     dlShiftTo(q,r);i
 80a3395:	2866 2e63 6f63 706d 7261 5465 286f 2972     f(c.compareTo(r)
 80a33a5:	3d3e 2930 637b 635b 742e 2b2b 3d5d 3b31     >=0){c[c.t++]=1;
 80a33b5:	2e63 7573 5462 286f 2c72 2963 7d3b 6942     c.subTo(r,c);}Bi
 80a33c5:	4967 746e 6765 7265 4f2e 454e 642e 536c     gInteger.ONE.dlS
 80a33d5:	6968 7466 6f54 6a28 722c 3b29 2e72 7573     hiftTo(j,r);r.su
 80a33e5:	5462 286f 2c66 2966 773b 6968 656c 6628     bTo(f,f);while(f
 80a33f5:	742e 6a3c 6629 665b 742e 2b2b 3d5d 3b30     .t<j)f[f.t++]=0;
 80a3405:	6877 6c69 2865 2d2d 3e71 303d 7b29 6176     while(--q>=0){va
 80a3415:	2072 3d73 6328 2d5b 702d 3d5d 6b3d 3f29     r s=(c[--p]==k)?
 80a3425:	6874 7369 442e 3a4d 614d 6874 662e 6f6c     this.DM:Math.flo
 80a3435:	726f 6328 705b 2a5d 2b6d 6328 705b 312d     or(c[p]*m+(c[p-1
 80a3445:	2b5d 296f 6e2a 3b29 6669 2828 5b63 5d70     ]+o)*n);if((c[p]
 80a3455:	3d2b 2e66 6d61 3028 732c 632c 712c 302c     +=f.am(0,s,c,q,0
 80a3465:	6a2c 2929 733c 7b29 2e66 6c64 6853 6669     ,j))<s){f.dlShif
 80a3475:	5474 286f 2c71 2972 633b 732e 6275 6f54     tTo(q,r);c.subTo
 80a3485:	7228 632c 3b29 6877 6c69 2865 5b63 5d70     (r,c);while(c[p]
 80a3495:	2d3c 732d 6329 732e 6275 6f54 7228 632c     <--s)c.subTo(r,c
 80a34a5:	3b29 7d7d 6669 6228 3d21 756e 6c6c 7b29     );}}if(b!=null){
 80a34b5:	2e63 7264 6853 6669 5474 286f 2c6a 2962     c.drShiftTo(j,b)
 80a34c5:	693b 2866 2167 683d 4229 6769 6e49 6574     ;if(g!=h)BigInte
 80a34d5:	6567 2e72 455a 4f52 732e 6275 6f54 6228     ger.ZERO.subTo(b
 80a34e5:	622c 3b29 637d 742e 6a3d 633b 632e 616c     ,b);}c.t=j;c.cla
 80a34f5:	706d 2928 693b 2866 3e69 2930 2e63 5372     mp();if(i>0)c.rS
 80a3505:	6968 7466 6f54 6928 632c 3b29 6669 6728     hiftTo(i,c);if(g
 80a3515:	303c 4229 6769 6e49 6574 6567 2e72 455a     <0)BigInteger.ZE
 80a3525:	4f52 732e 6275 6f54 6328 632c 3b29 667d     RO.subTo(c,c);}f
 80a3535:	6e75 7463 6f69 206e 6e62 6f4d 2864 2961     unction bnMod(a)
 80a3545:	767b 7261 6220 6e3d 6962 2928 743b 6968     {var b=nbi();thi
 80a3555:	2e73 6261 2873 2e29 6964 5276 6d65 6f54     s.abs().divRemTo
 80a3565:	6128 6e2c 6c75 2c6c 2962 693b 2866 6874     (a,null,b);if(th
 80a3575:	7369 732e 303c 2626 2e62 6f63 706d 7261     is.s<0&&b.compar
 80a3585:	5465 286f 6942 4967 746e 6765 7265 5a2e     eTo(BigInteger.Z
 80a3595:	5245 294f 303e 6129 732e 6275 6f54 6228     ERO)>0)a.subTo(b
 80a35a5:	622c 3b29 6572 7574 6e72 6220 7d3b 7566     ,b);return b;}fu
 80a35b5:	636e 6974 6e6f 4320 616c 7373 6369 6128     nction Classic(a
 80a35c5:	7b29 6874 7369 6d2e 613d 7d3b 7566 636e     ){this.m=a;}func
 80a35d5:	6974 6e6f 6320 6f43 766e 7265 2874 2961     tion cConvert(a)
 80a35e5:	697b 2866 2e61 3c73 7c30 617c 632e 6d6f     {if(a.s<0||a.com
 80a35f5:	6170 6572 6f54 7428 6968 2e73 296d 3d3e     pareTo(this.m)>=
 80a3605:	2930 6572 7574 6e72 6120 6d2e 646f 7428     0)return a.mod(t
 80a3615:	6968 2e73 296d 653b 736c 2065 6572 7574     his.m);else retu
 80a3625:	6e72 6120 7d3b 7566 636e 6974 6e6f 6320     rn a;}function c
 80a3635:	6552 6576 7472 6128 7b29 6572 7574 6e72     Revert(a){return
 80a3645:	6120 7d3b 7566 636e 6974 6e6f 6320 6552      a;}function cRe
 80a3655:	7564 6563 6128 7b29 2e61 6964 5276 6d65     duce(a){a.divRem
 80a3665:	6f54 7428 6968 2e73 2c6d 756e 6c6c 612c     To(this.m,null,a
 80a3675:	3b29 667d 6e75 7463 6f69 206e 4d63 6c75     );}function cMul
 80a3685:	6f54 6128 622c 632c 7b29 2e61 756d 746c     To(a,b,c){a.mult
 80a3695:	7069 796c 6f54 6228 632c 3b29 6874 7369     iplyTo(b,c);this
 80a36a5:	722e 6465 6375 2865 2963 7d3b 7566 636e     .reduce(c);}func
 80a36b5:	6974 6e6f 6320 7153 5472 286f 2c61 2962     tion cSqrTo(a,b)
 80a36c5:	617b 732e 7571 7261 5465 286f 2962 743b     {a.squareTo(b);t
 80a36d5:	6968 2e73 6572 7564 6563 6228 3b29 437d     his.reduce(b);}C
 80a36e5:	616c 7373 6369 702e 6f72 6f74 7974 6570     lassic.prototype
 80a36f5:	632e 6e6f 6576 7472 633d 6f43 766e 7265     .convert=cConver
 80a3705:	3b74 6c43 7361 6973 2e63 7270 746f 746f     t;Classic.protot
 80a3715:	7079 2e65 6572 6576 7472 633d 6552 6576     ype.revert=cReve
 80a3725:	7472 433b 616c 7373 6369 702e 6f72 6f74     rt;Classic.proto
 80a3735:	7974 6570 722e 6465 6375 3d65 5263 6465     type.reduce=cRed
 80a3745:	6375 3b65 6c43 7361 6973 2e63 7270 746f     uce;Classic.prot
 80a3755:	746f 7079 2e65 756d 546c 3d6f 4d63 6c75     otype.mulTo=cMul
 80a3765:	6f54 433b 616c 7373 6369 702e 6f72 6f74     To;Classic.proto
 80a3775:	7974 6570 732e 7271 6f54 633d 7153 5472     type.sqrTo=cSqrT
 80a3785:	3b6f 7566 636e 6974 6e6f 6220 706e 6e49     o;function bnpIn
 80a3795:	4476 6769 7469 2928 697b 2866 6874 7369     vDigit(){if(this
 80a37a5:	742e 313c 7229 7465 7275 206e 3b30 6176     .t<1)return 0;va
 80a37b5:	2072 3d61 6874 7369 305b 3b5d 6669 2828     r a=this[0];if((
 80a37c5:	2661 2931 3d3d 2930 6572 7574 6e72 3020     a&1)==0)return 0
 80a37d5:	763b 7261 6220 613d 3326 623b 283d 2a62     ;var b=a&3;b=(b*
 80a37e5:	3228 282d 2661 7830 2966 622a 2929 3026     (2-(a&0xf)*b))&0
 80a37f5:	6678 623b 283d 2a62 3228 282d 2661 7830     xf;b=(b*(2-(a&0x
 80a3805:	6666 2a29 2962 2629 7830 6666 623b 283d     ff)*b))&0xff;b=(
 80a3815:	2a62 3228 282d 2828 2661 7830 6666 6666     b*(2-(((a&0xffff
 80a3825:	2a29 2962 3026 6678 6666 2966 2929 3026     )*b)&0xffff)))&0
 80a3835:	6678 6666 3b66 3d62 6228 282a 2d32 2a61     xffff;b=(b*(2-a*
 80a3845:	2562 6874 7369 442e 2956 2529 6874 7369     b%this.DV))%this
 80a3855:	442e 3b56 6572 7574 6e72 6228 303e 3f29     .DV;return(b>0)?
 80a3865:	6874 7369 442e 2d56 3a62 622d 7d3b 7566     this.DV-b:-b;}fu
 80a3875:	636e 6974 6e6f 4d20 6e6f 6774 6d6f 7265     nction Montgomer
 80a3885:	2879 2961 747b 6968 2e73 3d6d 3b61 6874     y(a){this.m=a;th
 80a3895:	7369 6d2e 3d70 2e61 6e69 4476 6769 7469     is.mp=a.invDigit
 80a38a5:	2928 743b 6968 2e73 706d 3d6c 6874 7369     ();this.mpl=this
 80a38b5:	6d2e 2670 7830 6637 6666 743b 6968 2e73     .mp&0x7fff;this.
 80a38c5:	706d 3d68 6874 7369 6d2e 3e70 313e 3b35     mph=this.mp>>15;
 80a38d5:	6874 7369 752e 3d6d 3128 3c3c 6128 442e     this.um=(1<<(a.D
 80a38e5:	2d42 3531 2929 312d 743b 6968 2e73 746d     B-15))-1;this.mt
 80a38f5:	3d32 2a32 2e61 3b74 667d 6e75 7463 6f69     2=2*a.t;}functio
 80a3905:	206e 6f6d 746e 6f43 766e 7265 2874 2961     n montConvert(a)
 80a3915:	767b 7261 6220 6e3d 6962 2928 613b 612e     {var b=nbi();a.a
 80a3925:	7362 2928 642e 536c 6968 7466 6f54 7428     bs().dlShiftTo(t
 80a3935:	6968 2e73 2e6d 2c74 2962 623b 642e 7669     his.m.t,b);b.div
 80a3945:	6552 546d 286f 6874 7369 6d2e 6e2c 6c75     RemTo(this.m,nul
 80a3955:	2c6c 2962 693b 2866 2e61 3c73 2630 6226     l,b);if(a.s<0&&b
 80a3965:	632e 6d6f 6170 6572 6f54 4228 6769 6e49     .compareTo(BigIn
 80a3975:	6574 6567 2e72 455a 4f52 3e29 2930 6874     teger.ZERO)>0)th
 80a3985:	7369 6d2e 732e 6275 6f54 6228 622c 3b29     is.m.subTo(b,b);
 80a3995:	6572 7574 6e72 6220 7d3b 7566 636e 6974     return b;}functi
 80a39a5:	6e6f 6d20 6e6f 5274 7665 7265 2874 2961     on montRevert(a)
 80a39b5:	767b 7261 6220 6e3d 6962 2928 613b 632e     {var b=nbi();a.c
 80a39c5:	706f 5479 286f 2962 743b 6968 2e73 6572     opyTo(b);this.re
 80a39d5:	7564 6563 6228 3b29 6572 7574 6e72 6220     duce(b);return b
 80a39e5:	7d3b 7566 636e 6974 6e6f 6d20 6e6f 5274     ;}function montR
 80a39f5:	6465 6375 2865 2961 777b 6968 656c 6128     educe(a){while(a
 80a3a05:	742e 3d3c 6874 7369 6d2e 3274 6129 615b     .t<=this.mt2)a[a
 80a3a15:	742e 2b2b 3d5d 3b30 6f66 2872 6176 2072     .t++]=0;for(var 
 80a3a25:	3d62 3b30 3c62 6874 7369 6d2e 742e 2b3b     b=0;b<this.m.t;+
 80a3a35:	622b 7b29 6176 2072 3d63 5b61 5d62 3026     +b){var c=a[b]&0
 80a3a45:	3778 6666 3b66 6176 2072 3d64 6328 742a     x7fff;var d=(c*t
 80a3a55:	6968 2e73 706d 2b6c 2828 6328 742a 6968     his.mpl+(((c*thi
 80a3a65:	2e73 706d 2b68 6128 625b 3e5d 313e 2935     s.mph+(a[b]>>15)
 80a3a75:	742a 6968 2e73 706d 296c 7426 6968 2e73     *this.mpl)&this.
 80a3a85:	6d75 3c29 313c 2935 2629 2e61 4d44 633b     um)<<15))&a.DM;c
 80a3a95:	623d 742b 6968 2e73 2e6d 3b74 5b61 5d63     =b+this.m.t;a[c]
 80a3aa5:	3d2b 6874 7369 6d2e 612e 286d 2c30 2c64     +=this.m.am(0,d,
 80a3ab5:	2c61 2c62 2c30 6874 7369 6d2e 742e 3b29     a,b,0,this.m.t);
 80a3ac5:	6877 6c69 2865 5b61 5d63 3d3e 2e61 5644     while(a[c]>=a.DV
 80a3ad5:	7b29 5b61 5d63 3d2d 2e61 5644 613b 2b5b     ){a[c]-=a.DV;a[+
 80a3ae5:	632b 2b5d 3b2b 7d7d 2e61 6c63 6d61 2870     +c]++;}}a.clamp(
 80a3af5:	3b29 2e61 7264 6853 6669 5474 286f 6874     );a.drShiftTo(th
 80a3b05:	7369 6d2e 742e 612c 3b29 6669 6128 632e     is.m.t,a);if(a.c
 80a3b15:	6d6f 6170 6572 6f54 7428 6968 2e73 296d     ompareTo(this.m)
 80a3b25:	3d3e 2930 2e61 7573 5462 286f 6874 7369     >=0)a.subTo(this
 80a3b35:	6d2e 612c 3b29 667d 6e75 7463 6f69 206e     .m,a);}function 
 80a3b45:	6f6d 746e 7153 5472 286f 2c61 2962 617b     montSqrTo(a,b){a
 80a3b55:	732e 7571 7261 5465 286f 2962 743b 6968     .squareTo(b);thi
 80a3b65:	2e73 6572 7564 6563 6228 3b29 667d 6e75     s.reduce(b);}fun
 80a3b75:	7463 6f69 206e 6f6d 746e 754d 546c 286f     ction montMulTo(
 80a3b85:	2c61 2c62 2963 617b 6d2e 6c75 6974 6c70     a,b,c){a.multipl
 80a3b95:	5479 286f 2c62 2963 743b 6968 2e73 6572     yTo(b,c);this.re
 80a3ba5:	7564 6563 6328 3b29 4d7d 6e6f 6774 6d6f     duce(c);}Montgom
 80a3bb5:	7265 2e79 7270 746f 746f 7079 2e65 6f63     ery.prototype.co
 80a3bc5:	766e 7265 3d74 6f6d 746e 6f43 766e 7265     nvert=montConver
 80a3bd5:	3b74 6f4d 746e 6f67 656d 7972 702e 6f72     t;Montgomery.pro
 80a3be5:	6f74 7974 6570 722e 7665 7265 3d74 6f6d     totype.revert=mo
 80a3bf5:	746e 6552 6576 7472 4d3b 6e6f 6774 6d6f     ntRevert;Montgom
 80a3c05:	7265 2e79 7270 746f 746f 7079 2e65 6572     ery.prototype.re
 80a3c15:	7564 6563 6d3d 6e6f 5274 6465 6375 3b65     duce=montReduce;
 80a3c25:	6f4d 746e 6f67 656d 7972 702e 6f72 6f74     Montgomery.proto
 80a3c35:	7974 6570 6d2e 6c75 6f54 6d3d 6e6f 4d74     type.mulTo=montM
 80a3c45:	6c75 6f54 4d3b 6e6f 6774 6d6f 7265 2e79     ulTo;Montgomery.
 80a3c55:	7270 746f 746f 7079 2e65 7173 5472 3d6f     prototype.sqrTo=
 80a3c65:	6f6d 746e 7153 5472 3b6f 7566 636e 6974     montSqrTo;functi
 80a3c75:	6e6f 6220 706e 7349 7645 6e65 2928 727b     on bnpIsEven(){r
 80a3c85:	7465 7275 286e 7428 6968 2e73 3e74 2930     eturn((this.t>0)
 80a3c95:	283f 6874 7369 305b 265d 2931 743a 6968     ?(this[0]&1):thi
 80a3ca5:	2e73 2973 3d3d 3b30 667d 6e75 7463 6f69     s.s)==0;}functio
 80a3cb5:	206e 6e62 4570 7078 6128 622c 7b29 6669     n bnpExp(a,b){if
 80a3cc5:	6128 303e 6678 6666 6666 6666 7c66 617c     (a>0xffffffff||a
 80a3cd5:	313c 7229 7465 7275 206e 6942 4967 746e     <1)return BigInt
 80a3ce5:	6765 7265 4f2e 454e 763b 7261 6320 6e3d     eger.ONE;var c=n
 80a3cf5:	6962 2928 642c 6e3d 6962 2928 652c 623d     bi(),d=nbi(),e=b
 80a3d05:	632e 6e6f 6576 7472 7428 6968 2973 662c     .convert(this),f
 80a3d15:	6e3d 6962 7374 6128 2d29 3b31 2e65 6f63     =nbits(a)-1;e.co
 80a3d25:	7970 6f54 6328 3b29 6877 6c69 2865 2d2d     pyTo(c);while(--
 80a3d35:	3e66 303d 7b29 2e62 7173 5472 286f 2c63     f>=0){b.sqrTo(c,
 80a3d45:	2964 693b 2866 6128 2826 3c31 663c 2929     d);if((a&(1<<f))
 80a3d55:	303e 6229 6d2e 6c75 6f54 6428 652c 632c     >0)b.mulTo(d,e,c
 80a3d65:	3b29 6c65 6573 767b 7261 6720 633d 633b     );else{var g=c;c
 80a3d75:	643d 643b 673d 7d3b 727d 7465 7275 206e     =d;d=g;}}return 
 80a3d85:	2e62 6572 6576 7472 6328 3b29 667d 6e75     b.revert(c);}fun
 80a3d95:	7463 6f69 206e 6e62 6f4d 5064 776f 6e49     ction bnModPowIn
 80a3da5:	2874 2c61 2962 767b 7261 6320 693b 2866     t(a,b){var c;if(
 80a3db5:	3c61 3532 7c36 627c 692e 4573 6576 286e     a<256||b.isEven(
 80a3dc5:	2929 3d63 656e 2077 6c43 7361 6973 2863     ))c=new Classic(
 80a3dd5:	2962 653b 736c 2065 3d63 656e 2077 6f4d     b);else c=new Mo
 80a3de5:	746e 6f67 656d 7972 6228 3b29 6572 7574     ntgomery(b);retu
 80a3df5:	6e72 7420 6968 2e73 7865 2870 2c61 2963     rn this.exp(a,c)
 80a3e05:	7d3b 6942 4967 746e 6765 7265 702e 6f72     ;}BigInteger.pro
 80a3e15:	6f74 7974 6570 632e 706f 5479 3d6f 6e62     totype.copyTo=bn
 80a3e25:	4370 706f 5479 3b6f 6942 4967 746e 6765     pCopyTo;BigInteg
 80a3e35:	7265 702e 6f72 6f74 7974 6570 662e 6f72     er.prototype.fro
 80a3e45:	496d 746e 623d 706e 7246 6d6f 6e49 3b74     mInt=bnpFromInt;
 80a3e55:	6942 4967 746e 6765 7265 702e 6f72 6f74     BigInteger.proto
 80a3e65:	7974 6570 662e 6f72 536d 7274 6e69 3d67     type.fromString=
 80a3e75:	6e62 4670 6f72 536d 7274 6e69 3b67 6942     bnpFromString;Bi
 80a3e85:	4967 746e 6765 7265 702e 6f72 6f74 7974     gInteger.prototy
 80a3e95:	6570 632e 616c 706d 623d 706e 6c43 6d61     pe.clamp=bnpClam
 80a3ea5:	3b70 6942 4967 746e 6765 7265 702e 6f72     p;BigInteger.pro
 80a3eb5:	6f74 7974 6570 642e 536c 6968 7466 6f54     totype.dlShiftTo
 80a3ec5:	623d 706e 4c44 6853 6669 5474 3b6f 6942     =bnpDLShiftTo;Bi
 80a3ed5:	4967 746e 6765 7265 702e 6f72 6f74 7974     gInteger.prototy
 80a3ee5:	6570 642e 5372 6968 7466 6f54 623d 706e     pe.drShiftTo=bnp
 80a3ef5:	5244 6853 6669 5474 3b6f 6942 4967 746e     DRShiftTo;BigInt
 80a3f05:	6765 7265 702e 6f72 6f74 7974 6570 6c2e     eger.prototype.l
 80a3f15:	6853 6669 5474 3d6f 6e62 4c70 6853 6669     ShiftTo=bnpLShif
 80a3f25:	5474 3b6f 6942 4967 746e 6765 7265 702e     tTo;BigInteger.p
 80a3f35:	6f72 6f74 7974 6570 722e 6853 6669 5474     rototype.rShiftT
 80a3f45:	3d6f 6e62 5270 6853 6669 5474 3b6f 6942     o=bnpRShiftTo;Bi
 80a3f55:	4967 746e 6765 7265 702e 6f72 6f74 7974     gInteger.prototy
 80a3f65:	6570 732e 6275 6f54 623d 706e 7553 5462     pe.subTo=bnpSubT
 80a3f75:	3b6f 6942 4967 746e 6765 7265 702e 6f72     o;BigInteger.pro
 80a3f85:	6f74 7974 6570 6d2e 6c75 6974 6c70 5479     totype.multiplyT
 80a3f95:	3d6f 6e62 4d70 6c75 6974 6c70 5479 3b6f     o=bnpMultiplyTo;
 80a3fa5:	6942 4967 746e 6765 7265 702e 6f72 6f74     BigInteger.proto
 80a3fb5:	7974 6570 732e 7571 7261 5465 3d6f 6e62     type.squareTo=bn
 80a3fc5:	5370 7571 7261 5465 3b6f 6942 4967 746e     pSquareTo;BigInt
 80a3fd5:	6765 7265 702e 6f72 6f74 7974 6570 642e     eger.prototype.d
 80a3fe5:	7669 6552 546d 3d6f 6e62 4470 7669 6552     ivRemTo=bnpDivRe
 80a3ff5:	546d 3b6f 6942 4967 746e 6765 7265 702e     mTo;BigInteger.p
 80a4005:	6f72 6f74 7974 6570 692e 766e 6944 6967     rototype.invDigi
 80a4015:	3d74 6e62 4970 766e 6944 6967 3b74 6942     t=bnpInvDigit;Bi
 80a4025:	4967 746e 6765 7265 702e 6f72 6f74 7974     gInteger.prototy
 80a4035:	6570 692e 4573 6576 3d6e 6e62 4970 4573     pe.isEven=bnpIsE
 80a4045:	6576 3b6e 6942 4967 746e 6765 7265 702e     ven;BigInteger.p
 80a4055:	6f72 6f74 7974 6570 652e 7078 623d 706e     rototype.exp=bnp
 80a4065:	7845 3b70 6942 4967 746e 6765 7265 702e     Exp;BigInteger.p
 80a4075:	6f72 6f74 7974 6570 742e 536f 7274 6e69     rototype.toStrin
 80a4085:	3d67 6e62 6f54 7453 6972 676e 423b 6769     g=bnToString;Big
 80a4095:	6e49 6574 6567 2e72 7270 746f 746f 7079     Integer.prototyp
 80a40a5:	2e65 656e 6167 6574 623d 4e6e 6765 7461     e.negate=bnNegat
 80a40b5:	3b65 6942 4967 746e 6765 7265 702e 6f72     e;BigInteger.pro
 80a40c5:	6f74 7974 6570 612e 7362 623d 416e 7362     totype.abs=bnAbs
 80a40d5:	423b 6769 6e49 6574 6567 2e72 7270 746f     ;BigInteger.prot
 80a40e5:	746f 7079 2e65 6f63 706d 7261 5465 3d6f     otype.compareTo=
 80a40f5:	6e62 6f43 706d 7261 5465 3b6f 6942 4967     bnCompareTo;BigI
 80a4105:	746e 6765 7265 702e 6f72 6f74 7974 6570     nteger.prototype
 80a4115:	622e 7469 654c 676e 6874 623d 426e 7469     .bitLength=bnBit
 80a4125:	654c 676e 6874 423b 6769 6e49 6574 6567     Length;BigIntege
 80a4135:	2e72 7270 746f 746f 7079 2e65 6f6d 3d64     r.prototype.mod=
 80a4145:	6e62 6f4d 3b64 6942 4967 746e 6765 7265     bnMod;BigInteger
 80a4155:	702e 6f72 6f74 7974 6570 6d2e 646f 6f50     .prototype.modPo
 80a4165:	4977 746e 623d 4d6e 646f 6f50 4977 746e     wInt=bnModPowInt
 80a4175:	423b 6769 6e49 6574 6567 2e72 455a 4f52     ;BigInteger.ZERO
 80a4185:	6e3d 7662 3028 3b29 6942 4967 746e 6765     =nbv(0);BigInteg
 80a4195:	7265 4f2e 454e 6e3d 7662 3128 3b29 7600          er.ONE=nbv(1);.

080a41a4 <_ZL9script_js>:
 80a41a4:	6176 2072 6162 6573 755f 6c72 273d 7468     var base_url='ht
 80a41b4:	7074 2f3a 312f 3239 312e 3836 302e 312e     tp://192.168.0.1
 80a41c4:	272f 763b 7261 6e20 7465 6f77 6b72 6c5f     /';var network_l
 80a41d4:	7369 3b74 6176 2072 7570 6c62 6369 6b5f     ist;var public_k
 80a41e4:	7965 763b 7261 7220 6173 6e3d 7765 5220     ey;var rsa=new R
 80a41f4:	4153 654b 2879 3b29 6176 2072 6373 6e61     SAKey();var scan
 80a4204:	7542 7474 6e6f 643d 636f 6d75 6e65 2e74     Button=document.
 80a4214:	6567 4574 656c 656d 746e 7942 6449 2728     getElementById('
 80a4224:	6373 6e61 622d 7475 6f74 276e 3b29 6176     scan-button');va
 80a4234:	2072 6f63 6e6e 6365 4274 7475 6f74 3d6e     r connectButton=
 80a4244:	6f64 7563 656d 746e 672e 7465 6c45 6d65     document.getElem
 80a4254:	6e65 4274 4979 2864 6327 6e6f 656e 7463     entById('connect
 80a4264:	622d 7475 6f74 276e 3b29 6176 2072 6f63     -button');var co
 80a4274:	7970 7542 7474 6e6f 643d 636f 6d75 6e65     pyButton=documen
 80a4284:	2e74 6567 4574 656c 656d 746e 7942 6449     t.getElementById
 80a4294:	2728 6f63 7970 622d 7475 6f74 276e 3b29     ('copy-button');
 80a42a4:	6176 2072 6873 776f 7542 7474 6e6f 643d     var showButton=d
 80a42b4:	636f 6d75 6e65 2e74 6567 4574 656c 656d     ocument.getEleme
 80a42c4:	746e 7942 6449 2728 6873 776f 622d 7475     ntById('show-but
 80a42d4:	6f74 276e 3b29 6176 2072 6564 6976 6563     ton');var device
 80a42e4:	4449 643d 636f 6d75 6e65 2e74 6567 4574     ID=document.getE
 80a42f4:	656c 656d 746e 7942 6449 2728 6564 6976     lementById('devi
 80a4304:	6563 692d 2764 3b29 6176 2072 6f63 6e6e     ce-id');var conn
 80a4314:	6365 4674 726f 3d6d 6f64 7563 656d 746e     ectForm=document
 80a4324:	672e 7465 6c45 6d65 6e65 4274 4979 2864     .getElementById(
 80a4334:	6327 6e6f 656e 7463 662d 726f 276d 3b29     'connect-form');
 80a4344:	6176 2072 7570 6c62 6369 6b5f 7965 635f     var public_key_c
 80a4354:	6c61 626c 6361 3d6b 737b 6375 6563 7373     allback={success
 80a4364:	663a 6e75 7463 6f69 286e 2961 637b 6e6f     :function(a){con
 80a4374:	6f73 656c 6c2e 676f 2728 7550 6c62 6369     sole.log('Public
 80a4384:	6b20 7965 203a 2b27 2e61 2962 703b 6275      key: '+a.b);pub
 80a4394:	696c 5f63 656b 3d79 2e61 3b62 7372 2e61     lic_key=a.b;rsa.
 80a43a4:	6573 5074 6275 696c 2863 7570 6c62 6369     setPublic(public
 80a43b4:	6b5f 7965 732e 6275 7473 6972 676e 3528     _key.substring(5
 80a43c4:	2c38 3835 322b 3635 2c29 7570 6c62 6369     8,58+256),public
 80a43d4:	6b5f 7965 732e 6275 7473 6972 676e 3328     _key.substring(3
 80a43e4:	3831 332c 3831 362b 2929 7d3b 652c 7272     18,318+6));},err
 80a43f4:	726f 663a 6e75 7463 6f69 286e 2c61 2962     or:function(a,b)
 80a4404:	637b 6e6f 6f73 656c 6c2e 676f 6128 3b29     {console.log(a);
 80a4414:	6977 646e 776f 612e 656c 7472 2728 6854     window.alert('Th
 80a4424:	7265 2065 6177 2073 2061 7270 626f 656c     ere was a proble
 80a4434:	206d 6566 6374 6968 676e 6920 706d 726f     m fetching impor
 80a4444:	6174 746e 6920 666e 726f 616d 6974 6e6f     tant information
 80a4454:	6620 6f72 206d 6f79 7275 6420 7665 6369      from your devic
 80a4464:	2e65 5020 656c 7361 2065 6576 6972 7966     e. Please verify
 80a4474:	7920 756f 2072 6f63 6e6e 6365 6974 6e6f      your connection
 80a4484:	202c 6874 6e65 7220 6c65 616f 2064 6874     , then reload th
 80a4494:	7369 7020 6761 2e65 2927 7d3b 3b7d 6176     is page.');}};va
 80a44a4:	2072 6564 6976 6563 695f 5f64 6163 6c6c     r device_id_call
 80a44b4:	6162 6b63 7b3d 7573 6363 7365 3a73 7566     back={success:fu
 80a44c4:	636e 6974 6e6f 6128 7b29 6176 2072 3d62     nction(a){var b=
 80a44d4:	2e61 6469 643b 7665 6369 4965 2e44 6176     a.id;deviceID.va
 80a44e4:	756c 3d65 3b62 2c7d 7265 6f72 3a72 7566     lue=b;},error:fu
 80a44f4:	636e 6974 6e6f 6128 622c 7b29 6f63 736e     nction(a,b){cons
 80a4504:	6c6f 2e65 6f6c 2867 2961 763b 7261 6320     ole.log(a);var c
 80a4514:	273d 4f43 4d4d 4e55 4349 5441 4f49 5f4e     ='COMMUNICATION_
 80a4524:	5245 4f52 2752 643b 7665 6369 4965 2e44     ERROR';deviceID.
 80a4534:	6176 756c 3d65 3b63 7d7d 763b 7261 7320     value=c;}};var s
 80a4544:	6163 3d6e 7566 636e 6974 6e6f 2928 637b     can=function(){c
 80a4554:	6e6f 6f73 656c 6c2e 676f 2728 6353 6e61     onsole.log('Scan
 80a4564:	696e 676e 2e2e 212e 2927 643b 7369 6261     ning...!');disab
 80a4574:	656c 7542 7474 6e6f 2873 3b29 6373 6e61     leButtons();scan
 80a4584:	7542 7474 6e6f 692e 6e6e 7265 5448 4c4d     Button.innerHTML
 80a4594:	273d 6353 6e61 696e 676e 2e2e 272e 633b     ='Scanning...';c
 80a45a4:	6e6f 656e 7463 7542 7474 6e6f 692e 6e6e     onnectButton.inn
 80a45b4:	7265 5448 4c4d 273d 6f43 6e6e 6365 2774     erHTML='Connect'
 80a45c4:	643b 636f 6d75 6e65 2e74 6567 4574 656c     ;document.getEle
 80a45d4:	656d 746e 7942 6449 2728 6f63 6e6e 6365     mentById('connec
 80a45e4:	2d74 6964 2776 2e29 7473 6c79 2e65 6964     t-div').style.di
 80a45f4:	7073 616c 3d79 6e27 6e6f 2765 643b 636f     splay='none';doc
 80a4604:	6d75 6e65 2e74 6567 4574 656c 656d 746e     ument.getElement
 80a4614:	7942 6449 2728 656e 7774 726f 736b 642d     ById('networks-d
 80a4624:	7669 2927 732e 7974 656c 642e 7369 6c70     iv').style.displ
 80a4634:	7961 273d 6f6e 656e 3b27 6567 5274 7165     ay='none';getReq
 80a4644:	6575 7473 6228 7361 5f65 7275 2b6c 7327     uest(base_url+'s
 80a4654:	6163 2d6e 7061 2c27 6373 6e61 635f 6c61     can-ap',scan_cal
 80a4664:	626c 6361 296b 7d3b 763b 7261 7320 6163     lback);};var sca
 80a4674:	5f6e 6163 6c6c 6162 6b63 7b3d 7573 6363     n_callback={succ
 80a4684:	7365 3a73 7566 636e 6974 6e6f 6128 7b29     ess:function(a){
 80a4694:	656e 7774 726f 5f6b 696c 7473 613d 732e     network_list=a.s
 80a46a4:	6163 736e 633b 6e6f 6f73 656c 6c2e 676f     cans;console.log
 80a46b4:	2728 2049 6f66 6e75 3a64 2927 763b 7261     ('I found:');var
 80a46c4:	6220 643d 636f 6d75 6e65 2e74 6567 4574      b=document.getE
 80a46d4:	656c 656d 746e 7942 6449 2728 656e 7774     lementById('netw
 80a46e4:	726f 736b 642d 7669 2927 623b 692e 6e6e     orks-div');b.inn
 80a46f4:	7265 5448 4c4d 273d 3b27 6669 6e28 7465     erHTML='';if(net
 80a4704:	6f77 6b72 6c5f 7369 2e74 656c 676e 6874     work_list.length
 80a4714:	303e 6629 726f 7628 7261 6320 303d 633b     >0)for(var c=0;c
 80a4724:	6e3c 7465 6f77 6b72 6c5f 7369 2e74 656c     <network_list.le
 80a4734:	676e 6874 633b 2b2b 7b29 7373 6469 6e3d     ngth;c++){ssid=n
 80a4744:	7465 6f77 6b72 6c5f 7369 5b74 5d63 732e     etwork_list[c].s
 80a4754:	6973 3b64 6f63 736e 6c6f 2e65 6f6c 2867     sid;console.log(
 80a4764:	656e 7774 726f 5f6b 696c 7473 635b 295d     network_list[c])
 80a4774:	613b 6464 775f 6669 5f69 706f 6974 6e6f     ;add_wifi_option
 80a4784:	6228 732c 6973 2964 643b 636f 6d75 6e65     (b,ssid);documen
 80a4794:	2e74 6567 4574 656c 656d 746e 7942 6449     t.getElementById
 80a47a4:	2728 6f63 6e6e 6365 2d74 6964 2776 2e29     ('connect-div').
 80a47b4:	7473 6c79 2e65 6964 7073 616c 3d79 6227     style.display='b
 80a47c4:	6f6c 6b63 3b27 657d 736c 2065 2e62 6e69     lock';}else b.in
 80a47d4:	656e 4872 4d54 3d4c 3c27 2070 6c63 7361     nerHTML='<p clas
 80a47e4:	3d73 275c 6373 6e61 696e 676e 652d 7272     s=\'scanning-err
 80a47f4:	726f 275c 4e3e 206f 656e 7774 726f 736b     or\'>No networks
 80a4804:	6620 756f 646e 3c2e 702f 273e 7d3b 652c      found.</p>';},e
 80a4814:	7272 726f 663a 6e75 7463 6f69 286e 2961     rror:function(a)
 80a4824:	637b 6e6f 6f73 656c 6c2e 676f 2728 6353     {console.log('Sc
 80a4834:	6e61 696e 676e 6520 7272 726f 273a 612b     anning error:'+a
 80a4844:	3b29 6f64 7563 656d 746e 672e 7465 6c45     );document.getEl
 80a4854:	6d65 6e65 4274 4979 2864 6e27 7465 6f77     ementById('netwo
 80a4864:	6b72 2d73 6964 2776 2e29 6e69 656e 4872     rks-div').innerH
 80a4874:	4d54 3d4c 3c27 2070 6c63 7361 3d73 275c     TML='<p class=\'
 80a4884:	6373 6e61 696e 676e 652d 7272 726f 275c     scanning-error\'
 80a4894:	533e 6163 6e6e 6e69 2067 7265 6f72 2e72     >Scanning error.
 80a48a4:	2f3c 3e70 3b27 2c7d 6572 6167 6472 656c     </p>';},regardle
 80a48b4:	7373 663a 6e75 7463 6f69 286e 7b29 6373     ss:function(){sc
 80a48c4:	6e61 7542 7474 6e6f 692e 6e6e 7265 5448     anButton.innerHT
 80a48d4:	4c4d 273d 6552 532d 6163 276e 653b 616e     ML='Re-Scan';ena
 80a48e4:	6c62 4265 7475 6f74 736e 2928 643b 636f     bleButtons();doc
 80a48f4:	6d75 6e65 2e74 6567 4574 656c 656d 746e     ument.getElement
 80a4904:	7942 6449 2728 656e 7774 726f 736b 642d     ById('networks-d
 80a4914:	7669 2927 732e 7974 656c 642e 7369 6c70     iv').style.displ
 80a4924:	7961 273d 6c62 636f 276b 7d3b 3b7d 6176     ay='block';}};va
 80a4934:	2072 6f63 666e 6769 7275 3d65 7566 636e     r configure=func
 80a4944:	6974 6e6f 6128 7b29 2e61 7270 7665 6e65     tion(a){a.preven
 80a4954:	4474 6665 7561 746c 2928 763b 7261 6220     tDefault();var b
 80a4964:	673d 7465 735f 6c65 6365 6574 5f64 656e     =get_selected_ne
 80a4974:	7774 726f 286b 3b29 6176 2072 3d63 6f64     twork();var c=do
 80a4984:	7563 656d 746e 672e 7465 6c45 6d65 6e65     cument.getElemen
 80a4994:	4274 4979 2864 7027 7361 7773 726f 2764     tById('password'
 80a49a4:	2e29 6176 756c 3b65 6669 2128 2962 777b     ).value;if(!b){w
 80a49b4:	6e69 6f64 2e77 6c61 7265 2874 5027 656c     indow.alert('Ple
 80a49c4:	7361 2065 6573 656c 7463 6120 6e20 7465     ase select a net
 80a49d4:	6f77 6b72 2721 3b29 6572 7574 6e72 6620     work!');return f
 80a49e4:	6c61 6573 7d3b 6176 2072 3d64 697b 7864     alse;}var d={idx
 80a49f4:	303a 732c 6973 3a64 2e62 7373 6469 702c     :0,ssid:b.ssid,p
 80a4a04:	6477 723a 6173 652e 636e 7972 7470 6328     wd:rsa.encrypt(c
 80a4a14:	2c29 6573 3a63 2e62 6573 2c63 6863 623a     ),sec:b.sec,ch:b
 80a4a24:	632e 7d68 633b 6e6f 656e 7463 7542 7474     .ch};connectButt
 80a4a34:	6e6f 692e 6e6e 7265 5448 4c4d 273d 6553     on.innerHTML='Se
 80a4a44:	646e 6e69 2067 7263 6465 6e65 6974 6c61     nding credential
 80a4a54:	2e73 2e2e 3b27 6964 6173 6c62 4265 7475     s...';disableBut
 80a4a64:	6f74 736e 2928 633b 6e6f 6f73 656c 6c2e     tons();console.l
 80a4a74:	676f 2728 6553 646e 6e69 2067 7263 6465     og('Sending cred
 80a4a84:	6e65 6974 6c61 3a73 2720 4a2b 4f53 2e4e     entials: '+JSON.
 80a4a94:	7473 6972 676e 6669 2879 2964 3b29 6f70     stringify(d));po
 80a4aa4:	7473 6552 7571 7365 2874 6162 6573 755f     stRequest(base_u
 80a4ab4:	6c72 272b 6f63 666e 6769 7275 2d65 7061     rl+'configure-ap
 80a4ac4:	2c27 2c64 6f63 666e 6769 7275 5f65 6163     ',d,configure_ca
 80a4ad4:	6c6c 6162 6b63 3b29 3b7d 6176 2072 6f63     llback);};var co
 80a4ae4:	666e 6769 7275 5f65 6163 6c6c 6162 6b63     nfigure_callback
 80a4af4:	7b3d 7573 6363 7365 3a73 7566 636e 6974     ={success:functi
 80a4b04:	6e6f 6128 7b29 6f63 736e 6c6f 2e65 6f6c     on(a){console.lo
 80a4b14:	2867 4327 6572 6564 746e 6169 736c 7220     g('Credentials r
 80a4b24:	6365 6965 6576 2e64 2927 633b 6e6f 656e     eceived.');conne
 80a4b34:	7463 7542 7474 6e6f 692e 6e6e 7265 5448     ctButton.innerHT
 80a4b44:	4c4d 273d 7243 6465 6e65 6974 6c61 2073     ML='Credentials 
 80a4b54:	6572 6563 7669 6465 2e2e 272e 703b 736f     received...';pos
 80a4b64:	5274 7165 6575 7473 6228 7361 5f65 7275     tRequest(base_ur
 80a4b74:	2b6c 6327 6e6f 656e 7463 612d 2770 7b2c     l+'connect-ap',{
 80a4b84:	6469 3a78 7d30 632c 6e6f 656e 7463 635f     idx:0},connect_c
 80a4b94:	6c61 626c 6361 296b 7d3b 652c 7272 726f     allback);},error
 80a4ba4:	663a 6e75 7463 6f69 286e 2c61 2962 637b     :function(a,b){c
 80a4bb4:	6e6f 6f73 656c 6c2e 676f 2728 6f43 666e     onsole.log('Conf
 80a4bc4:	6769 7275 2065 7265 6f72 3a72 2720 612b     igure error: '+a
 80a4bd4:	3b29 6977 646e 776f 612e 656c 7472 2728     );window.alert('
 80a4be4:	6854 2065 6f63 666e 6769 7275 7461 6f69     The configuratio
 80a4bf4:	206e 6f63 6d6d 6e61 2064 6166 6c69 6465     n command failed
 80a4c04:	202c 6863 6365 206b 6874 7461 7920 756f     , check that you
 80a4c14:	6120 6572 7320 6974 6c6c 7720 6c65 206c      are still well 
 80a4c24:	6f63 6e6e 6365 6574 2064 6f74 7420 6568     connected to the
 80a4c34:	6420 7665 6369 5c65 7327 5720 4669 2069      device\'s WiFi 
 80a4c44:	6f68 7374 6f70 2074 6e61 2064 6572 7274     hotspot and retr
 80a4c54:	2e79 2927 633b 6e6f 656e 7463 7542 7474     y.');connectButt
 80a4c64:	6e6f 692e 6e6e 7265 5448 4c4d 273d 6552     on.innerHTML='Re
 80a4c74:	7274 2779 653b 616e 6c62 4265 7475 6f74     try';enableButto
 80a4c84:	736e 2928 7d3b 3b7d 6176 2072 6f63 6e6e     ns();}};var conn
 80a4c94:	6365 5f74 6163 6c6c 6162 6b63 7b3d 7573     ect_callback={su
 80a4ca4:	6363 7365 3a73 7566 636e 6974 6e6f 6128     ccess:function(a
 80a4cb4:	7b29 6f63 736e 6c6f 2e65 6f6c 2867 4127     ){console.log('A
 80a4cc4:	7474 6d65 7470 6e69 2067 6f74 6320 6e6f     ttempting to con
 80a4cd4:	656e 7463 7420 206f 6874 2065 6c63 756f     nect to the clou
 80a4ce4:	2e64 2927 633b 6e6f 656e 7463 7542 7474     d.');connectButt
 80a4cf4:	6e6f 692e 6e6e 7265 5448 4c4d 273d 7441     on.innerHTML='At
 80a4d04:	6574 706d 6974 676e 7420 206f 6f63 6e6e     tempting to conn
 80a4d14:	6365 2e74 2e2e 3b27 6977 646e 776f 612e     ect...';window.a
 80a4d24:	656c 7472 2728 6f59 7275 6420 7665 6369     lert('Your devic
 80a4d34:	2065 6873 756f 646c 6e20 776f 7320 6174     e should now sta
 80a4d44:	7472 6620 616c 6873 6e69 2067 7267 6565     rt flashing gree
 80a4d54:	206e 6e61 2064 7461 6574 706d 2074 6f74     n and attempt to
 80a4d64:	6320 6e6f 656e 7463 7420 206f 6874 2065      connect to the 
 80a4d74:	6c63 756f 2e64 5420 6968 2073 7375 6175     cloud. This usua
 80a4d84:	6c6c 2079 6174 656b 2073 6261 756f 2074     lly takes about 
 80a4d94:	3032 7320 6365 6e6f 7364 202c 6661 6574     20 seconds, afte
 80a4da4:	2072 6877 6369 2068 7469 7720 6c69 206c     r which it will 
 80a4db4:	6562 6967 206e 6c73 776f 796c 6220 696c     begin slowly bli
 80a4dc4:	6b6e 6e69 2067 7963 6e61 202e 6e5c 6e5c     nking cyan. \n\n
 80a4dd4:	6e5c 6649 7420 6968 2073 7270 636f 7365     \nIf this proces
 80a4de4:	2073 6166 6c69 2073 6562 6163 7375 2065     s fails because 
 80a4df4:	6f79 2075 6e65 6574 6572 2064 6874 2065     you entered the 
 80a4e04:	7277 6e6f 2067 6170 7373 6f77 6472 202c     wrong password, 
 80a4e14:	6874 2065 6564 6976 6563 7720 6c69 206c     the device will 
 80a4e24:	6c66 7361 2068 7267 6565 206e 6e69 6564     flash green inde
 80a4e34:	6966 696e 6574 796c 202e 6e49 7420 6968     finitely. In thi
 80a4e44:	2073 6163 6573 202c 6f68 646c 7420 6568     s case, hold the
 80a4e54:	7320 7465 7075 6220 7475 6f74 206e 6f66      setup button fo
 80a4e64:	2072 2036 6573 6f63 646e 2073 6e75 6974     r 6 seconds unti
 80a4e74:	206c 6874 2065 6564 6976 6563 7320 6174     l the device sta
 80a4e84:	7472 2073 6c62 6e69 696b 676e 6220 756c     rts blinking blu
 80a4e94:	2065 6761 6961 2e6e 5420 6568 206e 6572     e again. Then re
 80a4ea4:	6f63 6e6e 6365 2074 6f74 7420 6568 5720     connect to the W
 80a4eb4:	4669 2069 6f68 7374 6f70 2074 7469 6720     iFi hotspot it g
 80a4ec4:	6e65 7265 7461 7365 6120 646e 7220 6c65     enerates and rel
 80a4ed4:	616f 2064 6874 7369 7020 6761 2065 6f74     oad this page to
 80a4ee4:	7420 7972 6120 6167 6e69 272e 3b29 2c7d      try again.');},
 80a4ef4:	7265 6f72 3a72 7566 636e 6974 6e6f 6128     error:function(a
 80a4f04:	622c 7b29 6f63 736e 6c6f 2e65 6f6c 2867     ,b){console.log(
 80a4f14:	4327 6e6f 656e 7463 6520 7272 726f 203a     'Connect error: 
 80a4f24:	2b27 2961 773b 6e69 6f64 2e77 6c61 7265     '+a);window.aler
 80a4f34:	2874 5427 6568 6320 6e6f 656e 7463 6320     t('The connect c
 80a4f44:	6d6f 616d 646e 6620 6961 656c 2c64 6320     ommand failed, c
 80a4f54:	6568 6b63 7420 6168 2074 6f79 2075 7261     heck that you ar
 80a4f64:	2065 7473 6c69 206c 6577 6c6c 6320 6e6f     e still well con
 80a4f74:	656e 7463 6465 7420 206f 6874 2065 6564     nected to the de
 80a4f84:	6976 6563 275c 2073 6957 6946 6820 746f     vice\'s WiFi hot
 80a4f94:	7073 746f 6120 646e 7220 7465 7972 272e     spot and retry.'
 80a4fa4:	3b29 6f63 6e6e 6365 4274 7475 6f74 2e6e     );connectButton.
 80a4fb4:	6e69 656e 4872 4d54 3d4c 5227 7465 7972     innerHTML='Retry
 80a4fc4:	3b27 6e65 6261 656c 7542 7474 6e6f 2873     ';enableButtons(
 80a4fd4:	3b29 7d7d 763b 7261 6420 7369 6261 656c     );}};var disable
 80a4fe4:	7542 7474 6e6f 3d73 7566 636e 6974 6e6f     Buttons=function
 80a4ff4:	2928 637b 6e6f 656e 7463 7542 7474 6e6f     (){connectButton
 80a5004:	642e 7369 6261 656c 3d64 7274 6575 733b     .disabled=true;s
 80a5014:	6163 426e 7475 6f74 2e6e 6964 6173 6c62     canButton.disabl
 80a5024:	6465 743d 7572 3b65 3b7d 6176 2072 6e65     ed=true;};var en
 80a5034:	6261 656c 7542 7474 6e6f 3d73 7566 636e     ableButtons=func
 80a5044:	6974 6e6f 2928 637b 6e6f 656e 7463 7542     tion(){connectBu
 80a5054:	7474 6e6f 642e 7369 6261 656c 3d64 6166     tton.disabled=fa
 80a5064:	736c 3b65 6373 6e61 7542 7474 6e6f 642e     lse;scanButton.d
 80a5074:	7369 6261 656c 3d64 6166 736c 3b65 3b7d     isabled=false;};
 80a5084:	6176 2072 6461 5f64 6977 6966 6f5f 7470     var add_wifi_opt
 80a5094:	6f69 3d6e 7566 636e 6974 6e6f 6128 622c     ion=function(a,b
 80a50a4:	7b29 6176 2072 3d63 6f64 7563 656d 746e     ){var c=document
 80a50b4:	632e 6572 7461 4565 656c 656d 746e 2728     .createElement('
 80a50c4:	4e49 5550 2754 3b29 2e63 7974 6570 273d     INPUT');c.type='
 80a50d4:	6172 6964 276f 633b 762e 6c61 6575 623d     radio';c.value=b
 80a50e4:	633b 692e 3d64 3b62 2e63 616e 656d 273d     ;c.id=b;c.name='
 80a50f4:	7373 6469 3b27 2e63 6c63 7361 4e73 6d61     ssid';c.classNam
 80a5104:	3d65 7227 6461 6f69 3b27 6176 2072 3d64     e='radio';var d=
 80a5114:	6f64 7563 656d 746e 632e 6572 7461 4565     document.createE
 80a5124:	656c 656d 746e 2728 4944 2756 3b29 2e64     lement('DIV');d.
 80a5134:	6c63 7361 4e73 6d61 3d65 7227 6461 6f69     className='radio
 80a5144:	642d 7669 3b27 2e64 7061 6570 646e 6843     -div';d.appendCh
 80a5154:	6c69 2864 2963 763b 7261 6520 643d 636f     ild(c);var e=doc
 80a5164:	6d75 6e65 2e74 7263 6165 6574 6c45 6d65     ument.createElem
 80a5174:	6e65 2874 6c27 6261 6c65 2927 653b 682e     ent('label');e.h
 80a5184:	6d74 466c 726f 623d 653b 692e 6e6e 7265     tmlFor=b;e.inner
 80a5194:	5448 4c4d 623d 643b 612e 7070 6e65 4364     HTML=b;d.appendC
 80a51a4:	6968 646c 6528 3b29 2e61 7061 6570 646e     hild(e);a.append
 80a51b4:	6843 6c69 2864 2964 7d3b 763b 7261 6720     Child(d);};var g
 80a51c4:	7465 735f 6c65 6365 6574 5f64 656e 7774     et_selected_netw
 80a51d4:	726f 3d6b 7566 636e 6974 6e6f 2928 667b     ork=function(){f
 80a51e4:	726f 7628 7261 6120 303d 613b 6e3c 7465     or(var a=0;a<net
 80a51f4:	6f77 6b72 6c5f 7369 2e74 656c 676e 6874     work_list.length
 80a5204:	613b 2b2b 7b29 7373 6469 6e3d 7465 6f77     ;a++){ssid=netwo
 80a5214:	6b72 6c5f 7369 5b74 5d61 732e 6973 3b64     rk_list[a].ssid;
 80a5224:	6669 6428 636f 6d75 6e65 2e74 6567 4574     if(document.getE
 80a5234:	656c 656d 746e 7942 6449 7328 6973 2964     lementById(ssid)
 80a5244:	632e 6568 6b63 6465 7229 7465 7275 206e     .checked)return 
 80a5254:	656e 7774 726f 5f6b 696c 7473 615b 3b5d     network_list[a];
 80a5264:	7d7d 763b 7261 6320 706f 3d79 7566 636e     }};var copy=func
 80a5274:	6974 6e6f 2928 777b 6e69 6f64 2e77 7270     tion(){window.pr
 80a5284:	6d6f 7470 2728 6f43 7970 7420 206f 6c63     ompt('Copy to cl
 80a5294:	7069 6f62 7261 3a64 4320 7274 206c 202b     ipboard: Ctrl + 
 80a52a4:	2c43 4520 746e 7265 2c27 6564 6976 6563     C, Enter',device
 80a52b4:	4449 762e 6c61 6575 3b29 3b7d 6176 2072     ID.value);};var 
 80a52c4:	6f74 6767 656c 6853 776f 663d 6e75 7463     toggleShow=funct
 80a52d4:	6f69 286e 7b29 6176 2072 3d61 6f64 7563     ion(){var a=docu
 80a52e4:	656d 746e 672e 7465 6c45 6d65 6e65 4274     ment.getElementB
 80a52f4:	4979 2864 7027 7361 7773 726f 2764 3b29     yId('password');
 80a5304:	6e69 7570 5474 7079 3d65 2e61 7974 6570     inputType=a.type
 80a5314:	693b 2866 6e69 7570 5474 7079 3d65 3d3d     ;if(inputType===
 80a5324:	7027 7361 7773 726f 2764 7b29 6873 776f     'password'){show
 80a5334:	7542 7474 6e6f 692e 6e6e 7265 5448 4c4d     Button.innerHTML
 80a5344:	273d 6948 6564 3b27 2e61 7974 6570 273d     ='Hide';a.type='
 80a5354:	6574 7478 3b27 657d 736c 7b65 6873 776f     text';}else{show
 80a5364:	7542 7474 6e6f 692e 6e6e 7265 5448 4c4d     Button.innerHTML
 80a5374:	273d 6853 776f 3b27 2e61 7974 6570 273d     ='Show';a.type='
 80a5384:	6170 7373 6f77 6472 3b27 7d7d 763b 7261     password';}};var
 80a5394:	6720 7465 6552 7571 7365 3d74 7566 636e      getRequest=func
 80a53a4:	6974 6e6f 6128 622c 7b29 6176 2072 3d63     tion(a,b){var c=
 80a53b4:	656e 2077 4d58 484c 7474 5270 7165 6575     new XMLHttpReque
 80a53c4:	7473 2928 633b 6f2e 6570 286e 4727 5445     st();c.open('GET
 80a53d4:	2c27 2c61 7274 6575 3b29 2e63 6974 656d     ',a,true);c.time
 80a53e4:	756f 3d74 3038 3030 633b 732e 6e65 2864     out=8000;c.send(
 80a53f4:	3b29 2e63 6e6f 6572 6461 7379 6174 6574     );c.onreadystate
 80a5404:	6863 6e61 6567 663d 6e75 7463 6f69 286e     change=function(
 80a5414:	7b29 6669 6328 722e 6165 7964 7453 7461     ){if(c.readyStat
 80a5424:	3d65 343d 6929 2866 2962 697b 2866 2e63     e==4)if(b){if(c.
 80a5434:	7473 7461 7375 3d3d 3032 2930 697b 2866     status==200){if(
 80a5444:	2e62 7573 6363 7365 2973 2e62 7573 6363     b.success)b.succ
 80a5454:	7365 2873 534a 4e4f 702e 7261 6573 6328     ess(JSON.parse(c
 80a5464:	722e 7365 6f70 736e 5465 7865 2974 3b29     .responseText));
 80a5474:	657d 736c 2065 6669 6228 652e 7272 726f     }else if(b.error
 80a5484:	6229 652e 7272 726f 6328 732e 6174 7574     )b.error(c.statu
 80a5494:	2c73 2e63 6572 7073 6e6f 6573 6554 7478     s,c.responseText
 80a54a4:	3b29 6669 6228 722e 6765 7261 6c64 7365     );if(b.regardles
 80a54b4:	2973 2e62 6572 6167 6472 656c 7373 2928     s)b.regardless()
 80a54c4:	7d3b 3b7d 3b7d 6176 2072 6f70 7473 6552     ;}};};var postRe
 80a54d4:	7571 7365 3d74 7566 636e 6974 6e6f 6128     quest=function(a
 80a54e4:	622c 632c 7b29 6176 2072 3d64 534a 4e4f     ,b,c){var d=JSON
 80a54f4:	732e 7274 6e69 6967 7966 6228 3b29 6176     .stringify(b);va
 80a5504:	2072 3d65 656e 2077 4d58 484c 7474 5270     r e=new XMLHttpR
 80a5514:	7165 6575 7473 2928 653b 6f2e 6570 286e     equest();e.open(
 80a5524:	5027 534f 2754 612c 742c 7572 2965 653b     'POST',a,true);e
 80a5534:	742e 6d69 6f65 7475 343d 3030 3b30 2e65     .timeout=4000;e.
 80a5544:	6573 5274 7165 6575 7473 6548 6461 7265     setRequestHeader
 80a5554:	2728 6f43 746e 6e65 2d74 7954 6570 2c27     ('Content-Type',
 80a5564:	6d27 6c75 6974 6170 7472 662f 726f 2d6d     'multipart/form-
 80a5574:	6164 6174 2927 653b 732e 6e65 2864 2964     data');e.send(d)
 80a5584:	653b 6f2e 726e 6165 7964 7473 7461 6365     ;e.onreadystatec
 80a5594:	6168 676e 3d65 7566 636e 6974 6e6f 2928     hange=function()
 80a55a4:	697b 2866 2e65 6572 6461 5379 6174 6574     {if(e.readyState
 80a55b4:	3d3d 2934 6669 6328 7b29 6669 6528 732e     ==4)if(c){if(e.s
 80a55c4:	6174 7574 3d73 323d 3030 7b29 6669 6328     tatus==200){if(c
 80a55d4:	732e 6375 6563 7373 6329 732e 6375 6563     .success)c.succe
 80a55e4:	7373 4a28 4f53 2e4e 6170 7372 2865 2e65     ss(JSON.parse(e.
 80a55f4:	6572 7073 6e6f 6573 6554 7478 2929 7d3b     responseText));}
 80a5604:	6c65 6573 6920 2866 2e63 7265 6f72 2972     else if(c.error)
 80a5614:	2e63 7265 6f72 2872 2e65 7473 7461 7375     c.error(e.status
 80a5624:	652c 722e 7365 6f70 736e 5465 7865 2974     ,e.responseText)
 80a5634:	693b 2866 2e63 6572 6167 6472 656c 7373     ;if(c.regardless
 80a5644:	6329 722e 6765 7261 6c64 7365 2873 3b29     )c.regardless();
 80a5654:	7d7d 7d3b 693b 2866 6373 6e61 7542 7474     }};};if(scanButt
 80a5664:	6e6f 612e 6464 7645 6e65 4c74 7369 6574     on.addEventListe
 80a5674:	656e 2972 637b 706f 4279 7475 6f74 2e6e     ner){copyButton.
 80a5684:	6461 4564 6576 746e 694c 7473 6e65 7265     addEventListener
 80a5694:	2728 6c63 6369 276b 632c 706f 2979 733b     ('click',copy);s
 80a56a4:	6f68 4277 7475 6f74 2e6e 6461 4564 6576     howButton.addEve
 80a56b4:	746e 694c 7473 6e65 7265 2728 6c63 6369     ntListener('clic
 80a56c4:	276b 742c 676f 6c67 5365 6f68 2977 733b     k',toggleShow);s
 80a56d4:	6163 426e 7475 6f74 2e6e 6461 4564 6576     canButton.addEve
 80a56e4:	746e 694c 7473 6e65 7265 2728 6c63 6369     ntListener('clic
 80a56f4:	276b 732c 6163 296e 633b 6e6f 656e 7463     k',scan);connect
 80a5704:	6f46 6d72 612e 6464 7645 6e65 4c74 7369     Form.addEventLis
 80a5714:	6574 656e 2872 7327 6275 696d 2774 632c     tener('submit',c
 80a5724:	6e6f 6966 7567 6572 3b29 657d 736c 2065     onfigure);}else 
 80a5734:	6669 7328 6163 426e 7475 6f74 2e6e 7461     if(scanButton.at
 80a5744:	6174 6863 7645 6e65 2974 637b 706f 4279     tachEvent){copyB
 80a5754:	7475 6f74 2e6e 7461 6174 6863 7645 6e65     utton.attachEven
 80a5764:	2874 6f27 636e 696c 6b63 2c27 6f63 7970     t('onclick',copy
 80a5774:	3b29 6873 776f 7542 7474 6e6f 612e 7474     );showButton.att
 80a5784:	6361 4568 6576 746e 2728 6e6f 6c63 6369     achEvent('onclic
 80a5794:	276b 742c 676f 6c67 5365 6f68 2977 733b     k',toggleShow);s
 80a57a4:	6163 426e 7475 6f74 2e6e 7461 6174 6863     canButton.attach
 80a57b4:	7645 6e65 2874 6f27 636e 696c 6b63 2c27     Event('onclick',
 80a57c4:	6373 6e61 3b29 6f63 6e6e 6365 4674 726f     scan);connectFor
 80a57d4:	2e6d 7461 6174 6863 7645 6e65 2874 6f27     m.attachEvent('o
 80a57e4:	736e 6275 696d 2774 632c 6e6f 6966 7567     nsubmit',configu
 80a57f4:	6572 3b29 677d 7465 6552 7571 7365 2874     re);}getRequest(
 80a5804:	6162 6573 755f 6c72 272b 6564 6976 6563     base_url+'device
 80a5814:	692d 2764 642c 7665 6369 5f65 6469 635f     -id',device_id_c
 80a5824:	6c61 626c 6361 296b 673b 7465 6552 7571     allback);getRequ
 80a5834:	7365 2874 6162 6573 755f 6c72 272b 7570     est(base_url+'pu
 80a5844:	6c62 6369 6b2d 7965 2c27 7570 6c62 6369     blic-key',public
 80a5854:	6b5f 7965 635f 6c61 626c 6361 296b 003b     _key_callback);.

080a5864 <_ZL6rsa_js>:
 80a5864:	7566 636e 6974 6e6f 7020 7261 6573 6942     function parseBi
 80a5874:	4967 746e 6128 622c 7b29 6572 7574 6e72     gInt(a,b){return
 80a5884:	6e20 7765 4220 6769 6e49 6574 6567 2872      new BigInteger(
 80a5894:	2c61 2962 7d3b 7566 636e 6974 6e6f 6c20     a,b);}function l
 80a58a4:	6e69 6265 6b72 6128 622c 7b29 6176 2072     inebrk(a,b){var 
 80a58b4:	3d63 2727 763b 7261 6420 303d 773b 6968     c='';var d=0;whi
 80a58c4:	656c 6428 622b 613c 6c2e 6e65 7467 2968     le(d+b<a.length)
 80a58d4:	637b 3d2b 2e61 7573 7362 7274 6e69 2867     {c+=a.substring(
 80a58e4:	2c64 2b64 2962 272b 6e5c 3b27 2b64 623d     d,d+b)+'\n';d+=b
 80a58f4:	7d3b 6572 7574 6e72 6320 612b 732e 6275     ;}return c+a.sub
 80a5904:	7473 6972 676e 6428 612c 6c2e 6e65 7467     string(d,a.lengt
 80a5914:	2968 7d3b 7566 636e 6974 6e6f 6220 7479     h);}function byt
 80a5924:	3265 6548 2878 2961 697b 2866 3c61 7830     e2Hex(a){if(a<0x
 80a5934:	3031 7229 7465 7275 206e 3027 2b27 2e61     10)return '0'+a.
 80a5944:	6f74 7453 6972 676e 3128 2936 653b 736c     toString(16);els
 80a5954:	2065 6572 7574 6e72 6120 742e 536f 7274     e return a.toStr
 80a5964:	6e69 2867 3631 3b29 667d 6e75 7463 6f69     ing(16);}functio
 80a5974:	206e 6b70 7363 7031 6461 2832 2c61 2962     n pkcs1pad2(a,b)
 80a5984:	697b 2866 3c62 2e61 656c 676e 6874 312b     {if(b<a.length+1
 80a5994:	2931 617b 656c 7472 2728 654d 7373 6761     1){alert('Messag
 80a59a4:	2065 6f74 206f 6f6c 676e 6620 726f 5220     e too long for R
 80a59b4:	4153 2927 723b 7465 7275 206e 756e 6c6c     SA');return null
 80a59c4:	7d3b 6176 2072 3d63 656e 2077 7241 6172     ;}var c=new Arra
 80a59d4:	2879 3b29 6176 2072 3d64 2e61 656c 676e     y();var d=a.leng
 80a59e4:	6874 312d 773b 6968 656c 6428 3d3e 2630     th-1;while(d>=0&
 80a59f4:	6226 303e 7b29 6176 2072 3d65 2e61 6863     &b>0){var e=a.ch
 80a5a04:	7261 6f43 6564 7441 6428 2d2d 3b29 6669     arCodeAt(d--);if
 80a5a14:	6528 313c 3832 6329 2d5b 622d 3d5d 3b65     (e<128)c[--b]=e;
 80a5a24:	6c65 6573 6920 2866 6528 313e 3732 2629     else if((e>127)&
 80a5a34:	2826 3c65 3032 3834 2929 637b 2d5b 622d     &(e<2048)){c[--b
 80a5a44:	3d5d 6528 3626 2933 317c 3832 633b 2d5b     ]=(e&63)|128;c[-
 80a5a54:	622d 3d5d 6528 3e3e 2936 317c 3239 7d3b     -b]=(e>>6)|192;}
 80a5a64:	6c65 6573 637b 2d5b 622d 3d5d 6528 3626     else{c[--b]=(e&6
 80a5a74:	2933 317c 3832 633b 2d5b 622d 3d5d 2828     3)|128;c[--b]=((
 80a5a84:	3e65 363e 2629 3336 7c29 3231 3b38 5b63     e>>6)&63)|128;c[
 80a5a94:	2d2d 5d62 283d 3e65 313e 2932 327c 3432     --b]=(e>>12)|224
 80a5aa4:	7d3b 637d 2d5b 622d 3d5d 3b30 6176 2072     ;}}c[--b]=0;var 
 80a5ab4:	3d66 656e 2077 6553 7563 6572 6152 646e     f=new SecureRand
 80a5ac4:	6d6f 2928 763b 7261 6720 6e3d 7765 4120     om();var g=new A
 80a5ad4:	7272 7961 2928 773b 6968 656c 6228 323e     rray();while(b>2
 80a5ae4:	7b29 5b67 5d30 303d 773b 6968 656c 6728     ){g[0]=0;while(g
 80a5af4:	305b 3d5d 303d 6629 6e2e 7865 4274 7479     [0]==0)f.nextByt
 80a5b04:	7365 6728 3b29 5b63 2d2d 5d62 673d 305b     es(g);c[--b]=g[0
 80a5b14:	3b5d 637d 2d5b 622d 3d5d 3b32 5b63 2d2d     ];}c[--b]=2;c[--
 80a5b24:	5d62 303d 723b 7465 7275 206e 656e 2077     b]=0;return new 
 80a5b34:	6942 4967 746e 6765 7265 6328 3b29 667d     BigInteger(c);}f
 80a5b44:	6e75 7463 6f69 206e 5352 4b41 7965 2928     unction RSAKey()
 80a5b54:	747b 6968 2e73 3d6e 756e 6c6c 743b 6968     {this.n=null;thi
 80a5b64:	2e73 3d65 3b30 6874 7369 642e 6e3d 6c75     s.e=0;this.d=nul
 80a5b74:	3b6c 6874 7369 702e 6e3d 6c75 3b6c 6874     l;this.p=null;th
 80a5b84:	7369 712e 6e3d 6c75 3b6c 6874 7369 642e     is.q=null;this.d
 80a5b94:	706d 3d31 756e 6c6c 743b 6968 2e73 6d64     mp1=null;this.dm
 80a5ba4:	3171 6e3d 6c75 3b6c 6874 7369 632e 656f     q1=null;this.coe
 80a5bb4:	6666 6e3d 6c75 3b6c 667d 6e75 7463 6f69     ff=null;}functio
 80a5bc4:	206e 5352 5341 7465 7550 6c62 6369 6128     n RSASetPublic(a
 80a5bd4:	622c 7b29 6669 6128 3d21 756e 6c6c 2626     ,b){if(a!=null&&
 80a5be4:	2162 6e3d 6c75 266c 6126 6c2e 6e65 7467     b!=null&&a.lengt
 80a5bf4:	3e68 2630 6226 6c2e 6e65 7467 3e68 2930     h>0&&b.length>0)
 80a5c04:	747b 6968 2e73 3d6e 6170 7372 4265 6769     {this.n=parseBig
 80a5c14:	6e49 2874 2c61 3631 3b29 6874 7369 652e     Int(a,16);this.e
 80a5c24:	703d 7261 6573 6e49 2874 2c62 3631 3b29     =parseInt(b,16);
 80a5c34:	657d 736c 2065 6c61 7265 2874 4927 766e     }else alert('Inv
 80a5c44:	6c61 6469 5220 4153 7020 6275 696c 2063     alid RSA public 
 80a5c54:	656b 2779 3b29 667d 6e75 7463 6f69 206e     key');}function 
 80a5c64:	5352 4441 506f 6275 696c 2863 2961 727b     RSADoPublic(a){r
 80a5c74:	7465 7275 206e 2e61 6f6d 5064 776f 6e49     eturn a.modPowIn
 80a5c84:	2874 6874 7369 652e 742c 6968 2e73 296e     t(this.e,this.n)
 80a5c94:	7d3b 7566 636e 6974 6e6f 5220 4153 6e45     ;}function RSAEn
 80a5ca4:	7263 7079 2874 2961 767b 7261 6220 703d     crypt(a){var b=p
 80a5cb4:	636b 3173 6170 3264 6128 282c 6874 7369     kcs1pad2(a,(this
 80a5cc4:	6e2e 622e 7469 654c 676e 6874 2928 372b     .n.bitLength()+7
 80a5cd4:	3e29 333e 3b29 6669 6228 3d3d 756e 6c6c     )>>3);if(b==null
 80a5ce4:	7229 7465 7275 206e 756e 6c6c 763b 7261     )return null;var
 80a5cf4:	6320 743d 6968 2e73 6f64 7550 6c62 6369      c=this.doPublic
 80a5d04:	6228 3b29 6669 6328 3d3d 756e 6c6c 7229     (b);if(c==null)r
 80a5d14:	7465 7275 206e 756e 6c6c 763b 7261 6420     eturn null;var d
 80a5d24:	633d 742e 536f 7274 6e69 2867 3631 3b29     =c.toString(16);
 80a5d34:	6669 2828 2e64 656c 676e 6874 3126 3d29     if((d.length&1)=
 80a5d44:	303d 7229 7465 7275 206e 3b64 6c65 6573     =0)return d;else
 80a5d54:	7220 7465 7275 206e 3027 2b27 3b64 527d      return '0'+d;}R
 80a5d64:	4153 654b 2e79 7270 746f 746f 7079 2e65     SAKey.prototype.
 80a5d74:	6f64 7550 6c62 6369 523d 4153 6f44 7550     doPublic=RSADoPu
 80a5d84:	6c62 6369 523b 4153 654b 2e79 7270 746f     blic;RSAKey.prot
 80a5d94:	746f 7079 2e65 6573 5074 6275 696c 3d63     otype.setPublic=
 80a5da4:	5352 5341 7465 7550 6c62 6369 523b 4153     RSASetPublic;RSA
 80a5db4:	654b 2e79 7270 746f 746f 7079 2e65 6e65     Key.prototype.en
 80a5dc4:	7263 7079 3d74 5352 4541 636e 7972 7470     crypt=RSAEncrypt
 80a5dd4:	003b                                        ;.

080a5dd6 <_ZL10index_html>:
 80a5dd6:	213c 4f44 5443 5059 2045 7468 6c6d 3c3e     <!DOCTYPE html><
 80a5de6:	7468 6c6d 3c3e 6568 6461 203e 6d3c 7465     html><head> <met
 80a5df6:	2061 616e 656d 273d 6976 7765 6f70 7472     a name='viewport
 80a5e06:	2027 6f63 746e 6e65 3d74 7727 6469 6874     ' content='width
 80a5e16:	643d 7665 6369 2d65 6977 7464 2c68 6920     =device-width, i
 80a5e26:	696e 6974 6c61 732d 6163 656c 313d 3e27     nitial-scale=1'>
 80a5e36:	3c20 6974 6c74 3e65 6553 7574 2070 6f79      <title>Setup yo
 80a5e46:	7275 6420 7665 6369 3c65 742f 7469 656c     ur device</title
 80a5e56:	203e 6c3c 6e69 206b 6572 3d6c 7327 7974     > <link rel='sty
 80a5e66:	656c 6873 6565 2774 7420 7079 3d65 7427     lesheet' type='t
 80a5e76:	7865 2f74 7363 2773 6820 6572 3d66 7327     ext/css' href='s
 80a5e86:	7974 656c 632e 7373 3e27 2f3c 6568 6461     tyle.css'></head
 80a5e96:	3c3e 6f62 7964 203e 683c 3e31 6f43 6e6e     ><body> <h1>Conn
 80a5ea6:	6365 2074 6f79 7275 5020 4f52 5544 5443     ect your PRODUCT
 80a5eb6:	7420 206f 6957 6946 2f3c 3168 203e 683c      to WiFi</h1> <h
 80a5ec6:	3e33 794d 6420 7665 6369 2065 4449 3c3a     3>My device ID:<
 80a5ed6:	682f 3e33 693c 706e 7475 7420 7079 3d65     /h3><input type=
 80a5ee6:	6574 7478 6920 3d64 6427 7665 6369 2d65     text id='device-
 80a5ef6:	6469 2027 6973 657a 273d 3532 2027 6176     id' size='25' va
 80a5f06:	756c 3d65 2727 6420 7369 6261 656c 2f64     lue='' disabled/
 80a5f16:	3c3e 7562 7474 6e6f 7420 7079 3d65 6227     ><button type='b
 80a5f26:	7475 6f74 276e 6320 616c 7373 273d 6e69     utton' class='in
 80a5f36:	7570 2d74 6568 706c 7265 2027 6469 273d     put-helper' id='
 80a5f46:	6f63 7970 622d 7475 6f74 276e 433e 706f     copy-button'>Cop
 80a5f56:	3c79 622f 7475 6f74 3e6e 3c20 6964 2076     y</button> <div 
 80a5f66:	6469 273d 6373 6e61 642d 7669 3e27 3c20     id='scan-div'> <
 80a5f76:	3368 533e 6163 206e 6f66 2072 6976 6973     h3>Scan for visi
 80a5f86:	6c62 2065 6957 6946 6e20 7465 6f77 6b72     ble WiFi network
 80a5f96:	3c73 682f 3e33 623c 7475 6f74 206e 6469     s</h3><button id
 80a5fa6:	273d 6373 6e61 622d 7475 6f74 276e 7420     ='scan-button' t
 80a5fb6:	7079 3d65 6227 7475 6f74 276e 533e 6163     ype='button'>Sca
 80a5fc6:	3c6e 622f 7475 6f74 3e6e 2f3c 6964 3e76     n</button></div>
 80a5fd6:	643c 7669 6920 3d64 6e27 7465 6f77 6b72     <div id='network
 80a5fe6:	2d73 6964 2776 3c3e 642f 7669 3c3e 6964     s-div'></div><di
 80a5ff6:	2076 6469 273d 6f63 6e6e 6365 2d74 6964     v id='connect-di
 80a6006:	2776 7320 7974 656c 273d 6964 7073 616c     v' style='displa
 80a6016:	3a79 6e20 6e6f 2765 203e 703c 443e 6e6f     y: none'> <p>Don
 80a6026:	7427 7320 6565 7920 756f 2072 656e 7774     't see your netw
 80a6036:	726f 3f6b 4d20 766f 2065 656d 6320 6f6c     ork? Move me clo
 80a6046:	6573 2072 6f74 7920 756f 2072 6f72 7475     ser to your rout
 80a6056:	7265 202c 6874 6e65 7220 2d65 6373 6e61     er, then re-scan
 80a6066:	3c2e 702f 3c3e 6f66 6d72 6920 3d64 6327     .</p><form id='c
 80a6076:	6e6f 656e 7463 662d 726f 276d 3c3e 6e69     onnect-form'><in
 80a6086:	7570 2074 7974 6570 273d 6170 7373 6f77     put type='passwo
 80a6096:	6472 2027 6469 273d 6170 7373 6f77 6472     rd' id='password
 80a60a6:	2027 6973 657a 273d 3532 2027 6c70 6361     ' size='25' plac
 80a60b6:	6865 6c6f 6564 3d72 7027 7361 7773 726f     eholder='passwor
 80a60c6:	2764 3e2f 623c 7475 6f74 206e 7974 6570     d'/><button type
 80a60d6:	273d 7562 7474 6e6f 2027 6c63 7361 3d73     ='button' class=
 80a60e6:	6927 706e 7475 682d 6c65 6570 2772 6920     'input-helper' i
 80a60f6:	3d64 7327 6f68 2d77 7562 7474 6e6f 3e27     d='show-button'>
 80a6106:	6853 776f 2f3c 7562 7474 6e6f 3c3e 7562     Show</button><bu
 80a6116:	7474 6e6f 7420 7079 3d65 7327 6275 696d     tton type='submi
 80a6126:	2774 6920 3d64 6327 6e6f 656e 7463 622d     t' id='connect-b
 80a6136:	7475 6f74 276e 433e 6e6f 656e 7463 2f3c     utton'>Connect</
 80a6146:	7562 7474 6e6f 3c3e 662f 726f 3e6d 3c20     button></form> <
 80a6156:	642f 7669 3c3e 6373 6972 7470 7320 6372     /div><script src
 80a6166:	273d 7372 2d61 7475 6c69 2f73 736a 6e62     ='rsa-utils/jsbn
 80a6176:	315f 6a2e 2773 3c3e 732f 7263 7069 3e74     _1.js'></script>
 80a6186:	3c20 6373 6972 7470 7320 6372 273d 7372      <script src='rs
 80a6196:	2d61 7475 6c69 2f73 736a 6e62 325f 6a2e     a-utils/jsbn_2.j
 80a61a6:	2773 3c3e 732f 7263 7069 3e74 3c20 6373     s'></script> <sc
 80a61b6:	6972 7470 7320 6372 273d 7372 2d61 7475     ript src='rsa-ut
 80a61c6:	6c69 2f73 7270 676e 2e34 736a 3e27 2f3c     ils/prng4.js'></
 80a61d6:	6373 6972 7470 203e 733c 7263 7069 2074     script> <script 
 80a61e6:	7273 3d63 7227 6173 752d 6974 736c 722f     src='rsa-utils/r
 80a61f6:	676e 6a2e 2773 3c3e 732f 7263 7069 3e74     ng.js'></script>
 80a6206:	3c20 6373 6972 7470 7320 6372 273d 7372      <script src='rs
 80a6216:	2d61 7475 6c69 2f73 7372 2e61 736a 3e27     a-utils/rsa.js'>
 80a6226:	2f3c 6373 6972 7470 203e 733c 7263 7069     </script> <scrip
 80a6236:	2074 7273 3d63 7327 7263 7069 2e74 736a     t src='script.js
 80a6246:	3e27 2f3c 6373 6972 7470 3c3e 622f 646f     '></script></bod
 80a6256:	3e79 2f3c 7468 6c6d 003e                    y></html>.

080a6260 <_ZL6rng_js>:
 80a6260:	6176 2072 6e72 5f67 7473 7461 3b65 6176     var rng_state;va
 80a6270:	2072 6e72 5f67 6f70 6c6f 763b 7261 7220     r rng_pool;var r
 80a6280:	676e 705f 7470 3b72 7566 636e 6974 6e6f     ng_pptr;function
 80a6290:	7220 676e 735f 6565 5f64 6e69 2874 2961      rng_seed_int(a)
 80a62a0:	727b 676e 705f 6f6f 5b6c 6e72 5f67 7070     {rng_pool[rng_pp
 80a62b0:	7274 2b2b 5e5d 613d 3226 3535 723b 676e     tr++]^=a&255;rng
 80a62c0:	705f 6f6f 5b6c 6e72 5f67 7070 7274 2b2b     _pool[rng_pptr++
 80a62d0:	5e5d 283d 3e61 383e 2629 3532 3b35 6e72     ]^=(a>>8)&255;rn
 80a62e0:	5f67 6f70 6c6f 725b 676e 705f 7470 2b72     g_pool[rng_pptr+
 80a62f0:	5d2b 3d5e 6128 3e3e 3631 2629 3532 3b35     +]^=(a>>16)&255;
 80a6300:	6e72 5f67 6f70 6c6f 725b 676e 705f 7470     rng_pool[rng_ppt
 80a6310:	2b72 5d2b 3d5e 6128 3e3e 3432 2629 3532     r++]^=(a>>24)&25
 80a6320:	3b35 6669 7228 676e 705f 7470 3e72 723d     5;if(rng_pptr>=r
 80a6330:	676e 705f 6973 657a 7229 676e 705f 7470     ng_psize)rng_ppt
 80a6340:	2d72 723d 676e 705f 6973 657a 7d3b 7566     r-=rng_psize;}fu
 80a6350:	636e 6974 6e6f 7220 676e 735f 6565 5f64     nction rng_seed_
 80a6360:	6974 656d 2928 727b 676e 735f 6565 5f64     time(){rng_seed_
 80a6370:	6e69 2874 656e 2077 6144 6574 2928 672e     int(new Date().g
 80a6380:	7465 6954 656d 2928 3b29 697d 2866 6e72     etTime());}if(rn
 80a6390:	5f67 6f70 6c6f 3d3d 756e 6c6c 7b29 6e72     g_pool==null){rn
 80a63a0:	5f67 6f70 6c6f 6e3d 7765 4120 7272 7961     g_pool=new Array
 80a63b0:	2928 723b 676e 705f 7470 3d72 3b30 6176     ();rng_pptr=0;va
 80a63c0:	2072 3b74 6669 7728 6e69 6f64 2e77 7263     r t;if(window.cr
 80a63d0:	7079 6f74 2626 6977 646e 776f 632e 7972     ypto&&window.cry
 80a63e0:	7470 2e6f 6567 5274 6e61 6f64 566d 6c61     pto.getRandomVal
 80a63f0:	6575 2973 767b 7261 7520 3d61 656e 2077     ues){var ua=new 
 80a6400:	6955 746e 4138 7272 7961 3328 2932 773b     Uint8Array(32);w
 80a6410:	6e69 6f64 2e77 7263 7079 6f74 672e 7465     indow.crypto.get
 80a6420:	6152 646e 6d6f 6156 756c 7365 7528 2961     RandomValues(ua)
 80a6430:	663b 726f 7428 303d 743b 333c 3b32 2b2b     ;for(t=0;t<32;++
 80a6440:	2974 6e72 5f67 6f70 6c6f 725b 676e 705f     t)rng_pool[rng_p
 80a6450:	7470 2b72 5d2b 753d 5b61 5d74 7d3b 6669     ptr++]=ua[t];}if
 80a6460:	6e28 7661 6769 7461 726f 612e 7070 614e     (navigator.appNa
 80a6470:	656d 3d3d 4e27 7465 6373 7061 2765 2626     me=='Netscape'&&
 80a6480:	616e 6976 6167 6f74 2e72 7061 5670 7265     navigator.appVer
 80a6490:	6973 6e6f 273c 2735 2626 6977 646e 776f     sion<'5'&&window
 80a64a0:	632e 7972 7470 296f 767b 7261 7a20 773d     .crypto){var z=w
 80a64b0:	6e69 6f64 2e77 7263 7079 6f74 722e 6e61     indow.crypto.ran
 80a64c0:	6f64 286d 3233 3b29 6f66 2872 3d74 3b30     dom(32);for(t=0;
 80a64d0:	3c74 2e7a 656c 676e 6874 2b3b 742b 7229     t<z.length;++t)r
 80a64e0:	676e 705f 6f6f 5b6c 6e72 5f67 7070 7274     ng_pool[rng_pptr
 80a64f0:	2b2b 3d5d 2e7a 6863 7261 6f43 6564 7441     ++]=z.charCodeAt
 80a6500:	7428 2629 3532 3b35 777d 6968 656c 7228     (t)&255;}while(r
 80a6510:	676e 705f 7470 3c72 6e72 5f67 7370 7a69     ng_pptr<rng_psiz
 80a6520:	2965 747b 4d3d 7461 2e68 6c66 6f6f 2872     e){t=Math.floor(
 80a6530:	3536 3335 2a36 614d 6874 722e 6e61 6f64     65536*Math.rando
 80a6540:	286d 2929 723b 676e 705f 6f6f 5b6c 6e72     m());rng_pool[rn
 80a6550:	5f67 7070 7274 2b2b 3d5d 3e74 3e3e 3b38     g_pptr++]=t>>>8;
 80a6560:	6e72 5f67 6f70 6c6f 725b 676e 705f 7470     rng_pool[rng_ppt
 80a6570:	2b72 5d2b 743d 3226 3535 7d3b 6e72 5f67     r++]=t&255;}rng_
 80a6580:	7070 7274 303d 723b 676e 735f 6565 5f64     pptr=0;rng_seed_
 80a6590:	6974 656d 2928 7d3b 7566 636e 6974 6e6f     time();}function
 80a65a0:	7220 676e 675f 7465 625f 7479 2865 7b29      rng_get_byte(){
 80a65b0:	6669 7228 676e 735f 6174 6574 3d3d 756e     if(rng_state==nu
 80a65c0:	6c6c 7b29 6e72 5f67 6573 6465 745f 6d69     ll){rng_seed_tim
 80a65d0:	2865 3b29 6e72 5f67 7473 7461 3d65 7270     e();rng_state=pr
 80a65e0:	676e 6e5f 7765 7473 7461 2865 3b29 6e72     ng_newstate();rn
 80a65f0:	5f67 7473 7461 2e65 6e69 7469 7228 676e     g_state.init(rng
 80a6600:	705f 6f6f 296c 663b 726f 7228 676e 705f     _pool);for(rng_p
 80a6610:	7470 3d72 3b30 6e72 5f67 7070 7274 723c     ptr=0;rng_pptr<r
 80a6620:	676e 705f 6f6f 2e6c 656c 676e 6874 2b3b     ng_pool.length;+
 80a6630:	722b 676e 705f 7470 2972 6e72 5f67 6f70     +rng_pptr)rng_po
 80a6640:	6c6f 725b 676e 705f 7470 5d72 303d 723b     ol[rng_pptr]=0;r
 80a6650:	676e 705f 7470 3d72 3b30 727d 7465 7275     ng_pptr=0;}retur
 80a6660:	206e 6e72 5f67 7473 7461 2e65 656e 7478     n rng_state.next
 80a6670:	2928 7d3b 7566 636e 6974 6e6f 7220 676e     ();}function rng
 80a6680:	675f 7465 625f 7479 7365 6128 7b29 6176     _get_bytes(a){va
 80a6690:	2072 3b62 6f66 2872 3d62 3b30 3c62 2e61     r b;for(b=0;b<a.
 80a66a0:	656c 676e 6874 2b3b 622b 6129 625b 3d5d     length;++b)a[b]=
 80a66b0:	6e72 5f67 6567 5f74 7962 6574 2928 7d3b     rng_get_byte();}
 80a66c0:	7566 636e 6974 6e6f 5320 6365 7275 5265     function SecureR
 80a66d0:	6e61 6f64 286d 7b29 537d 6365 7275 5265     andom(){}SecureR
 80a66e0:	6e61 6f64 2e6d 7270 746f 746f 7079 2e65     andom.prototype.
 80a66f0:	656e 7478 7942 6574 3d73 6e72 5f67 6567     nextBytes=rng_ge
 80a6700:	5f74 7962 6574 3b73 0000 0000 0000 0000     t_bytes;........

080a6710 <_ZTV9IPAddress>:
	...
 80a6718:	060b 080a 05fd 080a 05ff 080a 3025 3031     ............%010
 80a6728:	2075 5d00 0020 003a 6425 2c00 0020 2928     u .] .:.%d., .()
 80a6738:	203a 2000 005b 6f63 6564 2000 203d 2500     : . [.code. = .%
 80a6748:	0069 6564 6174 6c69 0073 005d 7061 0070     i.details.].app.

080a6758 <_ZTV8SPIClass>:
	...
 80a6760:	0835 080a 0837 080a 005a 2b25 3330 3a64     5...7...Z.%+03d:
 80a6770:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a6780:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
	...

080a6798 <_ZTV11USARTSerial>:
	...
 80a67a0:	0999 080a 09bd 080a 09c9 080a 06b5 080a     ................
 80a67b0:	09a5 080a 09b1 080a 09ab 080a 09b7 080a     ................
 80a67c0:	099b 080a 099f 080a                         ........

080a67c8 <_ZL8asciimap>:
	...
 80a67d0:	2b2a 0028 0000 0000 0000 0000 0000 0000     *+(.............
	...
 80a67e8:	9e2c a0b4 a2a1 34a4 a7a6 aea5 2d36 3837     ,......4....6-78
 80a67f8:	1e27 201f 2221 2423 2625 33b3 2eb6 b8b7     '.. !"#$%&.3....
 80a6808:	849f 8685 8887 8a89 8c8b 8e8d 908f 9291     ................
 80a6818:	9493 9695 9897 9a99 9c9b 2f9d 3031 ada3     .........../10..
 80a6828:	0435 0605 0807 0a09 0c0b 0e0d 100f 1211     5...............
 80a6838:	1413 1615 1817 1a19 1c1b af1d b0b1 00b5     ................

080a6848 <_ZTV11USBKeyboard>:
	...
 80a6850:	0a65 080a 0bd5 080a 0bb3 080a 06b5 080a     e...............
 80a6860:	0b8d 080a 0af5 080a 0a69 080a 0ad9 080a     ........i.......

080a6870 <_ZTV9USBSerial>:
	...
 80a6878:	0ca5 080a 0ce9 080a 0cc3 080a 06b5 080a     ................
 80a6888:	0cbd 080a 0ca7 080a 0caf 080a 0ce3 080a     ................
 80a6898:	0cb7 080a 0ca1 080a                         ........

080a68a0 <_ZTVN5spark9WiFiClassE>:
	...
 80a68a8:	0179 080a                                   y...

080a68ac <link_const_variable_data_end>:
 80a68ac:	080a027d 	.word	0x080a027d
 80a68b0:	080a050d 	.word	0x080a050d
 80a68b4:	080a053d 	.word	0x080a053d
 80a68b8:	080a056d 	.word	0x080a056d
 80a68bc:	080a059d 	.word	0x080a059d
 80a68c0:	080a05cd 	.word	0x080a05cd
 80a68c4:	080a0675 	.word	0x080a0675
 80a68c8:	080a0685 	.word	0x080a0685
 80a68cc:	080a0805 	.word	0x080a0805
 80a68d0:	080a0861 	.word	0x080a0861
 80a68d4:	080a0891 	.word	0x080a0891
 80a68d8:	080a08c1 	.word	0x080a08c1
 80a68dc:	080a08f5 	.word	0x080a08f5
 80a68e0:	080a0925 	.word	0x080a0925
 80a68e4:	080a0939 	.word	0x080a0939
 80a68e8:	080a0969 	.word	0x080a0969
 80a68ec:	080a0c01 	.word	0x080a0c01
 80a68f0:	080a0c69 	.word	0x080a0c69
 80a68f4:	080a0e69 	.word	0x080a0e69
 80a68f8:	080a0f51 	.word	0x080a0f51
 80a68fc:	080a0f81 	.word	0x080a0f81
 80a6900:	080a0fb1 	.word	0x080a0fb1
 80a6904:	080a0fe1 	.word	0x080a0fe1
 80a6908:	080a105d 	.word	0x080a105d
 80a690c:	080a1121 	.word	0x080a1121
